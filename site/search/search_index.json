{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"01_project_overview/","text":"\u9879\u76ee\u6982\u89c8\u6587\u6863 \u672c\u76ee\u5f55\u5305\u542b\u9879\u76ee\u6574\u4f53\u72b6\u6001\u548c\u5206\u6790\u6587\u6863\uff0c\u9002\u5408\u6240\u6709\u56e2\u961f\u6210\u5458\u4e86\u89e3\u9879\u76ee\u5168\u8c8c\u3002 \u6587\u6863\u5217\u8868 \ud83d\udcca \u9879\u76ee\u72b6\u6001 project_status_2025_09_latest.md - \u9879\u76ee\u6700\u65b0\u72b6\u6001\u603b\u89c8\uff08\u2b50\u2b50\u2b50\u2b50\u2b50 \u5fc5\u8bfb\uff09 \u7cfb\u7edf\u67b6\u6784\u56fe \u529f\u80fd\u6a21\u5757\u6982\u8ff0 \u6280\u672f\u6808\u8be6\u60c5 \u5df2\u77e5\u95ee\u9898\u548c\u9650\u5236 \ud83d\udcc8 \u9879\u76ee\u5206\u6790 project_analysis_report.md - \u9879\u76ee\u5168\u9762\u5206\u6790\u62a5\u544a \u6280\u672f\u503a\u52a1\u5206\u6790 \u6027\u80fd\u8bc4\u4f30 \u6539\u8fdb\u5efa\u8bae \u9605\u8bfb\u5efa\u8bae \u65b0\u56e2\u961f\u6210\u5458 \u5148\u8bfb project_status_2025_09_latest.md \u4e86\u89e3\u9879\u76ee\u6574\u4f53\u60c5\u51b5 \u518d\u770b project_analysis_report.md \u6df1\u5165\u7406\u89e3\u6280\u672f\u7ec6\u8282 \u9879\u76ee\u51b3\u7b56\u8005 \u91cd\u70b9\u5173\u6ce8\u9879\u76ee\u5206\u6790\u62a5\u544a\u4e2d\u7684\u6539\u8fdb\u5efa\u8bae\u548c\u6280\u672f\u503a\u52a1\u90e8\u5206 \u66f4\u65b0\u9891\u7387 project_status: \u6708\u5ea6\u66f4\u65b0 project_analysis_report: \u5b63\u5ea6\u66f4\u65b0","title":"\u9879\u76ee\u6982\u89c8\u6587\u6863"},{"location":"01_project_overview/#_1","text":"\u672c\u76ee\u5f55\u5305\u542b\u9879\u76ee\u6574\u4f53\u72b6\u6001\u548c\u5206\u6790\u6587\u6863\uff0c\u9002\u5408\u6240\u6709\u56e2\u961f\u6210\u5458\u4e86\u89e3\u9879\u76ee\u5168\u8c8c\u3002","title":"\u9879\u76ee\u6982\u89c8\u6587\u6863"},{"location":"01_project_overview/#_2","text":"","title":"\u6587\u6863\u5217\u8868"},{"location":"01_project_overview/#_3","text":"project_status_2025_09_latest.md - \u9879\u76ee\u6700\u65b0\u72b6\u6001\u603b\u89c8\uff08\u2b50\u2b50\u2b50\u2b50\u2b50 \u5fc5\u8bfb\uff09 \u7cfb\u7edf\u67b6\u6784\u56fe \u529f\u80fd\u6a21\u5757\u6982\u8ff0 \u6280\u672f\u6808\u8be6\u60c5 \u5df2\u77e5\u95ee\u9898\u548c\u9650\u5236","title":"\ud83d\udcca \u9879\u76ee\u72b6\u6001"},{"location":"01_project_overview/#_4","text":"project_analysis_report.md - \u9879\u76ee\u5168\u9762\u5206\u6790\u62a5\u544a \u6280\u672f\u503a\u52a1\u5206\u6790 \u6027\u80fd\u8bc4\u4f30 \u6539\u8fdb\u5efa\u8bae","title":"\ud83d\udcc8 \u9879\u76ee\u5206\u6790"},{"location":"01_project_overview/#_5","text":"","title":"\u9605\u8bfb\u5efa\u8bae"},{"location":"01_project_overview/#_6","text":"\u5148\u8bfb project_status_2025_09_latest.md \u4e86\u89e3\u9879\u76ee\u6574\u4f53\u60c5\u51b5 \u518d\u770b project_analysis_report.md \u6df1\u5165\u7406\u89e3\u6280\u672f\u7ec6\u8282","title":"\u65b0\u56e2\u961f\u6210\u5458"},{"location":"01_project_overview/#_7","text":"\u91cd\u70b9\u5173\u6ce8\u9879\u76ee\u5206\u6790\u62a5\u544a\u4e2d\u7684\u6539\u8fdb\u5efa\u8bae\u548c\u6280\u672f\u503a\u52a1\u90e8\u5206","title":"\u9879\u76ee\u51b3\u7b56\u8005"},{"location":"01_project_overview/#_8","text":"project_status: \u6708\u5ea6\u66f4\u65b0 project_analysis_report: \u5b63\u5ea6\u66f4\u65b0","title":"\u66f4\u65b0\u9891\u7387"},{"location":"01_project_overview/project_analysis_report/","text":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u9879\u76ee\u5206\u6790\u62a5\u544a \u6587\u6863\u4fe1\u606f \u6587\u6863\u6807\u9898 : \u9879\u76ee\u5206\u6790\u62a5\u544a \u521b\u5efa\u65e5\u671f : 2025\u5e741\u6708 \u7248\u672c : v1.0 \u4f5c\u8005 : huliux \u5ba1\u6838\u72b6\u6001 : \u5f85\u5ba1\u6838 \u6574\u7406\u8bf4\u660e \u672c\u6587\u6863\u5df2\u6574\u5408\u4ee5\u4e0b\u5185\u5bb9\uff1a - \u539frefactor_roadmap.md\u7684\u91cd\u6784\u76ee\u6807\u548c\u5b9e\u65bd\u8def\u5f84 - \u539fimplementation_plan.md\u7684\u6280\u672f\u5b9e\u65bd\u65b9\u6848 \u6267\u884c\u6458\u8981 \u9879\u76ee\u6982\u51b5 \u9879\u76ee\u540d\u79f0 : \u80a1\u7968\u4f30\u503c\u7cfb\u7edf (Stock Valuation System) \u5206\u6790\u65e5\u671f : 2025\u5e749\u6708 \u4ee3\u7801\u89c4\u6a21 : \u7ea615,000\u884cPython\u4ee3\u7801 \u6838\u5fc3\u529f\u80fd : DCF\u4f30\u503c\u3001\u654f\u611f\u6027\u5206\u6790\uff08\u6269\u5c55\u8868\u4e0e\u5b88\u62a4\uff09\u3001\u80a1\u7968\u7b5b\u9009\u3001LLM\u5206\u6790 \u6280\u672f\u6808 : Python + FastAPI + Streamlit + Tushare + PostgreSQL \u6570\u636e\u67b6\u6784 : Tushare (\u4e3b) + PostgreSQL (\u5907) \u6df7\u5408\u67b6\u6784\uff08\u652f\u6301\u6309\u4f30\u503c\u65e5\u56de\u9000\u3001TTM\u80a1\u606f\u591a\u7ea7\u56de\u9000\uff09 \u5173\u952e\u53d1\u73b0\uff082025-09 \u66f4\u65b0\uff09 \u2705 \u529f\u80fd\u5b8c\u6574\u6027\uff1a\u6838\u5fc3\u4f30\u503c\u8def\u5f84\u7a33\u5b9a\uff0c\u654f\u611f\u6027\u5206\u6790\u6269\u5c55\u5e76\u66f4\u7a33\u5065\uff08\u65b0\u589e\u8868\u4e0e\u8fb9\u754c\u5b88\u62a4\uff09\u3002 \u2705 \u7a33\u5065\u6027\uff1aWACC \u5e02\u573a\u6743\u91cd\u5931\u8d25\u81ea\u52a8\u56de\u9000\u76ee\u6807\u7ed3\u6784\uff1bPGR\u2265WACC \u7ec4\u5408\u8df3\u8fc7\u5e76\u63d0\u793a\uff1bGDP \u4e0a\u9650\u53cc\u5c42\u4fdd\u62a4\u3002 \u2705 \u53ef\u89e3\u91ca\u6027\uff1a\u65b0\u589e ev_ebitda_terminal \u3001 implied_pgr \uff0c\u5e76\u5bf9 ev_ebitda \u53e3\u5f84\uff08LTM vs Terminal\uff09\u505a\u660e\u786e\u533a\u5206\u3002 \u2705 \u6d4b\u8bd5\u8fdb\u5c55\uff1a\u65b0\u589e\u654f\u611f\u6027\u6269\u5c55\u7684\u96c6\u6210\u6d4b\u8bd5\u7528\u4f8b\u5e76\u5168\u90e8\u901a\u8fc7\uff1b\u65e7\u7528\u4f8b\u517c\u5bb9\u3002 \u26a0\ufe0f \u67b6\u6784\u590d\u6742\u5ea6\uff1a\u670d\u52a1\u5c42\u7f16\u6392\u903b\u8f91\u589e\u52a0\uff0c\u9700\u5728\u4e0b\u4e00\u6b65\u5c06\u654f\u611f\u6027/\u60c5\u666f\u6846\u67b6\u62bd\u8c61\u4e3a\u72ec\u7acb\u7ec4\u4ef6\uff0c\u964d\u4f4e\u8026\u5408\u3002 \ud83c\udd95 \u6570\u636e\u5c42\uff1a\u4f30\u503c\u65e5\u56de\u9000\u3001TTM\u80a1\u606f\u591a\u7ea7\u56de\u9000\u4e0e LTM \u57fa\u671f\u5207\u6362\u903b\u8f91\u843d\u5730\uff0c\u6570\u636e\u53ef\u7528\u6027\u63d0\u5347\u3002 \u91cd\u6784\u5fc5\u8981\u6027\u8bc4\u4f30 \u91cd\u6784\u7d27\u8feb\u6027 : \ud83d\udd34 \u9ad8 \u4e1a\u52a1\u5f71\u54cd : \ud83d\udfe1 \u4e2d\u7b49 \u6280\u672f\u503a\u52a1 : \ud83d\udd34 \u4e25\u91cd \u7ef4\u62a4\u6210\u672c : \ud83d\udd34 \u9ad8 \u8be6\u7ec6\u5206\u6790\u7ed3\u679c 1. \u67b6\u6784\u5206\u6790 1.1 \u6df7\u5408\u67b6\u6784\u6982\u89c8 \u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u6df7\u5408\u67b6\u6784 \u251c\u2500\u2500 \u524d\u7aef\u5c42 (Streamlit) \u2502 \u251c\u2500\u2500 streamlit_app.py (\u4e3b\u5e94\u7528) \u2502 \u2514\u2500\u2500 stock_screener_app.py (\u7b5b\u9009\u5668) \u251c\u2500\u2500 API\u5c42 (FastAPI) \u2502 \u251c\u2500\u2500 api/main.py (API\u5165\u53e3) \u2502 \u251c\u2500\u2500 api/models.py (\u6570\u636e\u6a21\u578b) \u2502 \u2514\u2500\u2500 api/sensitivity_models.py (\u654f\u611f\u6027\u6a21\u578b) \u251c\u2500\u2500 \u4e1a\u52a1\u903b\u8f91\u5c42 \u2502 \u251c\u2500\u2500 valuation_service.py (\u4f30\u503c\u670d\u52a1\uff1a\u7edf\u4e00\u7f16\u6392\u3001\u56de\u9000\u4e0e\u5b88\u62a4) \u2502 \u251c\u2500\u2500 financial_forecaster.py (\u8d22\u52a1\u9884\u6d4b) \u2502 \u2514\u2500\u2500 sensitivity_analyzer.py / \u670d\u52a1\u5185\u5b9e\u73b0\uff08\u654f\u611f\u6027\uff1a\u6269\u5c55\u8868\u3001\u8fb9\u754c\u8df3\u8fc7\u3001\u56de\u586b\u903b\u8f91\uff09 \u251c\u2500\u2500 \u8ba1\u7b97\u5f15\u64ce\u5c42 \u2502 \u251c\u2500\u2500 wacc_calculator.py (WACC\u8ba1\u7b97) \u2502 \u251c\u2500\u2500 present_value_calculator.py (\u73b0\u503c\u8ba1\u7b97) \u2502 \u251c\u2500\u2500 terminal_value_calculator.py (\u7ec8\u503c\u8ba1\u7b97) \u2502 \u2514\u2500\u2500 equity_bridge_calculator.py (\u6743\u76ca\u6865\u63a5) \u2514\u2500\u2500 \u6df7\u5408\u6570\u636e\u5c42 \u251c\u2500\u2500 data_source_manager.py (\u6570\u636e\u6e90\u7ba1\u7406) \u251c\u2500\u2500 tushare_data_fetcher.py (Tushare\u6570\u636e\u83b7\u53d6) \u251c\u2500\u2500 postgresql_data_fetcher.py (PostgreSQL\u6570\u636e\u83b7\u53d6) \u251c\u2500\u2500 data_cache_manager.py (\u7f13\u5b58\u7ba1\u7406) \u251c\u2500\u2500 data_processor.py (\u6570\u636e\u5904\u7406) \u2514\u2500\u2500 stock_screener_data.py (\u7b5b\u9009\u6570\u636e) 1.2 \u6570\u636e\u6e90\u67b6\u6784\u8bbe\u8ba1 \u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u6570\u636e\u6e90\u7ba1\u7406\u5c42 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u914d\u7f6e\u7ba1\u7406 \u2502 \u2502 \u964d\u7ea7\u7b56\u7565 \u2502 \u2502 \u2502 \u2502 (.env\u5f00\u5173\u63a7\u5236) \u2502 \u2502 (\u81ea\u52a8\u5207\u6362\u673a\u5236) \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tushare API \u2502 \u2502 PostgreSQL \u2502 \u2502 (\u4e3b\u6570\u636e\u6e90) \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 (\u5907\u6570\u636e\u6e90) \u2502 \u2502 \u2502 \u6545\u969c\u5207\u6362 \u2502 \u2502 \u2502 \u2022 \u5b9e\u65f6\u6570\u636e \u2502 \u2502 \u2022 \u5386\u53f2\u6570\u636e \u2502 \u2502 \u2022 \u9ad8\u9891\u66f4\u65b0 \u2502 \u2502 \u2022 \u7a33\u5b9a\u53ef\u9760 \u2502 \u2502 \u2022 \u4e30\u5bcc\u5b57\u6bb5 \u2502 \u2502 \u2022 \u672c\u5730\u7f13\u5b58 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u7f13\u5b58\u7ba1\u7406\u5c42 \u2502 \u2502 \u2502 \u2502 \u2022 Redis\u7f13\u5b58 \u2502 \u2502 \u2022 \u672c\u5730\u7f13\u5b58 \u2502 \u2502 \u2022 \u667a\u80fd\u8fc7\u671f \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1.3 \u6df7\u5408\u67b6\u6784\u4f18\u52bf \u5206\u5c42\u6e05\u6670 : \u524d\u7aef\u3001API\u3001\u4e1a\u52a1\u903b\u8f91\u3001\u8ba1\u7b97\u3001\u6570\u636e\u5c42\u5206\u79bb \u529f\u80fd\u6a21\u5757\u5316 : \u5404\u8ba1\u7b97\u5668\u72ec\u7acb\u5c01\u88c5 \u6280\u672f\u6808\u73b0\u4ee3 : \u4f7f\u7528FastAPI\u3001Streamlit\u7b49\u73b0\u4ee3\u6846\u67b6 \u6269\u5c55\u6027\u826f\u597d : \u652f\u6301\u591a\u79cd\u4f30\u503c\u65b9\u6cd5\u548c\u5206\u6790\u529f\u80fd \ud83c\udd95 \u6570\u636e\u53ef\u9760\u6027\uff1a\u53cc\u6570\u636e\u6e90 + \u4f30\u503c\u65e5\u56de\u9000 + \u80a1\u606fTTM\u591a\u7ea7\u56de\u9000\u3002 \ud83c\udd95 \u6027\u80fd\u4f18\u5316\uff1a\u654f\u611f\u6027\u5728\u5e38\u89c1\u89c4\u6a21\uff085\u00d75/7\u00d77\uff09\u4e0b\u7a33\u5b9a\uff1b\u540e\u7eed\u53ef\u5bf9\u4ec5\u6539WACC\u7684\u683c\u4f7f\u7528\u91cd\u6298\u73b0\u4f18\u5316\u3002 \ud83c\udd95 \u7075\u6d3b\u5207\u6362\uff1a\u901a\u8fc7 .env \u548c\u8bf7\u6c42\u53c2\u6570\u63a7\u5236 GDP \u4e0a\u9650\u4e0e LTM \u57fa\u671f\u7b49\u884c\u4e3a\u3002 \ud83c\udd95 \u6210\u672c\u63a7\u5236\uff1a\u4f18\u5148\u4f7f\u7528\u7f13\u5b58/\u5907\u6e90\uff0c\u51cf\u5c11\u9891\u7e41\u5916\u90e8\u8c03\u7528\u3002 1.4 \u5f85\u4f18\u5316\u95ee\u9898 \u6a21\u5757\u8026\u5408 : \u90e8\u5206\u6a21\u5757\u95f4\u4f9d\u8d56\u5173\u7cfb\u590d\u6742 \u4ee3\u7801\u91cd\u590d : \u5b58\u5728\u91cd\u590d\u7684\u6570\u636e\u5904\u7406\u903b\u8f91 \u9519\u8bef\u5904\u7406 : \u5df2\u589e\u5f3a WACC \u4e0e PGR \u8fb9\u754c\uff1b\u4ecd\u9700\u7edf\u4e00\u5f02\u5e38\u4e0e\u544a\u8b66\u5206\u7ea7\uff08error/warn/info\uff09\u3002 \u914d\u7f6e\u7ba1\u7406 : \u9700\u8981\u7edf\u4e00\u7684\u6570\u636e\u6e90\u914d\u7f6e\u7ba1\u7406 \ud83c\udd95 \u7f13\u5b58\u7b56\u7565 : \u9700\u8981\u4f18\u5316\u7f13\u5b58\u5931\u6548\u548c\u66f4\u65b0\u7b56\u7565 \ud83c\udd95 \u76d1\u63a7\u544a\u8b66 : \u9700\u8981\u5efa\u7acb\u6570\u636e\u6e90\u72b6\u6001\u76d1\u63a7\u673a\u5236 2. \u4ee3\u7801\u8d28\u91cf\u5206\u6790 2.1 Pylint\u5206\u6790\u7ed3\u679c \u603b\u4f53\u8bc4\u5206 : 3.89/10 \u26a0\ufe0f \u4e3b\u8981\u95ee\u9898\u5206\u5e03 : \u95ee\u9898\u7c7b\u578b | \u6570\u91cf | \u4e25\u91cd\u7a0b\u5ea6 ------------------------|-------|---------- \u5355\u884c\u591a\u8bed\u53e5 (C0321) | 45 | \u4e2d\u7b49 \u6355\u83b7\u8fc7\u4e8e\u5bbd\u6cdb\u5f02\u5e38 (W0718) | 23 | \u9ad8 \u5206\u652f\u8fc7\u591a (R0912) | 12 | \u9ad8 \u8bed\u53e5\u8fc7\u591a (R0915) | 8 | \u9ad8 \u91cd\u590d\u5bfc\u5165 (W0404) | 15 | \u4f4e \u5bfc\u5165\u4f4d\u7f6e\u4e0d\u6b63\u786e (C0413) | 18 | \u4e2d\u7b49 \u5bfc\u5165\u987a\u5e8f\u4e0d\u6b63\u786e (C0411) | 22 | \u4f4e \u672a\u4f7f\u7528\u5bfc\u5165 (W0611) | 31 | \u4f4e 2.2 \u4ee3\u7801\u590d\u6742\u5ea6\u5206\u6790 \u9ad8\u590d\u6742\u5ea6\u51fd\u6570 : - financial_forecaster.py::forecast_financials() - \u5faa\u73af\u590d\u6742\u5ea6: 15 - data_processor.py::process_financial_data() - \u5faa\u73af\u590d\u6742\u5ea6: 12 - streamlit_app.py::render_valuation_results() - \u5faa\u73af\u590d\u6742\u5ea6: 10 \u957f\u51fd\u6570\u95ee\u9898 : - \u5e73\u5747\u51fd\u6570\u957f\u5ea6: 45\u884c - \u8d85\u8fc7100\u884c\u7684\u51fd\u6570: 8\u4e2a - \u6700\u957f\u51fd\u6570: 180\u884c ( streamlit_app.py::main() ) 2.3 \u4ee3\u7801\u98ce\u683c\u95ee\u9898 \u547d\u540d\u4e0d\u4e00\u81f4 : \u6df7\u7528\u9a7c\u5cf0\u548c\u4e0b\u5212\u7ebf\u547d\u540d \u6ce8\u91ca\u4e0d\u8db3 : \u5173\u952e\u4e1a\u52a1\u903b\u8f91\u7f3a\u4e4f\u6ce8\u91ca \u9b54\u6cd5\u6570\u5b57 : \u5b58\u5728\u786c\u7f16\u7801\u7684\u6570\u503c\u5e38\u91cf \u5bfc\u5165\u6df7\u4e71 : \u5bfc\u5165\u8bed\u53e5\u7ec4\u7ec7\u4e0d\u89c4\u8303 3. \u529f\u80fd\u9700\u6c42\u5206\u6790 3.1 \u6838\u5fc3\u529f\u80fd\u6a21\u5757 \u4f30\u503c\u8ba1\u7b97\u6a21\u5757 : - \u2705 DCF\u4f30\u503c\u8ba1\u7b97 - \u2705 WACC\u8ba1\u7b97 (\u76ee\u6807\u6743\u91cd/\u5e02\u573a\u6743\u91cd) - \u2705 \u7ec8\u503c\u8ba1\u7b97 (\u6c38\u7eed\u589e\u957f/\u9000\u51fa\u500d\u6570) - \u2705 \u6743\u76ca\u4ef7\u503c\u8ba1\u7b97 - \u2705 \u654f\u611f\u6027\u5206\u6790\uff08\u65b0\u589e ev_ebitda_terminal \u3001 implied_pgr \u3001\u6309\u683c PE \u56de\u586b\uff1b\u975e\u6cd5\u7ec4\u5408\u8df3\u8fc7\uff09 \u6570\u636e\u5904\u7406\u6a21\u5757 : - \u2705 Tushare\u6570\u636e\u83b7\u53d6 (\u4e3b\u6570\u636e\u6e90) - \u2705 PostgreSQL\u6570\u636e\u83b7\u53d6 (\u5907\u6570\u636e\u6e90) - \u2705 \u667a\u80fd\u6570\u636e\u6e90\u5207\u6362\u673a\u5236 - \u2705 \u8d22\u52a1\u6570\u636e\u6e05\u6d17\u548c\u6807\u51c6\u5316 - \u2705 \u5386\u53f2\u6bd4\u7387\u8ba1\u7b97 - \u2705 \u591a\u5c42\u7ea7\u7f13\u5b58\u673a\u5236 - \ud83c\udd95 \u4f30\u503c\u57fa\u671f\uff1a\u652f\u6301 Annual/LTM \u5207\u6362\u4e0e LTM \u660e\u7ec6\u8c03\u8bd5\u5207\u7247\u3002 - \ud83c\udd95 \u6570\u636e\u6e90\u72b6\u6001\u76d1\u63a7\uff08\u89c4\u5212\u4e2d\uff09 - \ud83c\udd95 \u81ea\u52a8\u964d\u7ea7\u548c\u6062\u590d\u7b56\u7565\uff08\u89c4\u5212\u4e2d\uff09 \u524d\u7aef\u754c\u9762\u6a21\u5757 : - \u2705 Streamlit\u4e3b\u5e94\u7528\u754c\u9762 - \u4e13\u4e1a\u91d1\u878d\u6570\u636e\u53ef\u89c6\u5316\u5e73\u53f0 - \u2705 \u4ea4\u4e92\u5f0f\u53c2\u6570\u914d\u7f6e\u9762\u677f - \u652f\u6301\u5b9e\u65f6\u53c2\u6570\u8c03\u6574 - \u2705 \u52a8\u6001\u7ed3\u679c\u5c55\u793a\u754c\u9762 - \u4e30\u5bcc\u7684\u56fe\u8868\u548c\u6570\u636e\u5c55\u793a - \u2705 \u80a1\u7968\u7b5b\u9009\u5668 - \u591a\u7ef4\u5ea6\u7b5b\u9009\u548c\u6392\u5e8f\u529f\u80fd - \u2705 \u54cd\u5e94\u5f0f\u5e03\u5c40\u8bbe\u8ba1 - \u9002\u914d\u4e0d\u540c\u5c4f\u5e55\u5c3a\u5bf8 API\u670d\u52a1\u6a21\u5757 : - \u2705 RESTful API\u63a5\u53e3 - \u2705 \u8bf7\u6c42\u9a8c\u8bc1 - \u2705 \u54cd\u5e94\u683c\u5f0f\u5316 - \u2705 \u9519\u8bef\u5904\u7406 - \u2705 \u8c03\u8bd5\u5207\u7247\uff1a debug_request_slice \uff08\u542b\u884c\u4e1a\u9884\u8bbe\u4e0e\u504f\u79bb diff\uff09 3.2 \u4e1a\u52a1\u6d41\u7a0b\u5206\u6790 \u4e3b\u8981\u4e1a\u52a1\u6d41\u7a0b : 1. \u80a1\u7968\u4f30\u503c\u6d41\u7a0b : \u8f93\u5165\u80a1\u7968\u4ee3\u7801 \u2192 \u83b7\u53d6\u8d22\u52a1\u6570\u636e \u2192 \u6570\u636e\u6e05\u6d17 \u2192 \u8d22\u52a1\u9884\u6d4b \u2192 DCF\u8ba1\u7b97 \u2192 \u7ed3\u679c\u5c55\u793a \u654f\u611f\u6027\u5206\u6790\u6d41\u7a0b : \u8bbe\u7f6e\u5206\u6790\u53c2\u6570 \u2192 \u6279\u91cf\u8ba1\u7b97 \u2192 \u751f\u6210\u654f\u611f\u6027\u77e9\u9635 \u2192 \u53ef\u89c6\u5316\u5c55\u793a \u80a1\u7968\u7b5b\u9009\u6d41\u7a0b : \u8bbe\u7f6e\u7b5b\u9009\u6761\u4ef6 \u2192 \u83b7\u53d6\u5e02\u573a\u6570\u636e \u2192 \u5e94\u7528\u7b5b\u9009\u903b\u8f91 \u2192 \u7ed3\u679c\u6392\u5e8f\u5c55\u793a 3.3 \u7528\u6237\u9700\u6c42\u6ee1\u8db3\u5ea6 \u529f\u80fd\u5b8c\u6574\u6027 : 90% \u2705 \u6613\u7528\u6027 : 75% \ud83d\udfe1 \u6027\u80fd\u8868\u73b0 : 70% \ud83d\udfe1 \u7a33\u5b9a\u6027 : 65% \u26a0\ufe0f 4. \u6280\u672f\u503a\u52a1\u8bc4\u4f30 4.1 \u6280\u672f\u503a\u52a1\u5206\u7c7b \u4ee3\u7801\u503a\u52a1 (\u4e25\u91cd \ud83d\udd34): - \u4ee3\u7801\u8d28\u91cf\u4f4e\uff0c\u7ef4\u62a4\u56f0\u96be - \u51fd\u6570\u8fc7\u957f\uff0c\u903b\u8f91\u590d\u6742 - \u7f3a\u4e4f\u7edf\u4e00\u7684\u7f16\u7801\u89c4\u8303 - \u5f02\u5e38\u5904\u7406\u4e0d\u5b8c\u5584 \u67b6\u6784\u503a\u52a1 (\u4e2d\u7b49 \ud83d\udfe1): - \u6a21\u5757\u8026\u5408\u5ea6\u8f83\u9ad8 - \u7f3a\u4e4f\u6e05\u6670\u7684\u63a5\u53e3\u5b9a\u4e49 - \u914d\u7f6e\u7ba1\u7406\u5206\u6563 - \u7f3a\u4e4f\u7edf\u4e00\u7684\u65e5\u5fd7\u7cfb\u7edf - \ud83c\udd95 \u6570\u636e\u6e90\u62bd\u8c61\u5c42\u9700\u8981\u91cd\u6784 - \ud83c\udd95 \u7f13\u5b58\u7b56\u7565\u9700\u8981\u7edf\u4e00\u7ba1\u7406 - \ud83c\udd95 \u76d1\u63a7\u548c\u544a\u8b66\u673a\u5236\u5f85\u5efa\u7acb \u6d4b\u8bd5\u503a\u52a1 (\u8f7b\u5fae \ud83d\udfe2): - \u6d4b\u8bd5\u8986\u76d6\u7387\u9700\u63d0\u5347 - \u7f3a\u4e4f\u96c6\u6210\u6d4b\u8bd5 - \u6027\u80fd\u6d4b\u8bd5\u4e0d\u8db3 \u6587\u6863\u503a\u52a1 (\u4e2d\u7b49 \ud83d\udfe1): - API\u6587\u6863\u4e0d\u5b8c\u6574 - \u4e1a\u52a1\u903b\u8f91\u6587\u6863\u7f3a\u5931 - \u90e8\u7f72\u6587\u6863\u9700\u5b8c\u5584 4.2 \u503a\u52a1\u5f71\u54cd\u8bc4\u4f30 \u5f00\u53d1\u6548\u7387\u5f71\u54cd : - \u65b0\u529f\u80fd\u5f00\u53d1\u901f\u5ea6: -40% - Bug\u4fee\u590d\u65f6\u95f4: +60% - \u4ee3\u7801\u5ba1\u67e5\u65f6\u95f4: +80% \u7ef4\u62a4\u6210\u672c\u5f71\u54cd : - \u65e5\u5e38\u7ef4\u62a4\u6210\u672c: +50% - \u65b0\u4eba\u4e0a\u624b\u65f6\u95f4: +100% - \u7cfb\u7edf\u7a33\u5b9a\u6027\u98ce\u9669: +70% 5. \u6027\u80fd\u5206\u6790 5.1 \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5 API\u54cd\u5e94\u65f6\u95f4 : \u63a5\u53e3\u7c7b\u578b | \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 | 95%\u5206\u4f4d\u6570 | \u76ee\u6807\u503c ------------------|-------------|-----------|-------- \u5355\u80a1\u7968\u4f30\u503c | 1.2s | 2.1s | <2s \u654f\u611f\u6027\u5206\u6790 | 3.5s | 5.8s | <5s\uff08\u5e38\u89c4 5\u00d75 \u7f51\u683c\uff1b\u542b\u8fb9\u754c\u8df3\u8fc7\uff09 \u80a1\u7968\u7b5b\u9009 | 0.8s | 1.3s | <1s \u6570\u636e\u83b7\u53d6 | 0.5s | 0.9s | <1s \u5185\u5b58\u4f7f\u7528\u60c5\u51b5 : - \u57fa\u7840\u5185\u5b58\u5360\u7528: ~150MB - \u5cf0\u503c\u5185\u5b58\u5360\u7528: ~400MB - \u5185\u5b58\u6cc4\u6f0f\u98ce\u9669: \u4f4e \u5e76\u53d1\u6027\u80fd : - \u6700\u5927\u5e76\u53d1\u7528\u6237: 20 - \u54cd\u5e94\u65f6\u95f4\u589e\u957f: \u7ebf\u6027 - \u7cfb\u7edf\u7a33\u5b9a\u6027: \u826f\u597d 5.2 \u6027\u80fd\u74f6\u9888\u8bc6\u522b \u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c : - \u654f\u611f\u6027\u5206\u6790\u77e9\u9635\u8ba1\u7b97 - \u5927\u91cf\u5386\u53f2\u6570\u636e\u5904\u7406 - \u590d\u6742\u8d22\u52a1\u9884\u6d4b\u8ba1\u7b97 I/O\u5bc6\u96c6\u578b\u64cd\u4f5c : - Tushare API\u8c03\u7528 - \u6570\u636e\u5e93\u67e5\u8be2\u64cd\u4f5c - \u6587\u4ef6\u7f13\u5b58\u8bfb\u5199 \u4f18\u5316\u5efa\u8bae : - \u5b9e\u73b0\u8ba1\u7b97\u7ed3\u679c\u7f13\u5b58 - \u4f18\u5316\u6570\u636e\u5e93\u67e5\u8be2 - \u4f7f\u7528\u5f02\u6b65\u5904\u7406 - \u5b9e\u73b0\u8ba1\u7b97\u4efb\u52a1\u961f\u5217 6. \u5b89\u5168\u6027\u5206\u6790 6.1 \u5b89\u5168\u98ce\u9669\u8bc4\u4f30 \u6570\u636e\u5b89\u5168 (\u4e2d\u7b49\u98ce\u9669 \ud83d\udfe1): - API\u5bc6\u94a5\u660e\u6587\u5b58\u50a8\u98ce\u9669 - \u7528\u6237\u8f93\u5165\u9a8c\u8bc1\u4e0d\u5145\u5206 - \u654f\u611f\u6570\u636e\u65e5\u5fd7\u8bb0\u5f55 \u7cfb\u7edf\u5b89\u5168 (\u4f4e\u98ce\u9669 \ud83d\udfe2): - \u65e0\u660e\u663e\u7684\u6ce8\u5165\u653b\u51fb\u98ce\u9669 - \u8bbf\u95ee\u63a7\u5236\u57fa\u672c\u5b8c\u5584 - \u4f9d\u8d56\u5e93\u5b89\u5168\u6027\u826f\u597d \u7f51\u7edc\u5b89\u5168 (\u4f4e\u98ce\u9669 \ud83d\udfe2): - HTTPS\u901a\u4fe1 - CORS\u914d\u7f6e\u5408\u7406 - \u65e0\u660e\u663e\u7684\u7f51\u7edc\u653b\u51fb\u9762 6.2 \u5b89\u5168\u6539\u8fdb\u5efa\u8bae \u5b9e\u73b0\u73af\u5883\u53d8\u91cf\u7ba1\u7406 \u52a0\u5f3a\u8f93\u5165\u9a8c\u8bc1 \u5b9e\u73b0\u8bbf\u95ee\u65e5\u5fd7\u5ba1\u8ba1 \u5b9a\u671f\u66f4\u65b0\u4f9d\u8d56\u5e93 7. \u6d4b\u8bd5\u73b0\u72b6\u5206\u6790 7.1 \u6d4b\u8bd5\u8986\u76d6\u60c5\u51b5 \u6d4b\u8bd5\u7edf\u8ba1\uff08\u66f4\u65b0\uff09 : - \u6d4b\u8bd5\u7528\u4f8b\u603b\u6570: 100+\uff08\u65b0\u589e\u654f\u611f\u6027\u6269\u5c55\u7528\u4f8b\uff09 - \u6d4b\u8bd5\u901a\u8fc7\u7387: 100% - \u4ee3\u7801\u8986\u76d6\u7387: 62%+\uff08\u5355\u6587\u4ef6\u63d0\u5347\uff09 - \u6d4b\u8bd5\u6267\u884c\u65f6\u95f4: ~50\u79d2 \u8986\u76d6\u7387\u5206\u5e03 : \u6a21\u5757\u7c7b\u578b | \u8986\u76d6\u7387 | \u6d4b\u8bd5\u7528\u4f8b\u6570 ------------------|---------|---------- \u8ba1\u7b97\u5668\u6a21\u5757 | 85% | 45 API\u63a5\u53e3 | 45% | 12 \u6570\u636e\u5904\u7406 | 70% | 25 \u4e1a\u52a1\u903b\u8f91 | 55% | 15 7.2 \u6d4b\u8bd5\u8d28\u91cf\u8bc4\u4f30 \u6d4b\u8bd5\u4f18\u52bf : - \u6838\u5fc3\u8ba1\u7b97\u903b\u8f91\u6d4b\u8bd5\u5145\u5206 - \u6d4b\u8bd5\u7528\u4f8b\u8d28\u91cf\u8f83\u9ad8 - \u6d4b\u8bd5\u6267\u884c\u7a33\u5b9a \u6d4b\u8bd5\u4e0d\u8db3 : - \u96c6\u6210\u6d4b\u8bd5\u7f3a\u5931 - API\u6d4b\u8bd5\u8986\u76d6\u4e0d\u8db3 - \u6027\u80fd\u6d4b\u8bd5\u7f3a\u5931 - E2E\u6d4b\u8bd5\u7f3a\u5931 - \u60c5\u666f\u5206\u6790\uff08\u591a\u60c5\u666f\u5408\u6210\uff09\u4ec5\u6587\u6863\u65b9\u6848\uff0c\u5f85\u5b9e\u73b0\u4e0e\u6d4b\u8bd5 8. \u4f9d\u8d56\u5206\u6790 8.1 \u6838\u5fc3\u4f9d\u8d56 Python\u4f9d\u8d56 : \u4f9d\u8d56\u5e93 | \u7248\u672c | \u7528\u9014 | \u98ce\u9669\u8bc4\u4f30 -----------------|---------|----------------|---------- fastapi | 0.104.1 | Web\u6846\u67b6 | \u4f4e streamlit | 1.28.1 | \u524d\u7aef\u754c\u9762 | \u4f4e tushare | 1.2.89 | \u6570\u636e\u6e90 | \u4e2d pandas | 2.1.3 | \u6570\u636e\u5904\u7406 | \u4f4e numpy | 1.25.2 | \u6570\u503c\u8ba1\u7b97 | \u4f4e scipy | 1.11.4 | \u79d1\u5b66\u8ba1\u7b97 | \u4f4e plotly | 5.17.0 | \u6570\u636e\u53ef\u89c6\u5316 | \u4f4e \u7cfb\u7edf\u4f9d\u8d56 : - Python 3.9+ - \u64cd\u4f5c\u7cfb\u7edf: \u8de8\u5e73\u53f0\u652f\u6301 - \u5185\u5b58\u8981\u6c42: \u6700\u5c0f512MB - \u7f51\u7edc\u8981\u6c42: \u7a33\u5b9a\u7684\u4e92\u8054\u7f51\u8fde\u63a5 8.2 \u4f9d\u8d56\u98ce\u9669\u8bc4\u4f30 \u9ad8\u98ce\u9669\u4f9d\u8d56 : - Tushare: \u7b2c\u4e09\u65b9\u4ed8\u8d39\u6570\u636e\u6e90\uff0c\u5b58\u5728API\u9650\u6d41\u548c\u670d\u52a1\u4e2d\u65ad\u98ce\u9669 \u4e2d\u98ce\u9669\u4f9d\u8d56 : - PostgreSQL: \u6570\u636e\u5e93\u8fde\u63a5\u7a33\u5b9a\u6027\u4f9d\u8d56 - Redis: \u7f13\u5b58\u670d\u52a1\u53ef\u7528\u6027\u4f9d\u8d56 - \ud83c\udd95 \u6570\u636e\u6e90\u540c\u6b65\u673a\u5236: \u53cc\u6570\u636e\u6e90\u4e00\u81f4\u6027\u7ef4\u62a4\u590d\u6742\u5ea6 \u4f4e\u98ce\u9669\u4f9d\u8d56 : - \u5176\u4ed6\u6240\u6709\u4f9d\u8d56\u5e93\u5747\u4e3a\u6210\u719f\u7a33\u5b9a\u7684\u5f00\u6e90\u9879\u76ee 9. \u53ef\u7ef4\u62a4\u6027\u5206\u6790 9.1 \u524d\u7aef\u754c\u9762\u67b6\u6784 Streamlit\u6846\u67b6\u4f18\u52bf : 8/10 \ud83d\udfe2 - \u4e13\u4e1a\u7684\u91d1\u878d\u6570\u636e\u53ef\u89c6\u5316\u7ec4\u4ef6\u5e93 - \u539f\u751f\u652f\u6301\u5b9e\u65f6\u6570\u636e\u66f4\u65b0\u548c\u4ea4\u4e92 - \u4e30\u5bcc\u7684\u56fe\u8868\u7c7b\u578b\u548c\u81ea\u5b9a\u4e49\u9009\u9879 - \u54cd\u5e94\u5f0f\u5e03\u5c40\u548c\u73b0\u4ee3\u5316UI\u8bbe\u8ba1 \u7ec4\u4ef6\u5316\u7a0b\u5ea6 : 7/10 \ud83d\udfe1 - \u4e3b\u8981\u754c\u9762\u7ec4\u4ef6\u5df2\u6a21\u5757\u5316 - \u53ef\u590d\u7528\u7ec4\u4ef6\u9700\u8981\u8fdb\u4e00\u6b65\u62bd\u8c61 - \u72b6\u6001\u7ba1\u7406\u9700\u8981\u4f18\u5316 \u7528\u6237\u4f53\u9a8c : 8/10 \ud83d\udfe2 - \u76f4\u89c2\u7684\u53c2\u6570\u914d\u7f6e\u754c\u9762 - \u5b9e\u65f6\u7684\u8ba1\u7b97\u7ed3\u679c\u5c55\u793a - \u4e13\u4e1a\u7684\u91d1\u878d\u56fe\u8868\u53ef\u89c6\u5316 - \u6d41\u7545\u7684\u4ea4\u4e92\u54cd\u5e94 9.2 \u7ef4\u62a4\u6027\u6307\u6807 \u4ee3\u7801\u53ef\u8bfb\u6027 : 6/10 \ud83d\udfe1 - \u51fd\u6570\u547d\u540d\u57fa\u672c\u6e05\u6670 - \u6ce8\u91ca\u8986\u76d6\u7387\u4e0d\u8db3 - \u4ee3\u7801\u7ed3\u6784\u9700\u8981\u4f18\u5316 \u6a21\u5757\u5316\u7a0b\u5ea6 : 7/10 \ud83d\udfe2 - \u529f\u80fd\u6a21\u5757\u5212\u5206\u5408\u7406 - \u63a5\u53e3\u5b9a\u4e49\u57fa\u672c\u6e05\u6670 - \u4f9d\u8d56\u5173\u7cfb\u53ef\u4ee5\u4f18\u5316 \u6269\u5c55\u6027 : 8/10 \ud83d\udfe2 - \u67b6\u6784\u652f\u6301\u529f\u80fd\u6269\u5c55 - \u65b0\u589e\u8ba1\u7b97\u5668\u5bb9\u6613 - \u6570\u636e\u6e90\u53ef\u4ee5\u6269\u5c55 \u6d4b\u8bd5\u53cb\u597d\u6027 : 7/10 \ud83d\udfe2 - \u6838\u5fc3\u903b\u8f91\u6613\u4e8e\u6d4b\u8bd5 - \u4f9d\u8d56\u6ce8\u5165\u9700\u8981\u6539\u8fdb - Mock\u652f\u6301\u9700\u8981\u52a0\u5f3a 9.2 \u7ef4\u62a4\u6210\u672c\u8bc4\u4f30 \u5f53\u524d\u7ef4\u62a4\u6210\u672c : \u9ad8 \ud83d\udd34 - \u4ee3\u7801\u8d28\u91cf\u95ee\u9898\u5bfc\u81f4\u7ef4\u62a4\u56f0\u96be - \u7f3a\u4e4f\u5b8c\u5584\u7684\u6587\u6863 - \u65b0\u4eba\u4e0a\u624b\u6210\u672c\u9ad8 \u91cd\u6784\u540e\u9884\u671f : \u4e2d\u7b49 \ud83d\udfe1 - \u4ee3\u7801\u8d28\u91cf\u663e\u8457\u63d0\u5347 - \u6587\u6863\u5b8c\u5584 - \u7ef4\u62a4\u6548\u7387\u63d0\u9ad860% 10. \u4e1a\u52a1\u4ef7\u503c\u8bc4\u4f30 10.1 \u529f\u80fd\u4ef7\u503c \u6838\u5fc3\u4ef7\u503c (\u9ad8 \ud83d\udfe2): - \u63d0\u4f9b\u4e13\u4e1a\u7684DCF\u4f30\u503c\u8ba1\u7b97 - \u652f\u6301\u591a\u7ef4\u5ea6\u654f\u611f\u6027\u5206\u6790 - \u5b9e\u73b0\u81ea\u52a8\u5316\u80a1\u7968\u7b5b\u9009 \u7528\u6237\u4ef7\u503c (\u9ad8 \ud83d\udfe2): - \u7b80\u5316\u590d\u6742\u7684\u4f30\u503c\u8ba1\u7b97\u8fc7\u7a0b - \u63d0\u4f9b\u76f4\u89c2\u7684\u7ed3\u679c\u5c55\u793a - \u652f\u6301\u6279\u91cf\u5206\u6790\u5904\u7406 \u5546\u4e1a\u4ef7\u503c (\u4e2d\u7b49 \ud83d\udfe1): - \u53ef\u4f5c\u4e3a\u6295\u8d44\u51b3\u7b56\u8f85\u52a9\u5de5\u5177 - \u5177\u5907\u5546\u4e1a\u5316\u6f5c\u529b - \u53ef\u6269\u5c55\u4e3aSaaS\u670d\u52a1 10.2 \u7ade\u4e89\u4f18\u52bf \u6280\u672f\u4f18\u52bf : - \u8ba1\u7b97\u903b\u8f91\u4e13\u4e1a\u51c6\u786e - \u754c\u9762\u53cb\u597d\u6613\u7528 - \u652f\u6301\u591a\u79cd\u4f30\u503c\u65b9\u6cd5 \u6570\u636e\u4f18\u52bf : - \u96c6\u6210Tushare\u6570\u636e\u6e90 - \u5b9e\u65f6\u6570\u636e\u66f4\u65b0 - \u5386\u53f2\u6570\u636e\u5206\u6790 \u529f\u80fd\u4f18\u52bf : - \u654f\u611f\u6027\u5206\u6790\u529f\u80fd\u5b8c\u5584 - \u652f\u6301\u6279\u91cf\u5904\u7406 - \u7ed3\u679c\u53ef\u89c6\u5316\u6548\u679c\u597d \u91cd\u6784\u5efa\u8bae 1. \u91cd\u6784\u4f18\u5148\u7ea7 \u7b2c\u4e00\u4f18\u5148\u7ea7 (\u7acb\u5373\u6267\u884c): - \ud83c\udd95 \u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784\u5b9e\u73b0 - \ud83c\udd95 \u6570\u636e\u6e90\u7ba1\u7406\u5668\u5f00\u53d1 - \ud83c\udd95 \u7f13\u5b58\u673a\u5236\u4f18\u5316 - \u4ee3\u7801\u8d28\u91cf\u6539\u8fdb - \u9519\u8bef\u5904\u7406\u6807\u51c6\u5316 - \u6d4b\u8bd5\u8986\u76d6\u7387\u63d0\u5347 \u7b2c\u4e8c\u4f18\u5148\u7ea7 (\u8fd1\u671f\u6267\u884c): - \ud83c\udd95 \u6570\u636e\u6e90\u76d1\u63a7\u548c\u544a\u8b66\u7cfb\u7edf - \ud83c\udd95 \u81ea\u52a8\u964d\u7ea7\u548c\u6062\u590d\u673a\u5236 - \u67b6\u6784\u4f18\u5316\u91cd\u6784 - \u6027\u80fd\u4f18\u5316 - \u6587\u6863\u5b8c\u5584 \u7b2c\u4e09\u4f18\u5148\u7ea7 (\u957f\u671f\u89c4\u5212): - \ud83c\udd95 \u6570\u636e\u6e90\u6269\u5c55\u80fd\u529b - \ud83c\udd95 \u667a\u80fd\u7f13\u5b58\u7b56\u7565\u4f18\u5316 - \u529f\u80fd\u6269\u5c55 - \u7528\u6237\u4f53\u9a8c\u4f18\u5316 - \u5546\u4e1a\u5316\u51c6\u5907 2. \u91cd\u6784\u7b56\u7565 \u6e10\u8fdb\u5f0f\u91cd\u6784 : - \u4fdd\u6301\u7cfb\u7edf\u529f\u80fd\u6b63\u5e38\u8fd0\u884c - \u5206\u6a21\u5757\u9010\u6b65\u91cd\u6784 - \u6bcf\u4e2a\u9636\u6bb5\u90fd\u6709\u53ef\u4ea4\u4ed8\u6210\u679c \u8d28\u91cf\u4f18\u5148 : - \u4ee3\u7801\u8d28\u91cf\u662f\u91cd\u6784\u7684\u6838\u5fc3\u76ee\u6807 - \u5efa\u7acb\u5b8c\u5584\u7684\u8d28\u91cf\u4fdd\u8bc1\u4f53\u7cfb - \u6301\u7eed\u76d1\u63a7\u548c\u6539\u8fdb \u6d4b\u8bd5\u9a71\u52a8 : - \u91cd\u6784\u524d\u8865\u5145\u6d4b\u8bd5\u7528\u4f8b - \u786e\u4fdd\u91cd\u6784\u4e0d\u7834\u574f\u73b0\u6709\u529f\u80fd - \u5efa\u7acb\u56de\u5f52\u6d4b\u8bd5\u673a\u5236 3. \u9884\u671f\u6536\u76ca \u77ed\u671f\u6536\u76ca (1-3\u4e2a\u6708): - \ud83c\udd95 \u6570\u636e\u53ef\u9760\u6027\u63d0\u534790% (\u53cc\u6570\u636e\u6e90\u4fdd\u969c) - \ud83c\udd95 API\u8c03\u7528\u6210\u672c\u964d\u4f4e60% (\u667a\u80fd\u7f13\u5b58) - \u4ee3\u7801\u8d28\u91cf\u663e\u8457\u63d0\u5347 - \u5f00\u53d1\u6548\u7387\u63d0\u9ad830% - Bug\u6570\u91cf\u51cf\u5c1150% \u4e2d\u671f\u6536\u76ca (3-6\u4e2a\u6708): - \ud83c\udd95 \u6570\u636e\u8bbf\u95ee\u901f\u5ea6\u63d0\u534770% (\u7f13\u5b58\u4f18\u5316) - \ud83c\udd95 \u7cfb\u7edf\u53ef\u7528\u6027\u8fbe\u523099.5% (\u81ea\u52a8\u964d\u7ea7) - \u7cfb\u7edf\u6027\u80fd\u63d0\u534740% - \u7ef4\u62a4\u6210\u672c\u964d\u4f4e60% - \u65b0\u529f\u80fd\u5f00\u53d1\u901f\u5ea6\u63d0\u534750% \u957f\u671f\u6536\u76ca (6-12\u4e2a\u6708): - \ud83c\udd95 \u652f\u6301\u591a\u6570\u636e\u6e90\u6269\u5c55\u80fd\u529b - \ud83c\udd95 \u667a\u80fd\u6570\u636e\u6e90\u9009\u62e9\u548c\u4f18\u5316 - \u7cfb\u7edf\u7a33\u5b9a\u6027\u5927\u5e45\u63d0\u5347 - \u652f\u6301\u66f4\u5927\u89c4\u6a21\u7528\u6237 - \u5177\u5907\u5546\u4e1a\u5316\u80fd\u529b \u98ce\u9669\u8bc4\u4f30 1. \u6280\u672f\u98ce\u9669 \u91cd\u6784\u98ce\u9669 (\u4e2d\u7b49 \ud83d\udfe1): - \u91cd\u6784\u8fc7\u7a0b\u53ef\u80fd\u5f15\u5165\u65b0bug - \u529f\u80fd\u56de\u5f52\u98ce\u9669 - \u6027\u80fd\u4e0b\u964d\u98ce\u9669 \u4f9d\u8d56\u98ce\u9669 (\u4e2d\u7b49 \ud83d\udfe1): - \u7b2c\u4e09\u65b9\u5e93\u66f4\u65b0\u98ce\u9669 - Tushare API\u53d8\u66f4\u548c\u9650\u6d41\u98ce\u9669 - PostgreSQL\u6570\u636e\u6e90\u7a33\u5b9a\u6027\u98ce\u9669 - \ud83c\udd95 \u53cc\u6570\u636e\u6e90\u540c\u6b65\u4e00\u81f4\u6027\u98ce\u9669 - \ud83c\udd95 \u7f13\u5b58\u6570\u636e\u8fc7\u671f\u98ce\u9669 \u6280\u672f\u9009\u578b\u98ce\u9669 (\u4f4e \ud83d\udfe2): - \u73b0\u6709\u6280\u672f\u6808\u6210\u719f\u7a33\u5b9a - \u793e\u533a\u652f\u6301\u826f\u597d - \u5b66\u4e60\u6210\u672c\u53ef\u63a7 2. \u4e1a\u52a1\u98ce\u9669 \u7528\u6237\u4f53\u9a8c\u98ce\u9669 (\u4f4e \ud83d\udfe2): - \u91cd\u6784\u671f\u95f4\u529f\u80fd\u53ef\u80fd\u6682\u65f6\u4e0d\u53ef\u7528 - \u754c\u9762\u53d8\u5316\u53ef\u80fd\u5f71\u54cd\u7528\u6237\u4e60\u60ef \u6570\u636e\u98ce\u9669 (\u4e2d\u7b49 \ud83d\udfe1): - \u6570\u636e\u8fc1\u79fb\u98ce\u9669 - \u5386\u53f2\u6570\u636e\u517c\u5bb9\u6027 - \u8ba1\u7b97\u7ed3\u679c\u4e00\u81f4\u6027 3. \u9879\u76ee\u98ce\u9669 \u65f6\u95f4\u98ce\u9669 (\u4e2d\u7b49 \ud83d\udfe1): - \u91cd\u6784\u65f6\u95f4\u53ef\u80fd\u8d85\u51fa\u9884\u671f - \u8d44\u6e90\u6295\u5165\u53ef\u80fd\u4e0d\u8db3 \u4eba\u5458\u98ce\u9669 (\u4f4e \ud83d\udfe2): - \u6280\u672f\u56e2\u961f\u80fd\u529b\u5339\u914d - \u77e5\u8bc6\u4f20\u627f\u98ce\u9669\u53ef\u63a7 \u7ed3\u8bba\u4e0e\u5efa\u8bae 1. \u603b\u4f53\u8bc4\u4f30 \u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u662f\u4e00\u4e2a \u529f\u80fd\u5b8c\u6574\u3001\u5177\u6709\u5546\u4e1a\u4ef7\u503c \u7684\u9879\u76ee\uff0c\u901a\u8fc7\u91c7\u7528 Tushare + PostgreSQL\u6df7\u5408\u67b6\u6784 \uff0c\u663e\u8457\u63d0\u5347\u4e86\u6570\u636e\u53ef\u9760\u6027\u548c\u7cfb\u7edf\u7a33\u5b9a\u6027\u3002\u867d\u7136\u4ecd\u5b58\u5728 \u4ee3\u7801\u8d28\u91cf\u95ee\u9898 \u548c \u6280\u672f\u503a\u52a1 \uff0c\u4f46\u6df7\u5408\u67b6\u6784\u7684\u5f15\u5165\u4e3a\u7cfb\u7edf\u5e26\u6765\u4e86\u65b0\u7684\u4f18\u52bf\u3002\u7cfb\u7edf\u7684\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\u6b63\u786e\uff0c\u6d4b\u8bd5\u8986\u76d6\u57fa\u672c\u5145\u5206\uff0c\u9700\u8981\u8fdb\u884c \u7cfb\u7edf\u6027\u91cd\u6784\u548c\u67b6\u6784\u4f18\u5316 \u3002 2. \u91cd\u6784\u5fc5\u8981\u6027 \u5efa\u8bae\u6301\u7eed\u91cd\u6784\u4e0e\u67b6\u6784\u5347\u7ea7 \uff0c\u7406\u7531\u5982\u4e0b\uff1a - \ud83c\udd95 \u6df7\u5408\u67b6\u6784\u4e0e\u670d\u52a1\u5c42\u5b88\u62a4\u5df2\u5e26\u6765\u7a33\u5b9a\u6027\u63d0\u5347\uff1b\u7ee7\u7eed\u89e3\u8026\u654f\u611f\u6027/\u60c5\u666f\u6a21\u5757\u53ef\u8fdb\u4e00\u6b65\u964d\u4f4e\u8026\u5408\u3002 - \ud83c\udd95 \u6570\u636e\u6e90\u4e0e\u4f30\u503c\u57fa\u671f\u7b56\u7565\u66f4\u7075\u6d3b\uff1b\u9700\u5f15\u5165\u7edf\u4e00\u5f02\u5e38/\u544a\u8b66\u89c4\u8303\u4e0e\u53ef\u89c2\u6d4b\u6027\u3002 - \u4ee3\u7801\u8d28\u91cf\u95ee\u9898\u4ecd\u5f71\u54cd\u6548\u7387\uff1b\u5efa\u8bae\u63a8\u8fdb\u6a21\u5757\u5316\u4e0e\u7c7b\u578b\u7ea6\u675f\uff0c\u8865\u9f50\u6027\u80fd/\u96c6\u6210\u6d4b\u8bd5\u3002 3. \u5b9e\u65bd\u5efa\u8bae \u7acb\u5373\u884c\u52a8 : 1. \ud83c\udd95 \u5b9e\u65bd\u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784 2. \ud83c\udd95 \u5f00\u53d1\u6570\u636e\u6e90\u7ba1\u7406\u548c\u7f13\u5b58\u7cfb\u7edf 3. \u542f\u52a8\u4ee3\u7801\u8d28\u91cf\u6539\u8fdb\u8ba1\u5212 4. \u5efa\u7acb\u4ee3\u7801\u89c4\u8303\u548c\u8d28\u91cf\u68c0\u67e5\u6d41\u7a0b 5. \u8865\u5145\u5173\u952e\u6a21\u5757\u7684\u6d4b\u8bd5\u7528\u4f8b \u8fd1\u671f\u89c4\u5212 : 1. \ud83c\udd95 \u5efa\u7acb\u6570\u636e\u6e90\u76d1\u63a7\u548c\u544a\u8b66\u673a\u5236 2. \ud83c\udd95 \u5b9e\u73b0\u81ea\u52a8\u964d\u7ea7\u548c\u6062\u590d\u7b56\u7565 3. \u6267\u884c\u5206\u9636\u6bb5\u91cd\u6784\u8ba1\u5212 4. \u4f18\u5316\u7cfb\u7edf\u67b6\u6784\u548c\u6027\u80fd 5. \u5b8c\u5584\u6587\u6863\u548c\u90e8\u7f72\u6d41\u7a0b \u957f\u671f\u76ee\u6807 : 1. \ud83c\udd95 \u6784\u5efa\u667a\u80fd\u6570\u636e\u6e90\u9009\u62e9\u548c\u4f18\u5316\u80fd\u529b 2. \ud83c\udd95 \u652f\u6301\u66f4\u591a\u6570\u636e\u6e90\u7684\u6269\u5c55 3. \u5efa\u7acb\u53ef\u6301\u7eed\u7684\u5f00\u53d1\u548c\u7ef4\u62a4\u4f53\u7cfb 4. \u6269\u5c55\u7cfb\u7edf\u529f\u80fd\u548c\u7528\u6237\u89c4\u6a21 5. \u63a2\u7d22\u5546\u4e1a\u5316\u673a\u4f1a 4. \u6210\u529f\u5173\u952e\u56e0\u7d20 \u7ba1\u7406\u5c42\u652f\u6301 : \u786e\u4fdd\u5145\u8db3\u7684\u8d44\u6e90\u6295\u5165 \u56e2\u961f\u534f\u4f5c : \u5efa\u7acb\u826f\u597d\u7684\u534f\u4f5c\u673a\u5236 \u8d28\u91cf\u4fdd\u8bc1 : \u5efa\u7acb\u4e25\u683c\u7684\u8d28\u91cf\u6807\u51c6 \u6301\u7eed\u6539\u8fdb : \u5efa\u7acb\u6301\u7eed\u4f18\u5316\u7684\u6587\u5316 \u901a\u8fc7\u6df7\u5408\u67b6\u6784\u5347\u7ea7\u548c\u7cfb\u7edf\u6027\u91cd\u6784\uff0c\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u5c06\u6210\u4e3a\u4e00\u4e2a \u9ad8\u8d28\u91cf\u3001\u9ad8\u6027\u80fd\u3001\u9ad8\u53ef\u9760\u6027\u3001\u6613\u7ef4\u62a4 \u7684\u4e13\u4e1a\u91d1\u878d\u5206\u6790\u5de5\u5177\uff0c\u5177\u5907 \u5f3a\u5927\u7684\u6570\u636e\u5904\u7406\u80fd\u529b \u548c \u957f\u671f\u53d1\u5c55\u548c\u5546\u4e1a\u5316 \u7684\u6f5c\u529b\u3002 \u62a5\u544a\u751f\u6210\u65f6\u95f4 : 2025\u5e741\u6708 \u5206\u6790\u5de5\u5177 : Pylint, pytest, \u4eba\u5de5\u4ee3\u7801\u5ba1\u67e5 \u62a5\u544a\u7248\u672c : v1.0 \u4e0b\u6b21\u8bc4\u4f30\u5efa\u8bae : \u91cd\u6784\u5b8c\u6210\u540e3\u4e2a\u6708","title":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u9879\u76ee\u5206\u6790\u62a5\u544a"},{"location":"01_project_overview/project_analysis_report/#_1","text":"","title":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u9879\u76ee\u5206\u6790\u62a5\u544a"},{"location":"01_project_overview/project_analysis_report/#_2","text":"\u6587\u6863\u6807\u9898 : \u9879\u76ee\u5206\u6790\u62a5\u544a \u521b\u5efa\u65e5\u671f : 2025\u5e741\u6708 \u7248\u672c : v1.0 \u4f5c\u8005 : huliux \u5ba1\u6838\u72b6\u6001 : \u5f85\u5ba1\u6838","title":"\u6587\u6863\u4fe1\u606f"},{"location":"01_project_overview/project_analysis_report/#_3","text":"\u672c\u6587\u6863\u5df2\u6574\u5408\u4ee5\u4e0b\u5185\u5bb9\uff1a - \u539frefactor_roadmap.md\u7684\u91cd\u6784\u76ee\u6807\u548c\u5b9e\u65bd\u8def\u5f84 - \u539fimplementation_plan.md\u7684\u6280\u672f\u5b9e\u65bd\u65b9\u6848","title":"\u6574\u7406\u8bf4\u660e"},{"location":"01_project_overview/project_analysis_report/#_4","text":"","title":"\u6267\u884c\u6458\u8981"},{"location":"01_project_overview/project_analysis_report/#_5","text":"\u9879\u76ee\u540d\u79f0 : \u80a1\u7968\u4f30\u503c\u7cfb\u7edf (Stock Valuation System) \u5206\u6790\u65e5\u671f : 2025\u5e749\u6708 \u4ee3\u7801\u89c4\u6a21 : \u7ea615,000\u884cPython\u4ee3\u7801 \u6838\u5fc3\u529f\u80fd : DCF\u4f30\u503c\u3001\u654f\u611f\u6027\u5206\u6790\uff08\u6269\u5c55\u8868\u4e0e\u5b88\u62a4\uff09\u3001\u80a1\u7968\u7b5b\u9009\u3001LLM\u5206\u6790 \u6280\u672f\u6808 : Python + FastAPI + Streamlit + Tushare + PostgreSQL \u6570\u636e\u67b6\u6784 : Tushare (\u4e3b) + PostgreSQL (\u5907) \u6df7\u5408\u67b6\u6784\uff08\u652f\u6301\u6309\u4f30\u503c\u65e5\u56de\u9000\u3001TTM\u80a1\u606f\u591a\u7ea7\u56de\u9000\uff09","title":"\u9879\u76ee\u6982\u51b5"},{"location":"01_project_overview/project_analysis_report/#2025-09","text":"\u2705 \u529f\u80fd\u5b8c\u6574\u6027\uff1a\u6838\u5fc3\u4f30\u503c\u8def\u5f84\u7a33\u5b9a\uff0c\u654f\u611f\u6027\u5206\u6790\u6269\u5c55\u5e76\u66f4\u7a33\u5065\uff08\u65b0\u589e\u8868\u4e0e\u8fb9\u754c\u5b88\u62a4\uff09\u3002 \u2705 \u7a33\u5065\u6027\uff1aWACC \u5e02\u573a\u6743\u91cd\u5931\u8d25\u81ea\u52a8\u56de\u9000\u76ee\u6807\u7ed3\u6784\uff1bPGR\u2265WACC \u7ec4\u5408\u8df3\u8fc7\u5e76\u63d0\u793a\uff1bGDP \u4e0a\u9650\u53cc\u5c42\u4fdd\u62a4\u3002 \u2705 \u53ef\u89e3\u91ca\u6027\uff1a\u65b0\u589e ev_ebitda_terminal \u3001 implied_pgr \uff0c\u5e76\u5bf9 ev_ebitda \u53e3\u5f84\uff08LTM vs Terminal\uff09\u505a\u660e\u786e\u533a\u5206\u3002 \u2705 \u6d4b\u8bd5\u8fdb\u5c55\uff1a\u65b0\u589e\u654f\u611f\u6027\u6269\u5c55\u7684\u96c6\u6210\u6d4b\u8bd5\u7528\u4f8b\u5e76\u5168\u90e8\u901a\u8fc7\uff1b\u65e7\u7528\u4f8b\u517c\u5bb9\u3002 \u26a0\ufe0f \u67b6\u6784\u590d\u6742\u5ea6\uff1a\u670d\u52a1\u5c42\u7f16\u6392\u903b\u8f91\u589e\u52a0\uff0c\u9700\u5728\u4e0b\u4e00\u6b65\u5c06\u654f\u611f\u6027/\u60c5\u666f\u6846\u67b6\u62bd\u8c61\u4e3a\u72ec\u7acb\u7ec4\u4ef6\uff0c\u964d\u4f4e\u8026\u5408\u3002 \ud83c\udd95 \u6570\u636e\u5c42\uff1a\u4f30\u503c\u65e5\u56de\u9000\u3001TTM\u80a1\u606f\u591a\u7ea7\u56de\u9000\u4e0e LTM \u57fa\u671f\u5207\u6362\u903b\u8f91\u843d\u5730\uff0c\u6570\u636e\u53ef\u7528\u6027\u63d0\u5347\u3002","title":"\u5173\u952e\u53d1\u73b0\uff082025-09 \u66f4\u65b0\uff09"},{"location":"01_project_overview/project_analysis_report/#_6","text":"\u91cd\u6784\u7d27\u8feb\u6027 : \ud83d\udd34 \u9ad8 \u4e1a\u52a1\u5f71\u54cd : \ud83d\udfe1 \u4e2d\u7b49 \u6280\u672f\u503a\u52a1 : \ud83d\udd34 \u4e25\u91cd \u7ef4\u62a4\u6210\u672c : \ud83d\udd34 \u9ad8","title":"\u91cd\u6784\u5fc5\u8981\u6027\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#_7","text":"","title":"\u8be6\u7ec6\u5206\u6790\u7ed3\u679c"},{"location":"01_project_overview/project_analysis_report/#1","text":"","title":"1. \u67b6\u6784\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#11","text":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u6df7\u5408\u67b6\u6784 \u251c\u2500\u2500 \u524d\u7aef\u5c42 (Streamlit) \u2502 \u251c\u2500\u2500 streamlit_app.py (\u4e3b\u5e94\u7528) \u2502 \u2514\u2500\u2500 stock_screener_app.py (\u7b5b\u9009\u5668) \u251c\u2500\u2500 API\u5c42 (FastAPI) \u2502 \u251c\u2500\u2500 api/main.py (API\u5165\u53e3) \u2502 \u251c\u2500\u2500 api/models.py (\u6570\u636e\u6a21\u578b) \u2502 \u2514\u2500\u2500 api/sensitivity_models.py (\u654f\u611f\u6027\u6a21\u578b) \u251c\u2500\u2500 \u4e1a\u52a1\u903b\u8f91\u5c42 \u2502 \u251c\u2500\u2500 valuation_service.py (\u4f30\u503c\u670d\u52a1\uff1a\u7edf\u4e00\u7f16\u6392\u3001\u56de\u9000\u4e0e\u5b88\u62a4) \u2502 \u251c\u2500\u2500 financial_forecaster.py (\u8d22\u52a1\u9884\u6d4b) \u2502 \u2514\u2500\u2500 sensitivity_analyzer.py / \u670d\u52a1\u5185\u5b9e\u73b0\uff08\u654f\u611f\u6027\uff1a\u6269\u5c55\u8868\u3001\u8fb9\u754c\u8df3\u8fc7\u3001\u56de\u586b\u903b\u8f91\uff09 \u251c\u2500\u2500 \u8ba1\u7b97\u5f15\u64ce\u5c42 \u2502 \u251c\u2500\u2500 wacc_calculator.py (WACC\u8ba1\u7b97) \u2502 \u251c\u2500\u2500 present_value_calculator.py (\u73b0\u503c\u8ba1\u7b97) \u2502 \u251c\u2500\u2500 terminal_value_calculator.py (\u7ec8\u503c\u8ba1\u7b97) \u2502 \u2514\u2500\u2500 equity_bridge_calculator.py (\u6743\u76ca\u6865\u63a5) \u2514\u2500\u2500 \u6df7\u5408\u6570\u636e\u5c42 \u251c\u2500\u2500 data_source_manager.py (\u6570\u636e\u6e90\u7ba1\u7406) \u251c\u2500\u2500 tushare_data_fetcher.py (Tushare\u6570\u636e\u83b7\u53d6) \u251c\u2500\u2500 postgresql_data_fetcher.py (PostgreSQL\u6570\u636e\u83b7\u53d6) \u251c\u2500\u2500 data_cache_manager.py (\u7f13\u5b58\u7ba1\u7406) \u251c\u2500\u2500 data_processor.py (\u6570\u636e\u5904\u7406) \u2514\u2500\u2500 stock_screener_data.py (\u7b5b\u9009\u6570\u636e)","title":"1.1 \u6df7\u5408\u67b6\u6784\u6982\u89c8"},{"location":"01_project_overview/project_analysis_report/#12","text":"\u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u6570\u636e\u6e90\u7ba1\u7406\u5c42 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u914d\u7f6e\u7ba1\u7406 \u2502 \u2502 \u964d\u7ea7\u7b56\u7565 \u2502 \u2502 \u2502 \u2502 (.env\u5f00\u5173\u63a7\u5236) \u2502 \u2502 (\u81ea\u52a8\u5207\u6362\u673a\u5236) \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Tushare API \u2502 \u2502 PostgreSQL \u2502 \u2502 (\u4e3b\u6570\u636e\u6e90) \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 (\u5907\u6570\u636e\u6e90) \u2502 \u2502 \u2502 \u6545\u969c\u5207\u6362 \u2502 \u2502 \u2502 \u2022 \u5b9e\u65f6\u6570\u636e \u2502 \u2502 \u2022 \u5386\u53f2\u6570\u636e \u2502 \u2502 \u2022 \u9ad8\u9891\u66f4\u65b0 \u2502 \u2502 \u2022 \u7a33\u5b9a\u53ef\u9760 \u2502 \u2502 \u2022 \u4e30\u5bcc\u5b57\u6bb5 \u2502 \u2502 \u2022 \u672c\u5730\u7f13\u5b58 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u7f13\u5b58\u7ba1\u7406\u5c42 \u2502 \u2502 \u2502 \u2502 \u2022 Redis\u7f13\u5b58 \u2502 \u2502 \u2022 \u672c\u5730\u7f13\u5b58 \u2502 \u2502 \u2022 \u667a\u80fd\u8fc7\u671f \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"1.2 \u6570\u636e\u6e90\u67b6\u6784\u8bbe\u8ba1"},{"location":"01_project_overview/project_analysis_report/#13","text":"\u5206\u5c42\u6e05\u6670 : \u524d\u7aef\u3001API\u3001\u4e1a\u52a1\u903b\u8f91\u3001\u8ba1\u7b97\u3001\u6570\u636e\u5c42\u5206\u79bb \u529f\u80fd\u6a21\u5757\u5316 : \u5404\u8ba1\u7b97\u5668\u72ec\u7acb\u5c01\u88c5 \u6280\u672f\u6808\u73b0\u4ee3 : \u4f7f\u7528FastAPI\u3001Streamlit\u7b49\u73b0\u4ee3\u6846\u67b6 \u6269\u5c55\u6027\u826f\u597d : \u652f\u6301\u591a\u79cd\u4f30\u503c\u65b9\u6cd5\u548c\u5206\u6790\u529f\u80fd \ud83c\udd95 \u6570\u636e\u53ef\u9760\u6027\uff1a\u53cc\u6570\u636e\u6e90 + \u4f30\u503c\u65e5\u56de\u9000 + \u80a1\u606fTTM\u591a\u7ea7\u56de\u9000\u3002 \ud83c\udd95 \u6027\u80fd\u4f18\u5316\uff1a\u654f\u611f\u6027\u5728\u5e38\u89c1\u89c4\u6a21\uff085\u00d75/7\u00d77\uff09\u4e0b\u7a33\u5b9a\uff1b\u540e\u7eed\u53ef\u5bf9\u4ec5\u6539WACC\u7684\u683c\u4f7f\u7528\u91cd\u6298\u73b0\u4f18\u5316\u3002 \ud83c\udd95 \u7075\u6d3b\u5207\u6362\uff1a\u901a\u8fc7 .env \u548c\u8bf7\u6c42\u53c2\u6570\u63a7\u5236 GDP \u4e0a\u9650\u4e0e LTM \u57fa\u671f\u7b49\u884c\u4e3a\u3002 \ud83c\udd95 \u6210\u672c\u63a7\u5236\uff1a\u4f18\u5148\u4f7f\u7528\u7f13\u5b58/\u5907\u6e90\uff0c\u51cf\u5c11\u9891\u7e41\u5916\u90e8\u8c03\u7528\u3002","title":"1.3 \u6df7\u5408\u67b6\u6784\u4f18\u52bf"},{"location":"01_project_overview/project_analysis_report/#14","text":"\u6a21\u5757\u8026\u5408 : \u90e8\u5206\u6a21\u5757\u95f4\u4f9d\u8d56\u5173\u7cfb\u590d\u6742 \u4ee3\u7801\u91cd\u590d : \u5b58\u5728\u91cd\u590d\u7684\u6570\u636e\u5904\u7406\u903b\u8f91 \u9519\u8bef\u5904\u7406 : \u5df2\u589e\u5f3a WACC \u4e0e PGR \u8fb9\u754c\uff1b\u4ecd\u9700\u7edf\u4e00\u5f02\u5e38\u4e0e\u544a\u8b66\u5206\u7ea7\uff08error/warn/info\uff09\u3002 \u914d\u7f6e\u7ba1\u7406 : \u9700\u8981\u7edf\u4e00\u7684\u6570\u636e\u6e90\u914d\u7f6e\u7ba1\u7406 \ud83c\udd95 \u7f13\u5b58\u7b56\u7565 : \u9700\u8981\u4f18\u5316\u7f13\u5b58\u5931\u6548\u548c\u66f4\u65b0\u7b56\u7565 \ud83c\udd95 \u76d1\u63a7\u544a\u8b66 : \u9700\u8981\u5efa\u7acb\u6570\u636e\u6e90\u72b6\u6001\u76d1\u63a7\u673a\u5236","title":"1.4 \u5f85\u4f18\u5316\u95ee\u9898"},{"location":"01_project_overview/project_analysis_report/#2","text":"","title":"2. \u4ee3\u7801\u8d28\u91cf\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#21-pylint","text":"\u603b\u4f53\u8bc4\u5206 : 3.89/10 \u26a0\ufe0f \u4e3b\u8981\u95ee\u9898\u5206\u5e03 : \u95ee\u9898\u7c7b\u578b | \u6570\u91cf | \u4e25\u91cd\u7a0b\u5ea6 ------------------------|-------|---------- \u5355\u884c\u591a\u8bed\u53e5 (C0321) | 45 | \u4e2d\u7b49 \u6355\u83b7\u8fc7\u4e8e\u5bbd\u6cdb\u5f02\u5e38 (W0718) | 23 | \u9ad8 \u5206\u652f\u8fc7\u591a (R0912) | 12 | \u9ad8 \u8bed\u53e5\u8fc7\u591a (R0915) | 8 | \u9ad8 \u91cd\u590d\u5bfc\u5165 (W0404) | 15 | \u4f4e \u5bfc\u5165\u4f4d\u7f6e\u4e0d\u6b63\u786e (C0413) | 18 | \u4e2d\u7b49 \u5bfc\u5165\u987a\u5e8f\u4e0d\u6b63\u786e (C0411) | 22 | \u4f4e \u672a\u4f7f\u7528\u5bfc\u5165 (W0611) | 31 | \u4f4e","title":"2.1 Pylint\u5206\u6790\u7ed3\u679c"},{"location":"01_project_overview/project_analysis_report/#22","text":"\u9ad8\u590d\u6742\u5ea6\u51fd\u6570 : - financial_forecaster.py::forecast_financials() - \u5faa\u73af\u590d\u6742\u5ea6: 15 - data_processor.py::process_financial_data() - \u5faa\u73af\u590d\u6742\u5ea6: 12 - streamlit_app.py::render_valuation_results() - \u5faa\u73af\u590d\u6742\u5ea6: 10 \u957f\u51fd\u6570\u95ee\u9898 : - \u5e73\u5747\u51fd\u6570\u957f\u5ea6: 45\u884c - \u8d85\u8fc7100\u884c\u7684\u51fd\u6570: 8\u4e2a - \u6700\u957f\u51fd\u6570: 180\u884c ( streamlit_app.py::main() )","title":"2.2 \u4ee3\u7801\u590d\u6742\u5ea6\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#23","text":"\u547d\u540d\u4e0d\u4e00\u81f4 : \u6df7\u7528\u9a7c\u5cf0\u548c\u4e0b\u5212\u7ebf\u547d\u540d \u6ce8\u91ca\u4e0d\u8db3 : \u5173\u952e\u4e1a\u52a1\u903b\u8f91\u7f3a\u4e4f\u6ce8\u91ca \u9b54\u6cd5\u6570\u5b57 : \u5b58\u5728\u786c\u7f16\u7801\u7684\u6570\u503c\u5e38\u91cf \u5bfc\u5165\u6df7\u4e71 : \u5bfc\u5165\u8bed\u53e5\u7ec4\u7ec7\u4e0d\u89c4\u8303","title":"2.3 \u4ee3\u7801\u98ce\u683c\u95ee\u9898"},{"location":"01_project_overview/project_analysis_report/#3","text":"","title":"3. \u529f\u80fd\u9700\u6c42\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#31","text":"\u4f30\u503c\u8ba1\u7b97\u6a21\u5757 : - \u2705 DCF\u4f30\u503c\u8ba1\u7b97 - \u2705 WACC\u8ba1\u7b97 (\u76ee\u6807\u6743\u91cd/\u5e02\u573a\u6743\u91cd) - \u2705 \u7ec8\u503c\u8ba1\u7b97 (\u6c38\u7eed\u589e\u957f/\u9000\u51fa\u500d\u6570) - \u2705 \u6743\u76ca\u4ef7\u503c\u8ba1\u7b97 - \u2705 \u654f\u611f\u6027\u5206\u6790\uff08\u65b0\u589e ev_ebitda_terminal \u3001 implied_pgr \u3001\u6309\u683c PE \u56de\u586b\uff1b\u975e\u6cd5\u7ec4\u5408\u8df3\u8fc7\uff09 \u6570\u636e\u5904\u7406\u6a21\u5757 : - \u2705 Tushare\u6570\u636e\u83b7\u53d6 (\u4e3b\u6570\u636e\u6e90) - \u2705 PostgreSQL\u6570\u636e\u83b7\u53d6 (\u5907\u6570\u636e\u6e90) - \u2705 \u667a\u80fd\u6570\u636e\u6e90\u5207\u6362\u673a\u5236 - \u2705 \u8d22\u52a1\u6570\u636e\u6e05\u6d17\u548c\u6807\u51c6\u5316 - \u2705 \u5386\u53f2\u6bd4\u7387\u8ba1\u7b97 - \u2705 \u591a\u5c42\u7ea7\u7f13\u5b58\u673a\u5236 - \ud83c\udd95 \u4f30\u503c\u57fa\u671f\uff1a\u652f\u6301 Annual/LTM \u5207\u6362\u4e0e LTM \u660e\u7ec6\u8c03\u8bd5\u5207\u7247\u3002 - \ud83c\udd95 \u6570\u636e\u6e90\u72b6\u6001\u76d1\u63a7\uff08\u89c4\u5212\u4e2d\uff09 - \ud83c\udd95 \u81ea\u52a8\u964d\u7ea7\u548c\u6062\u590d\u7b56\u7565\uff08\u89c4\u5212\u4e2d\uff09 \u524d\u7aef\u754c\u9762\u6a21\u5757 : - \u2705 Streamlit\u4e3b\u5e94\u7528\u754c\u9762 - \u4e13\u4e1a\u91d1\u878d\u6570\u636e\u53ef\u89c6\u5316\u5e73\u53f0 - \u2705 \u4ea4\u4e92\u5f0f\u53c2\u6570\u914d\u7f6e\u9762\u677f - \u652f\u6301\u5b9e\u65f6\u53c2\u6570\u8c03\u6574 - \u2705 \u52a8\u6001\u7ed3\u679c\u5c55\u793a\u754c\u9762 - \u4e30\u5bcc\u7684\u56fe\u8868\u548c\u6570\u636e\u5c55\u793a - \u2705 \u80a1\u7968\u7b5b\u9009\u5668 - \u591a\u7ef4\u5ea6\u7b5b\u9009\u548c\u6392\u5e8f\u529f\u80fd - \u2705 \u54cd\u5e94\u5f0f\u5e03\u5c40\u8bbe\u8ba1 - \u9002\u914d\u4e0d\u540c\u5c4f\u5e55\u5c3a\u5bf8 API\u670d\u52a1\u6a21\u5757 : - \u2705 RESTful API\u63a5\u53e3 - \u2705 \u8bf7\u6c42\u9a8c\u8bc1 - \u2705 \u54cd\u5e94\u683c\u5f0f\u5316 - \u2705 \u9519\u8bef\u5904\u7406 - \u2705 \u8c03\u8bd5\u5207\u7247\uff1a debug_request_slice \uff08\u542b\u884c\u4e1a\u9884\u8bbe\u4e0e\u504f\u79bb diff\uff09","title":"3.1 \u6838\u5fc3\u529f\u80fd\u6a21\u5757"},{"location":"01_project_overview/project_analysis_report/#32","text":"\u4e3b\u8981\u4e1a\u52a1\u6d41\u7a0b : 1. \u80a1\u7968\u4f30\u503c\u6d41\u7a0b : \u8f93\u5165\u80a1\u7968\u4ee3\u7801 \u2192 \u83b7\u53d6\u8d22\u52a1\u6570\u636e \u2192 \u6570\u636e\u6e05\u6d17 \u2192 \u8d22\u52a1\u9884\u6d4b \u2192 DCF\u8ba1\u7b97 \u2192 \u7ed3\u679c\u5c55\u793a \u654f\u611f\u6027\u5206\u6790\u6d41\u7a0b : \u8bbe\u7f6e\u5206\u6790\u53c2\u6570 \u2192 \u6279\u91cf\u8ba1\u7b97 \u2192 \u751f\u6210\u654f\u611f\u6027\u77e9\u9635 \u2192 \u53ef\u89c6\u5316\u5c55\u793a \u80a1\u7968\u7b5b\u9009\u6d41\u7a0b : \u8bbe\u7f6e\u7b5b\u9009\u6761\u4ef6 \u2192 \u83b7\u53d6\u5e02\u573a\u6570\u636e \u2192 \u5e94\u7528\u7b5b\u9009\u903b\u8f91 \u2192 \u7ed3\u679c\u6392\u5e8f\u5c55\u793a","title":"3.2 \u4e1a\u52a1\u6d41\u7a0b\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#33","text":"\u529f\u80fd\u5b8c\u6574\u6027 : 90% \u2705 \u6613\u7528\u6027 : 75% \ud83d\udfe1 \u6027\u80fd\u8868\u73b0 : 70% \ud83d\udfe1 \u7a33\u5b9a\u6027 : 65% \u26a0\ufe0f","title":"3.3 \u7528\u6237\u9700\u6c42\u6ee1\u8db3\u5ea6"},{"location":"01_project_overview/project_analysis_report/#4","text":"","title":"4. \u6280\u672f\u503a\u52a1\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#41","text":"\u4ee3\u7801\u503a\u52a1 (\u4e25\u91cd \ud83d\udd34): - \u4ee3\u7801\u8d28\u91cf\u4f4e\uff0c\u7ef4\u62a4\u56f0\u96be - \u51fd\u6570\u8fc7\u957f\uff0c\u903b\u8f91\u590d\u6742 - \u7f3a\u4e4f\u7edf\u4e00\u7684\u7f16\u7801\u89c4\u8303 - \u5f02\u5e38\u5904\u7406\u4e0d\u5b8c\u5584 \u67b6\u6784\u503a\u52a1 (\u4e2d\u7b49 \ud83d\udfe1): - \u6a21\u5757\u8026\u5408\u5ea6\u8f83\u9ad8 - \u7f3a\u4e4f\u6e05\u6670\u7684\u63a5\u53e3\u5b9a\u4e49 - \u914d\u7f6e\u7ba1\u7406\u5206\u6563 - \u7f3a\u4e4f\u7edf\u4e00\u7684\u65e5\u5fd7\u7cfb\u7edf - \ud83c\udd95 \u6570\u636e\u6e90\u62bd\u8c61\u5c42\u9700\u8981\u91cd\u6784 - \ud83c\udd95 \u7f13\u5b58\u7b56\u7565\u9700\u8981\u7edf\u4e00\u7ba1\u7406 - \ud83c\udd95 \u76d1\u63a7\u548c\u544a\u8b66\u673a\u5236\u5f85\u5efa\u7acb \u6d4b\u8bd5\u503a\u52a1 (\u8f7b\u5fae \ud83d\udfe2): - \u6d4b\u8bd5\u8986\u76d6\u7387\u9700\u63d0\u5347 - \u7f3a\u4e4f\u96c6\u6210\u6d4b\u8bd5 - \u6027\u80fd\u6d4b\u8bd5\u4e0d\u8db3 \u6587\u6863\u503a\u52a1 (\u4e2d\u7b49 \ud83d\udfe1): - API\u6587\u6863\u4e0d\u5b8c\u6574 - \u4e1a\u52a1\u903b\u8f91\u6587\u6863\u7f3a\u5931 - \u90e8\u7f72\u6587\u6863\u9700\u5b8c\u5584","title":"4.1 \u6280\u672f\u503a\u52a1\u5206\u7c7b"},{"location":"01_project_overview/project_analysis_report/#42","text":"\u5f00\u53d1\u6548\u7387\u5f71\u54cd : - \u65b0\u529f\u80fd\u5f00\u53d1\u901f\u5ea6: -40% - Bug\u4fee\u590d\u65f6\u95f4: +60% - \u4ee3\u7801\u5ba1\u67e5\u65f6\u95f4: +80% \u7ef4\u62a4\u6210\u672c\u5f71\u54cd : - \u65e5\u5e38\u7ef4\u62a4\u6210\u672c: +50% - \u65b0\u4eba\u4e0a\u624b\u65f6\u95f4: +100% - \u7cfb\u7edf\u7a33\u5b9a\u6027\u98ce\u9669: +70%","title":"4.2 \u503a\u52a1\u5f71\u54cd\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#5","text":"","title":"5. \u6027\u80fd\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#51","text":"API\u54cd\u5e94\u65f6\u95f4 : \u63a5\u53e3\u7c7b\u578b | \u5e73\u5747\u54cd\u5e94\u65f6\u95f4 | 95%\u5206\u4f4d\u6570 | \u76ee\u6807\u503c ------------------|-------------|-----------|-------- \u5355\u80a1\u7968\u4f30\u503c | 1.2s | 2.1s | <2s \u654f\u611f\u6027\u5206\u6790 | 3.5s | 5.8s | <5s\uff08\u5e38\u89c4 5\u00d75 \u7f51\u683c\uff1b\u542b\u8fb9\u754c\u8df3\u8fc7\uff09 \u80a1\u7968\u7b5b\u9009 | 0.8s | 1.3s | <1s \u6570\u636e\u83b7\u53d6 | 0.5s | 0.9s | <1s \u5185\u5b58\u4f7f\u7528\u60c5\u51b5 : - \u57fa\u7840\u5185\u5b58\u5360\u7528: ~150MB - \u5cf0\u503c\u5185\u5b58\u5360\u7528: ~400MB - \u5185\u5b58\u6cc4\u6f0f\u98ce\u9669: \u4f4e \u5e76\u53d1\u6027\u80fd : - \u6700\u5927\u5e76\u53d1\u7528\u6237: 20 - \u54cd\u5e94\u65f6\u95f4\u589e\u957f: \u7ebf\u6027 - \u7cfb\u7edf\u7a33\u5b9a\u6027: \u826f\u597d","title":"5.1 \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5"},{"location":"01_project_overview/project_analysis_report/#52","text":"\u8ba1\u7b97\u5bc6\u96c6\u578b\u64cd\u4f5c : - \u654f\u611f\u6027\u5206\u6790\u77e9\u9635\u8ba1\u7b97 - \u5927\u91cf\u5386\u53f2\u6570\u636e\u5904\u7406 - \u590d\u6742\u8d22\u52a1\u9884\u6d4b\u8ba1\u7b97 I/O\u5bc6\u96c6\u578b\u64cd\u4f5c : - Tushare API\u8c03\u7528 - \u6570\u636e\u5e93\u67e5\u8be2\u64cd\u4f5c - \u6587\u4ef6\u7f13\u5b58\u8bfb\u5199 \u4f18\u5316\u5efa\u8bae : - \u5b9e\u73b0\u8ba1\u7b97\u7ed3\u679c\u7f13\u5b58 - \u4f18\u5316\u6570\u636e\u5e93\u67e5\u8be2 - \u4f7f\u7528\u5f02\u6b65\u5904\u7406 - \u5b9e\u73b0\u8ba1\u7b97\u4efb\u52a1\u961f\u5217","title":"5.2 \u6027\u80fd\u74f6\u9888\u8bc6\u522b"},{"location":"01_project_overview/project_analysis_report/#6","text":"","title":"6. \u5b89\u5168\u6027\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#61","text":"\u6570\u636e\u5b89\u5168 (\u4e2d\u7b49\u98ce\u9669 \ud83d\udfe1): - API\u5bc6\u94a5\u660e\u6587\u5b58\u50a8\u98ce\u9669 - \u7528\u6237\u8f93\u5165\u9a8c\u8bc1\u4e0d\u5145\u5206 - \u654f\u611f\u6570\u636e\u65e5\u5fd7\u8bb0\u5f55 \u7cfb\u7edf\u5b89\u5168 (\u4f4e\u98ce\u9669 \ud83d\udfe2): - \u65e0\u660e\u663e\u7684\u6ce8\u5165\u653b\u51fb\u98ce\u9669 - \u8bbf\u95ee\u63a7\u5236\u57fa\u672c\u5b8c\u5584 - \u4f9d\u8d56\u5e93\u5b89\u5168\u6027\u826f\u597d \u7f51\u7edc\u5b89\u5168 (\u4f4e\u98ce\u9669 \ud83d\udfe2): - HTTPS\u901a\u4fe1 - CORS\u914d\u7f6e\u5408\u7406 - \u65e0\u660e\u663e\u7684\u7f51\u7edc\u653b\u51fb\u9762","title":"6.1 \u5b89\u5168\u98ce\u9669\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#62","text":"\u5b9e\u73b0\u73af\u5883\u53d8\u91cf\u7ba1\u7406 \u52a0\u5f3a\u8f93\u5165\u9a8c\u8bc1 \u5b9e\u73b0\u8bbf\u95ee\u65e5\u5fd7\u5ba1\u8ba1 \u5b9a\u671f\u66f4\u65b0\u4f9d\u8d56\u5e93","title":"6.2 \u5b89\u5168\u6539\u8fdb\u5efa\u8bae"},{"location":"01_project_overview/project_analysis_report/#7","text":"","title":"7. \u6d4b\u8bd5\u73b0\u72b6\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#71","text":"\u6d4b\u8bd5\u7edf\u8ba1\uff08\u66f4\u65b0\uff09 : - \u6d4b\u8bd5\u7528\u4f8b\u603b\u6570: 100+\uff08\u65b0\u589e\u654f\u611f\u6027\u6269\u5c55\u7528\u4f8b\uff09 - \u6d4b\u8bd5\u901a\u8fc7\u7387: 100% - \u4ee3\u7801\u8986\u76d6\u7387: 62%+\uff08\u5355\u6587\u4ef6\u63d0\u5347\uff09 - \u6d4b\u8bd5\u6267\u884c\u65f6\u95f4: ~50\u79d2 \u8986\u76d6\u7387\u5206\u5e03 : \u6a21\u5757\u7c7b\u578b | \u8986\u76d6\u7387 | \u6d4b\u8bd5\u7528\u4f8b\u6570 ------------------|---------|---------- \u8ba1\u7b97\u5668\u6a21\u5757 | 85% | 45 API\u63a5\u53e3 | 45% | 12 \u6570\u636e\u5904\u7406 | 70% | 25 \u4e1a\u52a1\u903b\u8f91 | 55% | 15","title":"7.1 \u6d4b\u8bd5\u8986\u76d6\u60c5\u51b5"},{"location":"01_project_overview/project_analysis_report/#72","text":"\u6d4b\u8bd5\u4f18\u52bf : - \u6838\u5fc3\u8ba1\u7b97\u903b\u8f91\u6d4b\u8bd5\u5145\u5206 - \u6d4b\u8bd5\u7528\u4f8b\u8d28\u91cf\u8f83\u9ad8 - \u6d4b\u8bd5\u6267\u884c\u7a33\u5b9a \u6d4b\u8bd5\u4e0d\u8db3 : - \u96c6\u6210\u6d4b\u8bd5\u7f3a\u5931 - API\u6d4b\u8bd5\u8986\u76d6\u4e0d\u8db3 - \u6027\u80fd\u6d4b\u8bd5\u7f3a\u5931 - E2E\u6d4b\u8bd5\u7f3a\u5931 - \u60c5\u666f\u5206\u6790\uff08\u591a\u60c5\u666f\u5408\u6210\uff09\u4ec5\u6587\u6863\u65b9\u6848\uff0c\u5f85\u5b9e\u73b0\u4e0e\u6d4b\u8bd5","title":"7.2 \u6d4b\u8bd5\u8d28\u91cf\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#8","text":"","title":"8. \u4f9d\u8d56\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#81","text":"Python\u4f9d\u8d56 : \u4f9d\u8d56\u5e93 | \u7248\u672c | \u7528\u9014 | \u98ce\u9669\u8bc4\u4f30 -----------------|---------|----------------|---------- fastapi | 0.104.1 | Web\u6846\u67b6 | \u4f4e streamlit | 1.28.1 | \u524d\u7aef\u754c\u9762 | \u4f4e tushare | 1.2.89 | \u6570\u636e\u6e90 | \u4e2d pandas | 2.1.3 | \u6570\u636e\u5904\u7406 | \u4f4e numpy | 1.25.2 | \u6570\u503c\u8ba1\u7b97 | \u4f4e scipy | 1.11.4 | \u79d1\u5b66\u8ba1\u7b97 | \u4f4e plotly | 5.17.0 | \u6570\u636e\u53ef\u89c6\u5316 | \u4f4e \u7cfb\u7edf\u4f9d\u8d56 : - Python 3.9+ - \u64cd\u4f5c\u7cfb\u7edf: \u8de8\u5e73\u53f0\u652f\u6301 - \u5185\u5b58\u8981\u6c42: \u6700\u5c0f512MB - \u7f51\u7edc\u8981\u6c42: \u7a33\u5b9a\u7684\u4e92\u8054\u7f51\u8fde\u63a5","title":"8.1 \u6838\u5fc3\u4f9d\u8d56"},{"location":"01_project_overview/project_analysis_report/#82","text":"\u9ad8\u98ce\u9669\u4f9d\u8d56 : - Tushare: \u7b2c\u4e09\u65b9\u4ed8\u8d39\u6570\u636e\u6e90\uff0c\u5b58\u5728API\u9650\u6d41\u548c\u670d\u52a1\u4e2d\u65ad\u98ce\u9669 \u4e2d\u98ce\u9669\u4f9d\u8d56 : - PostgreSQL: \u6570\u636e\u5e93\u8fde\u63a5\u7a33\u5b9a\u6027\u4f9d\u8d56 - Redis: \u7f13\u5b58\u670d\u52a1\u53ef\u7528\u6027\u4f9d\u8d56 - \ud83c\udd95 \u6570\u636e\u6e90\u540c\u6b65\u673a\u5236: \u53cc\u6570\u636e\u6e90\u4e00\u81f4\u6027\u7ef4\u62a4\u590d\u6742\u5ea6 \u4f4e\u98ce\u9669\u4f9d\u8d56 : - \u5176\u4ed6\u6240\u6709\u4f9d\u8d56\u5e93\u5747\u4e3a\u6210\u719f\u7a33\u5b9a\u7684\u5f00\u6e90\u9879\u76ee","title":"8.2 \u4f9d\u8d56\u98ce\u9669\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#9","text":"","title":"9. \u53ef\u7ef4\u62a4\u6027\u5206\u6790"},{"location":"01_project_overview/project_analysis_report/#91","text":"Streamlit\u6846\u67b6\u4f18\u52bf : 8/10 \ud83d\udfe2 - \u4e13\u4e1a\u7684\u91d1\u878d\u6570\u636e\u53ef\u89c6\u5316\u7ec4\u4ef6\u5e93 - \u539f\u751f\u652f\u6301\u5b9e\u65f6\u6570\u636e\u66f4\u65b0\u548c\u4ea4\u4e92 - \u4e30\u5bcc\u7684\u56fe\u8868\u7c7b\u578b\u548c\u81ea\u5b9a\u4e49\u9009\u9879 - \u54cd\u5e94\u5f0f\u5e03\u5c40\u548c\u73b0\u4ee3\u5316UI\u8bbe\u8ba1 \u7ec4\u4ef6\u5316\u7a0b\u5ea6 : 7/10 \ud83d\udfe1 - \u4e3b\u8981\u754c\u9762\u7ec4\u4ef6\u5df2\u6a21\u5757\u5316 - \u53ef\u590d\u7528\u7ec4\u4ef6\u9700\u8981\u8fdb\u4e00\u6b65\u62bd\u8c61 - \u72b6\u6001\u7ba1\u7406\u9700\u8981\u4f18\u5316 \u7528\u6237\u4f53\u9a8c : 8/10 \ud83d\udfe2 - \u76f4\u89c2\u7684\u53c2\u6570\u914d\u7f6e\u754c\u9762 - \u5b9e\u65f6\u7684\u8ba1\u7b97\u7ed3\u679c\u5c55\u793a - \u4e13\u4e1a\u7684\u91d1\u878d\u56fe\u8868\u53ef\u89c6\u5316 - \u6d41\u7545\u7684\u4ea4\u4e92\u54cd\u5e94","title":"9.1 \u524d\u7aef\u754c\u9762\u67b6\u6784"},{"location":"01_project_overview/project_analysis_report/#92","text":"\u4ee3\u7801\u53ef\u8bfb\u6027 : 6/10 \ud83d\udfe1 - \u51fd\u6570\u547d\u540d\u57fa\u672c\u6e05\u6670 - \u6ce8\u91ca\u8986\u76d6\u7387\u4e0d\u8db3 - \u4ee3\u7801\u7ed3\u6784\u9700\u8981\u4f18\u5316 \u6a21\u5757\u5316\u7a0b\u5ea6 : 7/10 \ud83d\udfe2 - \u529f\u80fd\u6a21\u5757\u5212\u5206\u5408\u7406 - \u63a5\u53e3\u5b9a\u4e49\u57fa\u672c\u6e05\u6670 - \u4f9d\u8d56\u5173\u7cfb\u53ef\u4ee5\u4f18\u5316 \u6269\u5c55\u6027 : 8/10 \ud83d\udfe2 - \u67b6\u6784\u652f\u6301\u529f\u80fd\u6269\u5c55 - \u65b0\u589e\u8ba1\u7b97\u5668\u5bb9\u6613 - \u6570\u636e\u6e90\u53ef\u4ee5\u6269\u5c55 \u6d4b\u8bd5\u53cb\u597d\u6027 : 7/10 \ud83d\udfe2 - \u6838\u5fc3\u903b\u8f91\u6613\u4e8e\u6d4b\u8bd5 - \u4f9d\u8d56\u6ce8\u5165\u9700\u8981\u6539\u8fdb - Mock\u652f\u6301\u9700\u8981\u52a0\u5f3a","title":"9.2 \u7ef4\u62a4\u6027\u6307\u6807"},{"location":"01_project_overview/project_analysis_report/#92_1","text":"\u5f53\u524d\u7ef4\u62a4\u6210\u672c : \u9ad8 \ud83d\udd34 - \u4ee3\u7801\u8d28\u91cf\u95ee\u9898\u5bfc\u81f4\u7ef4\u62a4\u56f0\u96be - \u7f3a\u4e4f\u5b8c\u5584\u7684\u6587\u6863 - \u65b0\u4eba\u4e0a\u624b\u6210\u672c\u9ad8 \u91cd\u6784\u540e\u9884\u671f : \u4e2d\u7b49 \ud83d\udfe1 - \u4ee3\u7801\u8d28\u91cf\u663e\u8457\u63d0\u5347 - \u6587\u6863\u5b8c\u5584 - \u7ef4\u62a4\u6548\u7387\u63d0\u9ad860%","title":"9.2 \u7ef4\u62a4\u6210\u672c\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#10","text":"","title":"10. \u4e1a\u52a1\u4ef7\u503c\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#101","text":"\u6838\u5fc3\u4ef7\u503c (\u9ad8 \ud83d\udfe2): - \u63d0\u4f9b\u4e13\u4e1a\u7684DCF\u4f30\u503c\u8ba1\u7b97 - \u652f\u6301\u591a\u7ef4\u5ea6\u654f\u611f\u6027\u5206\u6790 - \u5b9e\u73b0\u81ea\u52a8\u5316\u80a1\u7968\u7b5b\u9009 \u7528\u6237\u4ef7\u503c (\u9ad8 \ud83d\udfe2): - \u7b80\u5316\u590d\u6742\u7684\u4f30\u503c\u8ba1\u7b97\u8fc7\u7a0b - \u63d0\u4f9b\u76f4\u89c2\u7684\u7ed3\u679c\u5c55\u793a - \u652f\u6301\u6279\u91cf\u5206\u6790\u5904\u7406 \u5546\u4e1a\u4ef7\u503c (\u4e2d\u7b49 \ud83d\udfe1): - \u53ef\u4f5c\u4e3a\u6295\u8d44\u51b3\u7b56\u8f85\u52a9\u5de5\u5177 - \u5177\u5907\u5546\u4e1a\u5316\u6f5c\u529b - \u53ef\u6269\u5c55\u4e3aSaaS\u670d\u52a1","title":"10.1 \u529f\u80fd\u4ef7\u503c"},{"location":"01_project_overview/project_analysis_report/#102","text":"\u6280\u672f\u4f18\u52bf : - \u8ba1\u7b97\u903b\u8f91\u4e13\u4e1a\u51c6\u786e - \u754c\u9762\u53cb\u597d\u6613\u7528 - \u652f\u6301\u591a\u79cd\u4f30\u503c\u65b9\u6cd5 \u6570\u636e\u4f18\u52bf : - \u96c6\u6210Tushare\u6570\u636e\u6e90 - \u5b9e\u65f6\u6570\u636e\u66f4\u65b0 - \u5386\u53f2\u6570\u636e\u5206\u6790 \u529f\u80fd\u4f18\u52bf : - \u654f\u611f\u6027\u5206\u6790\u529f\u80fd\u5b8c\u5584 - \u652f\u6301\u6279\u91cf\u5904\u7406 - \u7ed3\u679c\u53ef\u89c6\u5316\u6548\u679c\u597d","title":"10.2 \u7ade\u4e89\u4f18\u52bf"},{"location":"01_project_overview/project_analysis_report/#_8","text":"","title":"\u91cd\u6784\u5efa\u8bae"},{"location":"01_project_overview/project_analysis_report/#1_1","text":"\u7b2c\u4e00\u4f18\u5148\u7ea7 (\u7acb\u5373\u6267\u884c): - \ud83c\udd95 \u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784\u5b9e\u73b0 - \ud83c\udd95 \u6570\u636e\u6e90\u7ba1\u7406\u5668\u5f00\u53d1 - \ud83c\udd95 \u7f13\u5b58\u673a\u5236\u4f18\u5316 - \u4ee3\u7801\u8d28\u91cf\u6539\u8fdb - \u9519\u8bef\u5904\u7406\u6807\u51c6\u5316 - \u6d4b\u8bd5\u8986\u76d6\u7387\u63d0\u5347 \u7b2c\u4e8c\u4f18\u5148\u7ea7 (\u8fd1\u671f\u6267\u884c): - \ud83c\udd95 \u6570\u636e\u6e90\u76d1\u63a7\u548c\u544a\u8b66\u7cfb\u7edf - \ud83c\udd95 \u81ea\u52a8\u964d\u7ea7\u548c\u6062\u590d\u673a\u5236 - \u67b6\u6784\u4f18\u5316\u91cd\u6784 - \u6027\u80fd\u4f18\u5316 - \u6587\u6863\u5b8c\u5584 \u7b2c\u4e09\u4f18\u5148\u7ea7 (\u957f\u671f\u89c4\u5212): - \ud83c\udd95 \u6570\u636e\u6e90\u6269\u5c55\u80fd\u529b - \ud83c\udd95 \u667a\u80fd\u7f13\u5b58\u7b56\u7565\u4f18\u5316 - \u529f\u80fd\u6269\u5c55 - \u7528\u6237\u4f53\u9a8c\u4f18\u5316 - \u5546\u4e1a\u5316\u51c6\u5907","title":"1. \u91cd\u6784\u4f18\u5148\u7ea7"},{"location":"01_project_overview/project_analysis_report/#2_1","text":"\u6e10\u8fdb\u5f0f\u91cd\u6784 : - \u4fdd\u6301\u7cfb\u7edf\u529f\u80fd\u6b63\u5e38\u8fd0\u884c - \u5206\u6a21\u5757\u9010\u6b65\u91cd\u6784 - \u6bcf\u4e2a\u9636\u6bb5\u90fd\u6709\u53ef\u4ea4\u4ed8\u6210\u679c \u8d28\u91cf\u4f18\u5148 : - \u4ee3\u7801\u8d28\u91cf\u662f\u91cd\u6784\u7684\u6838\u5fc3\u76ee\u6807 - \u5efa\u7acb\u5b8c\u5584\u7684\u8d28\u91cf\u4fdd\u8bc1\u4f53\u7cfb - \u6301\u7eed\u76d1\u63a7\u548c\u6539\u8fdb \u6d4b\u8bd5\u9a71\u52a8 : - \u91cd\u6784\u524d\u8865\u5145\u6d4b\u8bd5\u7528\u4f8b - \u786e\u4fdd\u91cd\u6784\u4e0d\u7834\u574f\u73b0\u6709\u529f\u80fd - \u5efa\u7acb\u56de\u5f52\u6d4b\u8bd5\u673a\u5236","title":"2. \u91cd\u6784\u7b56\u7565"},{"location":"01_project_overview/project_analysis_report/#3_1","text":"\u77ed\u671f\u6536\u76ca (1-3\u4e2a\u6708): - \ud83c\udd95 \u6570\u636e\u53ef\u9760\u6027\u63d0\u534790% (\u53cc\u6570\u636e\u6e90\u4fdd\u969c) - \ud83c\udd95 API\u8c03\u7528\u6210\u672c\u964d\u4f4e60% (\u667a\u80fd\u7f13\u5b58) - \u4ee3\u7801\u8d28\u91cf\u663e\u8457\u63d0\u5347 - \u5f00\u53d1\u6548\u7387\u63d0\u9ad830% - Bug\u6570\u91cf\u51cf\u5c1150% \u4e2d\u671f\u6536\u76ca (3-6\u4e2a\u6708): - \ud83c\udd95 \u6570\u636e\u8bbf\u95ee\u901f\u5ea6\u63d0\u534770% (\u7f13\u5b58\u4f18\u5316) - \ud83c\udd95 \u7cfb\u7edf\u53ef\u7528\u6027\u8fbe\u523099.5% (\u81ea\u52a8\u964d\u7ea7) - \u7cfb\u7edf\u6027\u80fd\u63d0\u534740% - \u7ef4\u62a4\u6210\u672c\u964d\u4f4e60% - \u65b0\u529f\u80fd\u5f00\u53d1\u901f\u5ea6\u63d0\u534750% \u957f\u671f\u6536\u76ca (6-12\u4e2a\u6708): - \ud83c\udd95 \u652f\u6301\u591a\u6570\u636e\u6e90\u6269\u5c55\u80fd\u529b - \ud83c\udd95 \u667a\u80fd\u6570\u636e\u6e90\u9009\u62e9\u548c\u4f18\u5316 - \u7cfb\u7edf\u7a33\u5b9a\u6027\u5927\u5e45\u63d0\u5347 - \u652f\u6301\u66f4\u5927\u89c4\u6a21\u7528\u6237 - \u5177\u5907\u5546\u4e1a\u5316\u80fd\u529b","title":"3. \u9884\u671f\u6536\u76ca"},{"location":"01_project_overview/project_analysis_report/#_9","text":"","title":"\u98ce\u9669\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#1_2","text":"\u91cd\u6784\u98ce\u9669 (\u4e2d\u7b49 \ud83d\udfe1): - \u91cd\u6784\u8fc7\u7a0b\u53ef\u80fd\u5f15\u5165\u65b0bug - \u529f\u80fd\u56de\u5f52\u98ce\u9669 - \u6027\u80fd\u4e0b\u964d\u98ce\u9669 \u4f9d\u8d56\u98ce\u9669 (\u4e2d\u7b49 \ud83d\udfe1): - \u7b2c\u4e09\u65b9\u5e93\u66f4\u65b0\u98ce\u9669 - Tushare API\u53d8\u66f4\u548c\u9650\u6d41\u98ce\u9669 - PostgreSQL\u6570\u636e\u6e90\u7a33\u5b9a\u6027\u98ce\u9669 - \ud83c\udd95 \u53cc\u6570\u636e\u6e90\u540c\u6b65\u4e00\u81f4\u6027\u98ce\u9669 - \ud83c\udd95 \u7f13\u5b58\u6570\u636e\u8fc7\u671f\u98ce\u9669 \u6280\u672f\u9009\u578b\u98ce\u9669 (\u4f4e \ud83d\udfe2): - \u73b0\u6709\u6280\u672f\u6808\u6210\u719f\u7a33\u5b9a - \u793e\u533a\u652f\u6301\u826f\u597d - \u5b66\u4e60\u6210\u672c\u53ef\u63a7","title":"1. \u6280\u672f\u98ce\u9669"},{"location":"01_project_overview/project_analysis_report/#2_2","text":"\u7528\u6237\u4f53\u9a8c\u98ce\u9669 (\u4f4e \ud83d\udfe2): - \u91cd\u6784\u671f\u95f4\u529f\u80fd\u53ef\u80fd\u6682\u65f6\u4e0d\u53ef\u7528 - \u754c\u9762\u53d8\u5316\u53ef\u80fd\u5f71\u54cd\u7528\u6237\u4e60\u60ef \u6570\u636e\u98ce\u9669 (\u4e2d\u7b49 \ud83d\udfe1): - \u6570\u636e\u8fc1\u79fb\u98ce\u9669 - \u5386\u53f2\u6570\u636e\u517c\u5bb9\u6027 - \u8ba1\u7b97\u7ed3\u679c\u4e00\u81f4\u6027","title":"2. \u4e1a\u52a1\u98ce\u9669"},{"location":"01_project_overview/project_analysis_report/#3_2","text":"\u65f6\u95f4\u98ce\u9669 (\u4e2d\u7b49 \ud83d\udfe1): - \u91cd\u6784\u65f6\u95f4\u53ef\u80fd\u8d85\u51fa\u9884\u671f - \u8d44\u6e90\u6295\u5165\u53ef\u80fd\u4e0d\u8db3 \u4eba\u5458\u98ce\u9669 (\u4f4e \ud83d\udfe2): - \u6280\u672f\u56e2\u961f\u80fd\u529b\u5339\u914d - \u77e5\u8bc6\u4f20\u627f\u98ce\u9669\u53ef\u63a7","title":"3. \u9879\u76ee\u98ce\u9669"},{"location":"01_project_overview/project_analysis_report/#_10","text":"","title":"\u7ed3\u8bba\u4e0e\u5efa\u8bae"},{"location":"01_project_overview/project_analysis_report/#1_3","text":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u662f\u4e00\u4e2a \u529f\u80fd\u5b8c\u6574\u3001\u5177\u6709\u5546\u4e1a\u4ef7\u503c \u7684\u9879\u76ee\uff0c\u901a\u8fc7\u91c7\u7528 Tushare + PostgreSQL\u6df7\u5408\u67b6\u6784 \uff0c\u663e\u8457\u63d0\u5347\u4e86\u6570\u636e\u53ef\u9760\u6027\u548c\u7cfb\u7edf\u7a33\u5b9a\u6027\u3002\u867d\u7136\u4ecd\u5b58\u5728 \u4ee3\u7801\u8d28\u91cf\u95ee\u9898 \u548c \u6280\u672f\u503a\u52a1 \uff0c\u4f46\u6df7\u5408\u67b6\u6784\u7684\u5f15\u5165\u4e3a\u7cfb\u7edf\u5e26\u6765\u4e86\u65b0\u7684\u4f18\u52bf\u3002\u7cfb\u7edf\u7684\u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\u6b63\u786e\uff0c\u6d4b\u8bd5\u8986\u76d6\u57fa\u672c\u5145\u5206\uff0c\u9700\u8981\u8fdb\u884c \u7cfb\u7edf\u6027\u91cd\u6784\u548c\u67b6\u6784\u4f18\u5316 \u3002","title":"1. \u603b\u4f53\u8bc4\u4f30"},{"location":"01_project_overview/project_analysis_report/#2_3","text":"\u5efa\u8bae\u6301\u7eed\u91cd\u6784\u4e0e\u67b6\u6784\u5347\u7ea7 \uff0c\u7406\u7531\u5982\u4e0b\uff1a - \ud83c\udd95 \u6df7\u5408\u67b6\u6784\u4e0e\u670d\u52a1\u5c42\u5b88\u62a4\u5df2\u5e26\u6765\u7a33\u5b9a\u6027\u63d0\u5347\uff1b\u7ee7\u7eed\u89e3\u8026\u654f\u611f\u6027/\u60c5\u666f\u6a21\u5757\u53ef\u8fdb\u4e00\u6b65\u964d\u4f4e\u8026\u5408\u3002 - \ud83c\udd95 \u6570\u636e\u6e90\u4e0e\u4f30\u503c\u57fa\u671f\u7b56\u7565\u66f4\u7075\u6d3b\uff1b\u9700\u5f15\u5165\u7edf\u4e00\u5f02\u5e38/\u544a\u8b66\u89c4\u8303\u4e0e\u53ef\u89c2\u6d4b\u6027\u3002 - \u4ee3\u7801\u8d28\u91cf\u95ee\u9898\u4ecd\u5f71\u54cd\u6548\u7387\uff1b\u5efa\u8bae\u63a8\u8fdb\u6a21\u5757\u5316\u4e0e\u7c7b\u578b\u7ea6\u675f\uff0c\u8865\u9f50\u6027\u80fd/\u96c6\u6210\u6d4b\u8bd5\u3002","title":"2. \u91cd\u6784\u5fc5\u8981\u6027"},{"location":"01_project_overview/project_analysis_report/#3_3","text":"\u7acb\u5373\u884c\u52a8 : 1. \ud83c\udd95 \u5b9e\u65bd\u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784 2. \ud83c\udd95 \u5f00\u53d1\u6570\u636e\u6e90\u7ba1\u7406\u548c\u7f13\u5b58\u7cfb\u7edf 3. \u542f\u52a8\u4ee3\u7801\u8d28\u91cf\u6539\u8fdb\u8ba1\u5212 4. \u5efa\u7acb\u4ee3\u7801\u89c4\u8303\u548c\u8d28\u91cf\u68c0\u67e5\u6d41\u7a0b 5. \u8865\u5145\u5173\u952e\u6a21\u5757\u7684\u6d4b\u8bd5\u7528\u4f8b \u8fd1\u671f\u89c4\u5212 : 1. \ud83c\udd95 \u5efa\u7acb\u6570\u636e\u6e90\u76d1\u63a7\u548c\u544a\u8b66\u673a\u5236 2. \ud83c\udd95 \u5b9e\u73b0\u81ea\u52a8\u964d\u7ea7\u548c\u6062\u590d\u7b56\u7565 3. \u6267\u884c\u5206\u9636\u6bb5\u91cd\u6784\u8ba1\u5212 4. \u4f18\u5316\u7cfb\u7edf\u67b6\u6784\u548c\u6027\u80fd 5. \u5b8c\u5584\u6587\u6863\u548c\u90e8\u7f72\u6d41\u7a0b \u957f\u671f\u76ee\u6807 : 1. \ud83c\udd95 \u6784\u5efa\u667a\u80fd\u6570\u636e\u6e90\u9009\u62e9\u548c\u4f18\u5316\u80fd\u529b 2. \ud83c\udd95 \u652f\u6301\u66f4\u591a\u6570\u636e\u6e90\u7684\u6269\u5c55 3. \u5efa\u7acb\u53ef\u6301\u7eed\u7684\u5f00\u53d1\u548c\u7ef4\u62a4\u4f53\u7cfb 4. \u6269\u5c55\u7cfb\u7edf\u529f\u80fd\u548c\u7528\u6237\u89c4\u6a21 5. \u63a2\u7d22\u5546\u4e1a\u5316\u673a\u4f1a","title":"3. \u5b9e\u65bd\u5efa\u8bae"},{"location":"01_project_overview/project_analysis_report/#4_1","text":"\u7ba1\u7406\u5c42\u652f\u6301 : \u786e\u4fdd\u5145\u8db3\u7684\u8d44\u6e90\u6295\u5165 \u56e2\u961f\u534f\u4f5c : \u5efa\u7acb\u826f\u597d\u7684\u534f\u4f5c\u673a\u5236 \u8d28\u91cf\u4fdd\u8bc1 : \u5efa\u7acb\u4e25\u683c\u7684\u8d28\u91cf\u6807\u51c6 \u6301\u7eed\u6539\u8fdb : \u5efa\u7acb\u6301\u7eed\u4f18\u5316\u7684\u6587\u5316 \u901a\u8fc7\u6df7\u5408\u67b6\u6784\u5347\u7ea7\u548c\u7cfb\u7edf\u6027\u91cd\u6784\uff0c\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u5c06\u6210\u4e3a\u4e00\u4e2a \u9ad8\u8d28\u91cf\u3001\u9ad8\u6027\u80fd\u3001\u9ad8\u53ef\u9760\u6027\u3001\u6613\u7ef4\u62a4 \u7684\u4e13\u4e1a\u91d1\u878d\u5206\u6790\u5de5\u5177\uff0c\u5177\u5907 \u5f3a\u5927\u7684\u6570\u636e\u5904\u7406\u80fd\u529b \u548c \u957f\u671f\u53d1\u5c55\u548c\u5546\u4e1a\u5316 \u7684\u6f5c\u529b\u3002 \u62a5\u544a\u751f\u6210\u65f6\u95f4 : 2025\u5e741\u6708 \u5206\u6790\u5de5\u5177 : Pylint, pytest, \u4eba\u5de5\u4ee3\u7801\u5ba1\u67e5 \u62a5\u544a\u7248\u672c : v1.0 \u4e0b\u6b21\u8bc4\u4f30\u5efa\u8bae : \u91cd\u6784\u5b8c\u6210\u540e3\u4e2a\u6708","title":"4. \u6210\u529f\u5173\u952e\u56e0\u7d20"},{"location":"01_project_overview/project_status_2025_09_latest/","text":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u9879\u76ee\u72b6\u6001\u62a5\u544a \u6700\u540e\u66f4\u65b0: 2025-09-26 \u6267\u884c\u6458\u8981 \u672c\u9879\u76ee\u662f\u4e00\u4e2a\u57fa\u4e8eDCF\u6a21\u578b\u7684\u4e13\u4e1a\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\uff0c\u5f53\u524d\u5df2\u5b8c\u6210\u4eceProof of Concept\u5230Production Ready\u7684\u8f6c\u6362\u3002\u7cfb\u7edf\u5b9e\u73b0\u4e86\u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784\uff08TuShare + PostgreSQL\uff09\uff0c\u5177\u5907\u5b8c\u6574\u7684\u4f30\u503c\u94fe\u8def\u3001LLM\u667a\u80fd\u5206\u6790\u3001\u654f\u611f\u6027\u5206\u6790\u3001\u80a1\u7968\u7b5b\u9009\u7b49\u529f\u80fd\u3002 \u5f53\u524d\u7248\u672c : v3.0.0 (feature/user-auth\u5206\u652f) \u6838\u5fc3\u6280\u672f\u6808 : Python 3.9+, FastAPI, Streamlit, PostgreSQL, TuShare API \u67b6\u6784\u6a21\u5f0f : \u6df7\u5408\u6570\u636e\u6e90 + \u6a21\u5757\u5316DCF\u8ba1\u7b97 + LLM\u667a\u80fd\u5206\u6790 \u90e8\u7f72\u72b6\u6001 : \u5f00\u53d1\u73af\u5883\u8fd0\u884c(Streamlit\u7aef\u53e38501)\uff0c\u751f\u4ea7\u5c31\u7eea \u5173\u952e\u6210\u5c31 \u2705 \u751f\u4ea7\u7ea7\u6570\u636e\u6e90 : TuShare\u63a5\u53e3\u5b8c\u5168\u5bf9\u9f50PostgreSQL\u6807\u51c6\uff0c\u652f\u6301\u6570\u636e\u6e90\u70ed\u5207\u6362 \u2705 \u6a21\u5757\u5316DCF\u5f15\u64ce : 6\u4e2a\u72ec\u7acb\u8ba1\u7b97\u5668\uff0c\u8986\u76d6\u4eceNWC\u5230\u80a1\u6743\u4ef7\u503c\u7684\u5b8c\u6574\u94fe\u8def \u2705 Streamlit\u524d\u7aef\u67b6\u6784 : \u57fa\u4e8eStreamlit\u7684\u73b0\u4ee3\u5316Web\u754c\u9762\uff0c\u652f\u6301\u7528\u6237\u53cb\u597d\u64cd\u4f5c \u2705 \u7528\u6237\u8ba4\u8bc1\u7cfb\u7edf : \u5b8c\u6574\u7684\u7528\u6237\u6ce8\u518c/\u767b\u5f55/\u4f1a\u8bdd\u7ba1\u7406\uff0c\u6570\u636e\u5e93\u4eceSQLite\u8fc1\u79fb\u81f3Postgres/Supabase \u2705 \u667a\u80fd\u7f13\u5b58\u7cfb\u7edf : \u4f30\u503c\u7ed3\u679c\u7f13\u5b58\u4e0e\u4f1a\u8bdd\u6062\u590d\uff0c\u5927\u5e45\u63d0\u5347\u7528\u6237\u4f53\u9a8c\u548c\u7cfb\u7edf\u6027\u80fd \u2705 LLM\u96c6\u6210 : \u652f\u6301DeepSeek/OpenAI\u517c\u5bb9API\uff0c\u751f\u6210\u6295\u8d44\u5206\u6790\u62a5\u544a \u2705 \u654f\u611f\u6027\u5206\u6790 : \u591a\u7ef4\u5ea6\u4f30\u503csensitivity table\uff0c\u652f\u6301\u7ec8\u503c\u6cd5/\u6c38\u7eed\u589e\u957f\u6cd5 \u2705 \u80a1\u7968\u7b5b\u9009\u5668 : \u57fa\u4e8e\u8d22\u52a1\u6307\u6807\u7684\u591a\u6761\u4ef6\u7b5b\u9009 \u2705 LTM\u57fa\u7ebf : \u652f\u6301Last Twelve Months\u6536\u5165\u57fa\u671f\uff0c\u63d0\u5347\u65f6\u6548\u6027 \u5f53\u524d\u67b6\u6784\u6982\u89c8 \u7cfb\u7edf\u67b6\u6784\uff082025-09\u7248\u672c\uff09 \u524d\u7aef\u5c42 (Streamlit) \u2514\u2500\u2500 Streamlit: frontend-streamlit/streamlit_app.py API\u670d\u52a1\u5c42 \u2514\u2500\u2500 FastAPI: src/api/main.py (\u7aef\u53e38124) \u251c\u2500\u2500 \u4f30\u503c\u63a5\u53e3: /api/v1/valuation \u251c\u2500\u2500 \u654f\u611f\u6027\u5206\u6790: /api/v1/sensitivity \u2514\u2500\u2500 \u80a1\u7968\u7b5b\u9009: /api/v1/screener \u4e1a\u52a1\u903b\u8f91\u5c42 \u251c\u2500\u2500 \u6838\u5fc3\u8ba1\u7b97\u5f15\u64ce: src/core/ \u2502 \u251c\u2500\u2500 calculators/dcf/: DCF\u8ba1\u7b97\u5668\u96c6\u7fa4(6\u4e2a\u6a21\u5757) \u2502 \u251c\u2500\u2500 financial/: \u8d22\u52a1\u9884\u6d4b\u4e0e\u5904\u7406\u5f15\u64ce \u2502 \u2514\u2500\u2500 screener/: \u80a1\u7968\u7b5b\u9009\u5668 \u251c\u2500\u2500 \u6570\u636e\u670d\u52a1: src/data/ \u2502 \u251c\u2500\u2500 fetchers/: \u6570\u636e\u83b7\u53d6\u5668(TuShare/PostgreSQL) \u2502 \u2514\u2500\u2500 processors/: \u6570\u636e\u6e05\u6d17\u4e0e\u5904\u7406 \u2514\u2500\u2500 \u4e1a\u52a1\u670d\u52a1: src/services/valuation_service.py \u6570\u636e\u5c42 \u251c\u2500\u2500 TuShare API: \u5b9e\u65f6\u91d1\u878d\u6570\u636e(\u4e3b\u8981) \u251c\u2500\u2500 PostgreSQL: \u5386\u53f2\u6570\u636e\u5b58\u50a8/\u6821\u9a8c\u57fa\u51c6 \u2514\u2500\u2500 Redis: \u7f13\u5b58\u5c42(\u914d\u7f6e\u9879) \u6838\u5fc3\u6a21\u5757\u7edf\u8ba1 \u6e90\u4ee3\u7801\u6587\u4ef6 : 34\u4e2aPython\u6a21\u5757 \u6d4b\u8bd5\u6587\u4ef6 : 27\u4e2a\u6d4b\u8bd5\u6a21\u5757 \u524d\u7aef\u6587\u4ef6 : 17\u4e2a\u524d\u7aef\u7ec4\u4ef6 \u914d\u7f6e\u6587\u4ef6 : \u652f\u6301uv/pip\u53cc\u5305\u7ba1\u7406\uff0cpre-commit\u4ee3\u7801\u8d28\u91cf\u4fdd\u969c \u4e3b\u8981\u529f\u80fd\u6a21\u5757 1. \u7528\u6237\u8ba4\u8bc1\u4e0e\u4f1a\u8bdd\u7ba1\u7406 \u4f4d\u7f6e : src/auth/ , frontend-streamlit/auth/ \u529f\u80fd\u7279\u6027 : - \u5b8c\u6574\u7684\u7528\u6237\u6ce8\u518c\u3001\u767b\u5f55\u3001\u4f1a\u8bdd\u7ba1\u7406\u7cfb\u7edf - \u6570\u636e\u5e93\u67b6\u6784\u8fc1\u79fb\uff1aSQLite \u2192 PostgreSQL/Supabase\uff0c\u652f\u6301\u9ad8\u5e76\u53d1\u548c\u4e91\u539f\u751f\u90e8\u7f72 - \u4f1a\u8bdd\u6301\u4e45\u5316\uff1a\u7528\u6237\u767b\u5f55\u72b6\u6001\u548c\u4f30\u503c\u7ed3\u679c\u7f13\u5b58\uff0c\u63d0\u5347\u7528\u6237\u4f53\u9a8c - \u8ba4\u8bc1\u4e2d\u95f4\u4ef6\uff1a\u4fdd\u62a4\u654f\u611f\u529f\u80fd\u548c\u6570\u636e\u8bbf\u95ee - \u5b89\u5168\u7279\u6027\uff1a\u5bc6\u7801\u54c8\u5e0c\u3001\u4f1a\u8bdd\u4ee4\u724c\u3001\u9632CSRF\u7b49 \u5173\u952e\u6539\u8fdb (2025-09): - \u89e3\u51b3SQLite\u5e76\u53d1\u9501\u95ee\u9898\uff0c\u8fc1\u79fb\u81f3\u6210\u719f\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93 - \u667a\u80fd\u7f13\u5b58\u673a\u5236\uff0c\u4f30\u503c\u7ed3\u679c\u5728\u4f1a\u8bdd\u95f4\u6301\u4e45\u4fdd\u5b58 - \u4f18\u5316\u7528\u6237\u754c\u9762\uff0c\u7b80\u5316\u8ba4\u8bc1\u6d41\u7a0b 2. \u6570\u636e\u83b7\u53d6\u4e0e\u5904\u7406 \u4f4d\u7f6e : src/data/fetchers/ , src/core/financial/processor.py \u529f\u80fd\u7279\u6027 : - \u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784: DATA_SOURCE=tushare/postgres/hybrid - TuShare\u5e74\u62a5\u4e25\u683c\u7b5b\u9009: end_type='4' , update_flag='1' \u4f18\u5148 - \u5b57\u6bb5\u6620\u5c04\u7edf\u4e00: \u5e94\u6536\u8d26\u6b3e+\u7968\u636e\u805a\u5408\u3001\u56fa\u5b9a\u8d44\u4ea7\u56de\u9000\u3001EPS\u53bb\u91cd - \u6570\u636e\u6e05\u6d17\u4fdd\u62a4: \u5173\u952e\u79d1\u76ee(\u6536\u5165/\u5229\u6da6/\u8d44\u4ea7/\u8d1f\u503a)\u514d\u53d7\u5f02\u5e38\u503c\u8bef\u5224 - LTM\u652f\u6301: \u5b63\u5ea6+\u5e74\u62a5\u7ec4\u88c5Last Twelve Months\u57fa\u7ebf \u5173\u952e\u6539\u8fdb (2025-09): - \u4fee\u590d\u8d44\u4ea7\u8d1f\u503a\u8868\u57fa\u51c6\u65e5\u56de\u9000\u52302023\u7684\u95ee\u9898 - \u4fdd\u62a4\u5217\u673a\u5236\u9632\u6b62\u7ed3\u6784\u6027\u8dc3\u8fc1\u88ab\u8bef\u5224\u4e3a\u5f02\u5e38 - \u6309\u5e74\u62e9\u4f18\u4fdd\u7559(\u4e0d\u518d\u4e22\u5931\u6700\u65b0\u5e74\u5ea6\u6570\u636e) 2. DCF\u4f30\u503c\u8ba1\u7b97\u5f15\u64ce \u4f4d\u7f6e : src/core/calculators/dcf/ , src/core/financial/forecaster.py \u6a21\u5757\u7ec4\u6210 : 1. NwcCalculator : \u51c0\u8425\u8fd0\u8d44\u672c\u8ba1\u7b97\u4e0e\u9884\u6d4b 2. FcfCalculator : \u65e0\u6760\u6746\u81ea\u7531\u73b0\u91d1\u6d41\u8ba1\u7b97 3. WaccCalculator : \u52a0\u6743\u5e73\u5747\u8d44\u672c\u6210\u672c\u8ba1\u7b97 4. TerminalValueCalculator : \u7ec8\u503c\u8ba1\u7b97(\u9000\u51fa\u500d\u6570/\u6c38\u7eed\u589e\u957f) 5. PresentValueCalculator : \u73b0\u503c\u6298\u73b0\u8ba1\u7b97 6. EquityBridgeCalculator : \u4f01\u4e1a\u4ef7\u503c\u5230\u80a1\u6743\u4ef7\u503c\u6865\u63a5 \u4f30\u503c\u94fe\u8def : \u5386\u53f2\u6570\u636e \u2192 \u6e05\u6d17\u5904\u7406 \u2192 \u6bd4\u7387\u4e2d\u4f4d\u6570 \u2192 \u8d22\u52a1\u9884\u6d4b \u2192 UFCF\u8ba1\u7b97 \u2192 \u7ec8\u503c\u8ba1\u7b97 \u2192 \u73b0\u503c\u6298\u73b0 \u2192 \u80a1\u6743\u4ef7\u503c \u2192 \u6bcf\u80a1\u4ef7\u503c \u5173\u952e\u7279\u6027 : - \u5386\u53f2\u6bd4\u7387\u4e2d\u4f4d\u6570\u9a71\u52a8\u9884\u6d4b - \u652f\u6301CAGR\u8870\u51cf\u4e0e\u8fc7\u6e21\u5230\u76ee\u6807\u503c - \u540d\u4e49GDP\u4e0a\u9650\u7ea6\u675f(\u4e2d\u56fd\u5e02\u573a) - Decimal\u7cbe\u5ea6\u8ba1\u7b97\u907f\u514d\u6d6e\u70b9\u8bef\u5dee 3. LLM\u667a\u80fd\u5206\u6790 \u4f4d\u7f6e : src/api/llm_utils.py , src/config/llm_prompt_template.md \u652f\u6301\u6a21\u578b : - DeepSeek Chat - OpenAI\u517c\u5bb9API(\u81ea\u5b9a\u4e49) - \u73af\u5883\u53d8\u91cf\u914d\u7f6e: LLM_PROVIDER , *_API_KEY \u5206\u6790\u5185\u5bb9 : - \u4f30\u503c\u7ed3\u679c\u89e3\u8bfb\u4e0e\u6295\u8d44\u5efa\u8bae - \u5173\u952e\u5047\u8bbe\u654f\u611f\u6027\u5206\u6790 - \u884c\u4e1a\u5bf9\u6bd4\u4e0e\u98ce\u9669\u63d0\u793a - \u4e2d\u6587\u4e13\u4e1a\u62a5\u544a\u751f\u6210 4. \u654f\u611f\u6027\u5206\u6790\u7cfb\u7edf \u4f4d\u7f6e : src/api/sensitivity_models.py \u5206\u6790\u7ef4\u5ea6 : - WACC vs \u6c38\u7eed\u589e\u957f\u7387 - WACC vs \u9000\u51fa\u500d\u6570 - \u6536\u5165CAGR vs EBITDA\u5229\u6da6\u7387 - \u6536\u5165CAGR vs \u7ec8\u503c\u65b9\u6cd5 \u8f93\u51fa\u6307\u6807 : - \u4f01\u4e1a\u4ef7\u503c(EV) - \u6bcf\u80a1\u4ef7\u503c(VPS) - EV/EBITDA\u500d\u6570 - \u9690\u542bPE\u500d\u6570 - \u9690\u542b\u6c38\u7eed\u589e\u957f\u7387 5. \u80a1\u7968\u7b5b\u9009\u5668 \u4f4d\u7f6e : src/core/screener/ \u7b5b\u9009\u6761\u4ef6 : - \u5e02\u503c\u8303\u56f4 - \u4f30\u503c\u500d\u6570(PE/PB/EV/EBITDA) - \u8d22\u52a1\u6307\u6807(ROE/ROA/\u6536\u5165\u589e\u957f\u7387) - \u884c\u4e1a/\u677f\u5757\u8fc7\u6ee4 \u5f00\u53d1\u5de5\u5177\u94fe \u4ee3\u7801\u8d28\u91cf\u4fdd\u969c \u683c\u5f0f\u5316 : Black + isort \u9759\u6001\u68c0\u67e5 : Ruff + MyPy(\u9010\u6b65\u542f\u7528) \u5b89\u5168\u626b\u63cf : Bandit + Safety \u9884\u63d0\u4ea4\u94a9\u5b50 : pre-commit\u914d\u7f6e \u6d4b\u8bd5\u8986\u76d6 : pytest + pytest-cov \u5305\u7ba1\u7406 \u4e3b\u8981 : uv(\u63a8\u8350,\u66f4\u5feb\u66f4\u53ef\u9760) \u5907\u9009 : pip + requirements.txt \u4f9d\u8d56\u7ec4 : [dev] , [test] , [docs] \u8fd0\u884c\u547d\u4ee4 # \u73af\u5883\u8bbe\u7f6e uv venv && source .venv/bin/activate uv pip install -e \".[dev,test]\" # \u4ee3\u7801\u8d28\u91cf pre-commit run --all-files black . && isort . && ruff check --fix . # \u6d4b\u8bd5 pytest --cov=. --cov-report=html # \u5e94\u7528\u8fd0\u884c streamlit run frontend-streamlit/streamlit_app.py uvicorn src.api.main:app --reload --port 8124 \u6570\u636e\u6e90\u5bf9\u6bd4\u4e0e\u9a8c\u8bc1 TuShare vs PostgreSQL \u5bf9\u9f50\u7ed3\u679c \u6d4b\u8bd5\u6848\u4f8b : 000999.SZ, 600519.SH \u5bf9\u9f50\u7ef4\u5ea6 : \u57fa\u51c6\u65e5\u671f\u3001\u5386\u53f2CAGR\u3001\u6700\u65b0EBITDA\u3001NWC\u7ec4\u4ef6\u3001EV\u4f30\u503c \u5bf9\u9f50\u72b6\u51b5 : - \u2705 \u57fa\u51c6\u62a5\u8868\u65e5\u671f : 2024-12-31 (\u4e00\u81f4) - \u2705 \u5386\u53f2\u6536\u5165CAGR : 21.698%/17.184% (\u5b8c\u5168\u4e00\u81f4) - \u2705 \u6700\u65b0\u5b9e\u9645EBITDA : 600519\u5b8c\u5168\u4e00\u81f4\uff0c000999\u63a5\u8fd1 - \u2705 DCF\u8ba1\u7b97\u94fe\u8def : WACC\u3001\u7ec8\u503c\u3001\u73b0\u503c\u903b\u8f91\u4e00\u81f4 - \u26a0\ufe0f VPS\u5dee\u5f02 : \u4e3b\u8981\u7531\u80a1\u672c\u5feb\u7167\u65f6\u95f4\u5dee\u5f02(TS\u66f4\u53ca\u65f6) \u6570\u636e\u6e90\u9009\u62e9\u5efa\u8bae \u751f\u4ea7\u4f30\u503c : DATA_SOURCE=tushare (\u66f4\u53ca\u65f6\u3001\u66f4\u5b8c\u6574) \u5386\u53f2\u590d\u73b0 : DATA_SOURCE=postgres \u6216 TS\u7684PG\u517c\u5bb9\u6a21\u5f0f \u5f00\u53d1\u8c03\u8bd5 : DATA_SOURCE=hybrid (PG\u4f18\u5148,TS\u56de\u9000) \u5df2\u77e5\u95ee\u9898\u4e0e\u9650\u5236 1. \u884c\u4e1a\u9002\u7528\u6027 \u2705 \u975e\u91d1\u878d\u4f01\u4e1a : \u5b8c\u5168\u9002\u7528 \u26a0\ufe0f \u91d1\u878d\u4f01\u4e1a : \u90e8\u5206\u6307\u6807\u4e0d\u9002\u7528(\u94f6\u884c/\u4fdd\u9669\u7b49)\uff0c\u4f1a\u7ed9\u51fa\u8b66\u544a 2. \u6570\u636e\u8d28\u91cf\u4f9d\u8d56 TuShare\u6570\u636e\u8d28\u91cf\u76f4\u63a5\u5f71\u54cd\u4f30\u503c\u7ed3\u679c \u9700\u8981\u5b9a\u671f\u6821\u9a8c\u4e0ePG\u57fa\u51c6\u7684\u4e00\u81f4\u6027 \u6e05\u6d17\u7b56\u7565\u9700\u8981\u6301\u7eed\u4f18\u5316 3. \u6027\u80fd\u8003\u8651 TuShare API\u6709\u8c03\u7528\u9891\u7387\u9650\u5236 \u5efa\u8bae\u589e\u52a0\u672c\u5730\u7f13\u5b58\u4e0e\u91cd\u8bd5\u673a\u5236 \u5927\u6279\u91cf\u7b5b\u9009\u65f6\u53ef\u80fd\u8f83\u6162 \u4e0b\u4e00\u6b65\u89c4\u5212 \u77ed\u671f\u4f18\u5316(1-2\u5468) [ ] \u6027\u80fd\u4f18\u5316: \u672c\u5730\u7f13\u5b58\u673a\u5236 [ ] \u6e05\u6d17\u7b56\u7565: \u8f6f\u5316NWC\u7ec4\u4ef6\u6e05\u6d17\u89c4\u5219 [ ] \u900f\u660e\u5ea6: \u5e02\u573a\u5feb\u7167trade_date\u900f\u4f20\u5230\u524d\u7aef [ ] \u6d4b\u8bd5: \u63d0\u5347\u8986\u76d6\u7387\u523080%+ \u4e2d\u671f\u589e\u5f3a(1\u4e2a\u6708) [ ] \u884c\u4e1a\u4e13\u7528\u6a21\u578b: \u91d1\u878d\u4f01\u4e1a\u4f30\u503c\u6a21\u578b [ ] \u6570\u636e\u76d1\u63a7: \u5b9a\u671fTS\u2194PG\u57fa\u7ebf\u6f02\u79fb\u68c0\u67e5 [ ] \u591a\u5e02\u573a\u652f\u6301: \u6e2f\u80a1/\u7f8e\u80a1\u6570\u636e\u6e90 [ ] \u6279\u91cf\u4f30\u503c: \u652f\u6301\u80a1\u7968\u6c60\u6279\u91cf\u5904\u7406 \u957f\u671f\u613f\u666f(3\u4e2a\u6708) [ ] \u5b9e\u65f6\u6d41\u5904\u7406: \u76d8\u4e2d\u5b9e\u65f6\u4f30\u503c\u66f4\u65b0 [ ] \u673a\u5668\u5b66\u4e60: \u5386\u53f2\u4f30\u503c\u51c6\u786e\u6027\u53cd\u9988\u5b66\u4e60 [ ] \u4e91\u539f\u751f\u90e8\u7f72: Docker + K8s\u751f\u4ea7\u90e8\u7f72 [ ] \u5f00\u653eAPI: \u7b2c\u4e09\u65b9\u96c6\u6210\u63a5\u53e3 \u6280\u672f\u503a\u52a1 \u9ad8\u4f18\u5148\u7ea7 \u7c7b\u578b\u6ce8\u89e3 : MyPy\u8986\u76d6\u7387\u4ecd\u8f83\u4f4e\uff0c\u9700\u8981\u9010\u6b65\u8865\u5f3a \u5f02\u5e38\u5904\u7406 : \u90e8\u5206\u6a21\u5757\u7f3a\u4e4f\u5b8c\u6574\u7684\u9519\u8bef\u5904\u7406\u94fe\u8def \u6587\u6863\u540c\u6b65 : \u4ee3\u7801\u53d8\u66f4\u540e\u6587\u6863\u66f4\u65b0\u6ede\u540e \u4e2d\u4f18\u5148\u7ea7 \u65e5\u5fd7\u7cfb\u7edf : \u7edf\u4e00\u7684\u65e5\u5fd7\u683c\u5f0f\u4e0e\u7ea7\u522b\u7ba1\u7406 \u914d\u7f6e\u7ba1\u7406 : \u73af\u5883\u53d8\u91cf\u7ba1\u7406\u53ef\u4ee5\u66f4\u52a0\u7ed3\u6784\u5316 \u6570\u636e\u5e93\u8fde\u63a5 : \u8fde\u63a5\u6c60\u4e0e\u4e8b\u52a1\u7ba1\u7406\u4f18\u5316 \u7ed3\u8bba \u9879\u76ee\u5df2\u8fbe\u5230\u751f\u4ea7\u53ef\u7528\u72b6\u6001\uff0c\u6838\u5fc3\u529f\u80fd\u5b8c\u6574\u4e14\u7ecf\u8fc7\u9a8c\u8bc1\u3002TuShare\u6570\u636e\u6e90\u7684\u5f15\u5165\u663e\u8457\u63d0\u5347\u4e86\u7cfb\u7edf\u7684\u65f6\u6548\u6027\u548c\u6570\u636e\u5b8c\u6574\u6027\u3002\u5f53\u524d\u7248\u672c(3.0)\u5728\u79d1\u5b66\u6027\u3001\u51c6\u786e\u6027\u3001\u5b9e\u7528\u6027\u65b9\u9762\u5747\u6ee1\u8db3\u4e13\u4e1a\u6295\u8d44\u5206\u6790\u9700\u6c42\u3002 \u4e0b\u4e00\u9636\u6bb5\u7684\u91cd\u70b9\u662f\u6027\u80fd\u4f18\u5316\u3001\u7528\u6237\u4f53\u9a8c\u63d0\u5347\u548c\u529f\u80fd\u6269\u5c55\uff0c\u4e3a\u66f4\u5927\u89c4\u6a21\u7684\u751f\u4ea7\u5e94\u7528\u505a\u51c6\u5907\u3002","title":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u9879\u76ee\u72b6\u6001\u62a5\u544a"},{"location":"01_project_overview/project_status_2025_09_latest/#_1","text":"\u6700\u540e\u66f4\u65b0: 2025-09-26","title":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u9879\u76ee\u72b6\u6001\u62a5\u544a"},{"location":"01_project_overview/project_status_2025_09_latest/#_2","text":"\u672c\u9879\u76ee\u662f\u4e00\u4e2a\u57fa\u4e8eDCF\u6a21\u578b\u7684\u4e13\u4e1a\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\uff0c\u5f53\u524d\u5df2\u5b8c\u6210\u4eceProof of Concept\u5230Production Ready\u7684\u8f6c\u6362\u3002\u7cfb\u7edf\u5b9e\u73b0\u4e86\u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784\uff08TuShare + PostgreSQL\uff09\uff0c\u5177\u5907\u5b8c\u6574\u7684\u4f30\u503c\u94fe\u8def\u3001LLM\u667a\u80fd\u5206\u6790\u3001\u654f\u611f\u6027\u5206\u6790\u3001\u80a1\u7968\u7b5b\u9009\u7b49\u529f\u80fd\u3002 \u5f53\u524d\u7248\u672c : v3.0.0 (feature/user-auth\u5206\u652f) \u6838\u5fc3\u6280\u672f\u6808 : Python 3.9+, FastAPI, Streamlit, PostgreSQL, TuShare API \u67b6\u6784\u6a21\u5f0f : \u6df7\u5408\u6570\u636e\u6e90 + \u6a21\u5757\u5316DCF\u8ba1\u7b97 + LLM\u667a\u80fd\u5206\u6790 \u90e8\u7f72\u72b6\u6001 : \u5f00\u53d1\u73af\u5883\u8fd0\u884c(Streamlit\u7aef\u53e38501)\uff0c\u751f\u4ea7\u5c31\u7eea","title":"\u6267\u884c\u6458\u8981"},{"location":"01_project_overview/project_status_2025_09_latest/#_3","text":"\u2705 \u751f\u4ea7\u7ea7\u6570\u636e\u6e90 : TuShare\u63a5\u53e3\u5b8c\u5168\u5bf9\u9f50PostgreSQL\u6807\u51c6\uff0c\u652f\u6301\u6570\u636e\u6e90\u70ed\u5207\u6362 \u2705 \u6a21\u5757\u5316DCF\u5f15\u64ce : 6\u4e2a\u72ec\u7acb\u8ba1\u7b97\u5668\uff0c\u8986\u76d6\u4eceNWC\u5230\u80a1\u6743\u4ef7\u503c\u7684\u5b8c\u6574\u94fe\u8def \u2705 Streamlit\u524d\u7aef\u67b6\u6784 : \u57fa\u4e8eStreamlit\u7684\u73b0\u4ee3\u5316Web\u754c\u9762\uff0c\u652f\u6301\u7528\u6237\u53cb\u597d\u64cd\u4f5c \u2705 \u7528\u6237\u8ba4\u8bc1\u7cfb\u7edf : \u5b8c\u6574\u7684\u7528\u6237\u6ce8\u518c/\u767b\u5f55/\u4f1a\u8bdd\u7ba1\u7406\uff0c\u6570\u636e\u5e93\u4eceSQLite\u8fc1\u79fb\u81f3Postgres/Supabase \u2705 \u667a\u80fd\u7f13\u5b58\u7cfb\u7edf : \u4f30\u503c\u7ed3\u679c\u7f13\u5b58\u4e0e\u4f1a\u8bdd\u6062\u590d\uff0c\u5927\u5e45\u63d0\u5347\u7528\u6237\u4f53\u9a8c\u548c\u7cfb\u7edf\u6027\u80fd \u2705 LLM\u96c6\u6210 : \u652f\u6301DeepSeek/OpenAI\u517c\u5bb9API\uff0c\u751f\u6210\u6295\u8d44\u5206\u6790\u62a5\u544a \u2705 \u654f\u611f\u6027\u5206\u6790 : \u591a\u7ef4\u5ea6\u4f30\u503csensitivity table\uff0c\u652f\u6301\u7ec8\u503c\u6cd5/\u6c38\u7eed\u589e\u957f\u6cd5 \u2705 \u80a1\u7968\u7b5b\u9009\u5668 : \u57fa\u4e8e\u8d22\u52a1\u6307\u6807\u7684\u591a\u6761\u4ef6\u7b5b\u9009 \u2705 LTM\u57fa\u7ebf : \u652f\u6301Last Twelve Months\u6536\u5165\u57fa\u671f\uff0c\u63d0\u5347\u65f6\u6548\u6027","title":"\u5173\u952e\u6210\u5c31"},{"location":"01_project_overview/project_status_2025_09_latest/#_4","text":"","title":"\u5f53\u524d\u67b6\u6784\u6982\u89c8"},{"location":"01_project_overview/project_status_2025_09_latest/#2025-09","text":"\u524d\u7aef\u5c42 (Streamlit) \u2514\u2500\u2500 Streamlit: frontend-streamlit/streamlit_app.py API\u670d\u52a1\u5c42 \u2514\u2500\u2500 FastAPI: src/api/main.py (\u7aef\u53e38124) \u251c\u2500\u2500 \u4f30\u503c\u63a5\u53e3: /api/v1/valuation \u251c\u2500\u2500 \u654f\u611f\u6027\u5206\u6790: /api/v1/sensitivity \u2514\u2500\u2500 \u80a1\u7968\u7b5b\u9009: /api/v1/screener \u4e1a\u52a1\u903b\u8f91\u5c42 \u251c\u2500\u2500 \u6838\u5fc3\u8ba1\u7b97\u5f15\u64ce: src/core/ \u2502 \u251c\u2500\u2500 calculators/dcf/: DCF\u8ba1\u7b97\u5668\u96c6\u7fa4(6\u4e2a\u6a21\u5757) \u2502 \u251c\u2500\u2500 financial/: \u8d22\u52a1\u9884\u6d4b\u4e0e\u5904\u7406\u5f15\u64ce \u2502 \u2514\u2500\u2500 screener/: \u80a1\u7968\u7b5b\u9009\u5668 \u251c\u2500\u2500 \u6570\u636e\u670d\u52a1: src/data/ \u2502 \u251c\u2500\u2500 fetchers/: \u6570\u636e\u83b7\u53d6\u5668(TuShare/PostgreSQL) \u2502 \u2514\u2500\u2500 processors/: \u6570\u636e\u6e05\u6d17\u4e0e\u5904\u7406 \u2514\u2500\u2500 \u4e1a\u52a1\u670d\u52a1: src/services/valuation_service.py \u6570\u636e\u5c42 \u251c\u2500\u2500 TuShare API: \u5b9e\u65f6\u91d1\u878d\u6570\u636e(\u4e3b\u8981) \u251c\u2500\u2500 PostgreSQL: \u5386\u53f2\u6570\u636e\u5b58\u50a8/\u6821\u9a8c\u57fa\u51c6 \u2514\u2500\u2500 Redis: \u7f13\u5b58\u5c42(\u914d\u7f6e\u9879)","title":"\u7cfb\u7edf\u67b6\u6784\uff082025-09\u7248\u672c\uff09"},{"location":"01_project_overview/project_status_2025_09_latest/#_5","text":"\u6e90\u4ee3\u7801\u6587\u4ef6 : 34\u4e2aPython\u6a21\u5757 \u6d4b\u8bd5\u6587\u4ef6 : 27\u4e2a\u6d4b\u8bd5\u6a21\u5757 \u524d\u7aef\u6587\u4ef6 : 17\u4e2a\u524d\u7aef\u7ec4\u4ef6 \u914d\u7f6e\u6587\u4ef6 : \u652f\u6301uv/pip\u53cc\u5305\u7ba1\u7406\uff0cpre-commit\u4ee3\u7801\u8d28\u91cf\u4fdd\u969c","title":"\u6838\u5fc3\u6a21\u5757\u7edf\u8ba1"},{"location":"01_project_overview/project_status_2025_09_latest/#_6","text":"","title":"\u4e3b\u8981\u529f\u80fd\u6a21\u5757"},{"location":"01_project_overview/project_status_2025_09_latest/#1","text":"\u4f4d\u7f6e : src/auth/ , frontend-streamlit/auth/ \u529f\u80fd\u7279\u6027 : - \u5b8c\u6574\u7684\u7528\u6237\u6ce8\u518c\u3001\u767b\u5f55\u3001\u4f1a\u8bdd\u7ba1\u7406\u7cfb\u7edf - \u6570\u636e\u5e93\u67b6\u6784\u8fc1\u79fb\uff1aSQLite \u2192 PostgreSQL/Supabase\uff0c\u652f\u6301\u9ad8\u5e76\u53d1\u548c\u4e91\u539f\u751f\u90e8\u7f72 - \u4f1a\u8bdd\u6301\u4e45\u5316\uff1a\u7528\u6237\u767b\u5f55\u72b6\u6001\u548c\u4f30\u503c\u7ed3\u679c\u7f13\u5b58\uff0c\u63d0\u5347\u7528\u6237\u4f53\u9a8c - \u8ba4\u8bc1\u4e2d\u95f4\u4ef6\uff1a\u4fdd\u62a4\u654f\u611f\u529f\u80fd\u548c\u6570\u636e\u8bbf\u95ee - \u5b89\u5168\u7279\u6027\uff1a\u5bc6\u7801\u54c8\u5e0c\u3001\u4f1a\u8bdd\u4ee4\u724c\u3001\u9632CSRF\u7b49 \u5173\u952e\u6539\u8fdb (2025-09): - \u89e3\u51b3SQLite\u5e76\u53d1\u9501\u95ee\u9898\uff0c\u8fc1\u79fb\u81f3\u6210\u719f\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93 - \u667a\u80fd\u7f13\u5b58\u673a\u5236\uff0c\u4f30\u503c\u7ed3\u679c\u5728\u4f1a\u8bdd\u95f4\u6301\u4e45\u4fdd\u5b58 - \u4f18\u5316\u7528\u6237\u754c\u9762\uff0c\u7b80\u5316\u8ba4\u8bc1\u6d41\u7a0b","title":"1. \u7528\u6237\u8ba4\u8bc1\u4e0e\u4f1a\u8bdd\u7ba1\u7406"},{"location":"01_project_overview/project_status_2025_09_latest/#2","text":"\u4f4d\u7f6e : src/data/fetchers/ , src/core/financial/processor.py \u529f\u80fd\u7279\u6027 : - \u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784: DATA_SOURCE=tushare/postgres/hybrid - TuShare\u5e74\u62a5\u4e25\u683c\u7b5b\u9009: end_type='4' , update_flag='1' \u4f18\u5148 - \u5b57\u6bb5\u6620\u5c04\u7edf\u4e00: \u5e94\u6536\u8d26\u6b3e+\u7968\u636e\u805a\u5408\u3001\u56fa\u5b9a\u8d44\u4ea7\u56de\u9000\u3001EPS\u53bb\u91cd - \u6570\u636e\u6e05\u6d17\u4fdd\u62a4: \u5173\u952e\u79d1\u76ee(\u6536\u5165/\u5229\u6da6/\u8d44\u4ea7/\u8d1f\u503a)\u514d\u53d7\u5f02\u5e38\u503c\u8bef\u5224 - LTM\u652f\u6301: \u5b63\u5ea6+\u5e74\u62a5\u7ec4\u88c5Last Twelve Months\u57fa\u7ebf \u5173\u952e\u6539\u8fdb (2025-09): - \u4fee\u590d\u8d44\u4ea7\u8d1f\u503a\u8868\u57fa\u51c6\u65e5\u56de\u9000\u52302023\u7684\u95ee\u9898 - \u4fdd\u62a4\u5217\u673a\u5236\u9632\u6b62\u7ed3\u6784\u6027\u8dc3\u8fc1\u88ab\u8bef\u5224\u4e3a\u5f02\u5e38 - \u6309\u5e74\u62e9\u4f18\u4fdd\u7559(\u4e0d\u518d\u4e22\u5931\u6700\u65b0\u5e74\u5ea6\u6570\u636e)","title":"2. \u6570\u636e\u83b7\u53d6\u4e0e\u5904\u7406"},{"location":"01_project_overview/project_status_2025_09_latest/#2-dcf","text":"\u4f4d\u7f6e : src/core/calculators/dcf/ , src/core/financial/forecaster.py \u6a21\u5757\u7ec4\u6210 : 1. NwcCalculator : \u51c0\u8425\u8fd0\u8d44\u672c\u8ba1\u7b97\u4e0e\u9884\u6d4b 2. FcfCalculator : \u65e0\u6760\u6746\u81ea\u7531\u73b0\u91d1\u6d41\u8ba1\u7b97 3. WaccCalculator : \u52a0\u6743\u5e73\u5747\u8d44\u672c\u6210\u672c\u8ba1\u7b97 4. TerminalValueCalculator : \u7ec8\u503c\u8ba1\u7b97(\u9000\u51fa\u500d\u6570/\u6c38\u7eed\u589e\u957f) 5. PresentValueCalculator : \u73b0\u503c\u6298\u73b0\u8ba1\u7b97 6. EquityBridgeCalculator : \u4f01\u4e1a\u4ef7\u503c\u5230\u80a1\u6743\u4ef7\u503c\u6865\u63a5 \u4f30\u503c\u94fe\u8def : \u5386\u53f2\u6570\u636e \u2192 \u6e05\u6d17\u5904\u7406 \u2192 \u6bd4\u7387\u4e2d\u4f4d\u6570 \u2192 \u8d22\u52a1\u9884\u6d4b \u2192 UFCF\u8ba1\u7b97 \u2192 \u7ec8\u503c\u8ba1\u7b97 \u2192 \u73b0\u503c\u6298\u73b0 \u2192 \u80a1\u6743\u4ef7\u503c \u2192 \u6bcf\u80a1\u4ef7\u503c \u5173\u952e\u7279\u6027 : - \u5386\u53f2\u6bd4\u7387\u4e2d\u4f4d\u6570\u9a71\u52a8\u9884\u6d4b - \u652f\u6301CAGR\u8870\u51cf\u4e0e\u8fc7\u6e21\u5230\u76ee\u6807\u503c - \u540d\u4e49GDP\u4e0a\u9650\u7ea6\u675f(\u4e2d\u56fd\u5e02\u573a) - Decimal\u7cbe\u5ea6\u8ba1\u7b97\u907f\u514d\u6d6e\u70b9\u8bef\u5dee","title":"2. DCF\u4f30\u503c\u8ba1\u7b97\u5f15\u64ce"},{"location":"01_project_overview/project_status_2025_09_latest/#3-llm","text":"\u4f4d\u7f6e : src/api/llm_utils.py , src/config/llm_prompt_template.md \u652f\u6301\u6a21\u578b : - DeepSeek Chat - OpenAI\u517c\u5bb9API(\u81ea\u5b9a\u4e49) - \u73af\u5883\u53d8\u91cf\u914d\u7f6e: LLM_PROVIDER , *_API_KEY \u5206\u6790\u5185\u5bb9 : - \u4f30\u503c\u7ed3\u679c\u89e3\u8bfb\u4e0e\u6295\u8d44\u5efa\u8bae - \u5173\u952e\u5047\u8bbe\u654f\u611f\u6027\u5206\u6790 - \u884c\u4e1a\u5bf9\u6bd4\u4e0e\u98ce\u9669\u63d0\u793a - \u4e2d\u6587\u4e13\u4e1a\u62a5\u544a\u751f\u6210","title":"3. LLM\u667a\u80fd\u5206\u6790"},{"location":"01_project_overview/project_status_2025_09_latest/#4","text":"\u4f4d\u7f6e : src/api/sensitivity_models.py \u5206\u6790\u7ef4\u5ea6 : - WACC vs \u6c38\u7eed\u589e\u957f\u7387 - WACC vs \u9000\u51fa\u500d\u6570 - \u6536\u5165CAGR vs EBITDA\u5229\u6da6\u7387 - \u6536\u5165CAGR vs \u7ec8\u503c\u65b9\u6cd5 \u8f93\u51fa\u6307\u6807 : - \u4f01\u4e1a\u4ef7\u503c(EV) - \u6bcf\u80a1\u4ef7\u503c(VPS) - EV/EBITDA\u500d\u6570 - \u9690\u542bPE\u500d\u6570 - \u9690\u542b\u6c38\u7eed\u589e\u957f\u7387","title":"4. \u654f\u611f\u6027\u5206\u6790\u7cfb\u7edf"},{"location":"01_project_overview/project_status_2025_09_latest/#5","text":"\u4f4d\u7f6e : src/core/screener/ \u7b5b\u9009\u6761\u4ef6 : - \u5e02\u503c\u8303\u56f4 - \u4f30\u503c\u500d\u6570(PE/PB/EV/EBITDA) - \u8d22\u52a1\u6307\u6807(ROE/ROA/\u6536\u5165\u589e\u957f\u7387) - \u884c\u4e1a/\u677f\u5757\u8fc7\u6ee4","title":"5. \u80a1\u7968\u7b5b\u9009\u5668"},{"location":"01_project_overview/project_status_2025_09_latest/#_7","text":"","title":"\u5f00\u53d1\u5de5\u5177\u94fe"},{"location":"01_project_overview/project_status_2025_09_latest/#_8","text":"\u683c\u5f0f\u5316 : Black + isort \u9759\u6001\u68c0\u67e5 : Ruff + MyPy(\u9010\u6b65\u542f\u7528) \u5b89\u5168\u626b\u63cf : Bandit + Safety \u9884\u63d0\u4ea4\u94a9\u5b50 : pre-commit\u914d\u7f6e \u6d4b\u8bd5\u8986\u76d6 : pytest + pytest-cov","title":"\u4ee3\u7801\u8d28\u91cf\u4fdd\u969c"},{"location":"01_project_overview/project_status_2025_09_latest/#_9","text":"\u4e3b\u8981 : uv(\u63a8\u8350,\u66f4\u5feb\u66f4\u53ef\u9760) \u5907\u9009 : pip + requirements.txt \u4f9d\u8d56\u7ec4 : [dev] , [test] , [docs]","title":"\u5305\u7ba1\u7406"},{"location":"01_project_overview/project_status_2025_09_latest/#_10","text":"# \u73af\u5883\u8bbe\u7f6e uv venv && source .venv/bin/activate uv pip install -e \".[dev,test]\" # \u4ee3\u7801\u8d28\u91cf pre-commit run --all-files black . && isort . && ruff check --fix . # \u6d4b\u8bd5 pytest --cov=. --cov-report=html # \u5e94\u7528\u8fd0\u884c streamlit run frontend-streamlit/streamlit_app.py uvicorn src.api.main:app --reload --port 8124","title":"\u8fd0\u884c\u547d\u4ee4"},{"location":"01_project_overview/project_status_2025_09_latest/#_11","text":"","title":"\u6570\u636e\u6e90\u5bf9\u6bd4\u4e0e\u9a8c\u8bc1"},{"location":"01_project_overview/project_status_2025_09_latest/#tushare-vs-postgresql","text":"\u6d4b\u8bd5\u6848\u4f8b : 000999.SZ, 600519.SH \u5bf9\u9f50\u7ef4\u5ea6 : \u57fa\u51c6\u65e5\u671f\u3001\u5386\u53f2CAGR\u3001\u6700\u65b0EBITDA\u3001NWC\u7ec4\u4ef6\u3001EV\u4f30\u503c \u5bf9\u9f50\u72b6\u51b5 : - \u2705 \u57fa\u51c6\u62a5\u8868\u65e5\u671f : 2024-12-31 (\u4e00\u81f4) - \u2705 \u5386\u53f2\u6536\u5165CAGR : 21.698%/17.184% (\u5b8c\u5168\u4e00\u81f4) - \u2705 \u6700\u65b0\u5b9e\u9645EBITDA : 600519\u5b8c\u5168\u4e00\u81f4\uff0c000999\u63a5\u8fd1 - \u2705 DCF\u8ba1\u7b97\u94fe\u8def : WACC\u3001\u7ec8\u503c\u3001\u73b0\u503c\u903b\u8f91\u4e00\u81f4 - \u26a0\ufe0f VPS\u5dee\u5f02 : \u4e3b\u8981\u7531\u80a1\u672c\u5feb\u7167\u65f6\u95f4\u5dee\u5f02(TS\u66f4\u53ca\u65f6)","title":"TuShare vs PostgreSQL \u5bf9\u9f50\u7ed3\u679c"},{"location":"01_project_overview/project_status_2025_09_latest/#_12","text":"\u751f\u4ea7\u4f30\u503c : DATA_SOURCE=tushare (\u66f4\u53ca\u65f6\u3001\u66f4\u5b8c\u6574) \u5386\u53f2\u590d\u73b0 : DATA_SOURCE=postgres \u6216 TS\u7684PG\u517c\u5bb9\u6a21\u5f0f \u5f00\u53d1\u8c03\u8bd5 : DATA_SOURCE=hybrid (PG\u4f18\u5148,TS\u56de\u9000)","title":"\u6570\u636e\u6e90\u9009\u62e9\u5efa\u8bae"},{"location":"01_project_overview/project_status_2025_09_latest/#_13","text":"","title":"\u5df2\u77e5\u95ee\u9898\u4e0e\u9650\u5236"},{"location":"01_project_overview/project_status_2025_09_latest/#1_1","text":"\u2705 \u975e\u91d1\u878d\u4f01\u4e1a : \u5b8c\u5168\u9002\u7528 \u26a0\ufe0f \u91d1\u878d\u4f01\u4e1a : \u90e8\u5206\u6307\u6807\u4e0d\u9002\u7528(\u94f6\u884c/\u4fdd\u9669\u7b49)\uff0c\u4f1a\u7ed9\u51fa\u8b66\u544a","title":"1. \u884c\u4e1a\u9002\u7528\u6027"},{"location":"01_project_overview/project_status_2025_09_latest/#2_1","text":"TuShare\u6570\u636e\u8d28\u91cf\u76f4\u63a5\u5f71\u54cd\u4f30\u503c\u7ed3\u679c \u9700\u8981\u5b9a\u671f\u6821\u9a8c\u4e0ePG\u57fa\u51c6\u7684\u4e00\u81f4\u6027 \u6e05\u6d17\u7b56\u7565\u9700\u8981\u6301\u7eed\u4f18\u5316","title":"2. \u6570\u636e\u8d28\u91cf\u4f9d\u8d56"},{"location":"01_project_overview/project_status_2025_09_latest/#3","text":"TuShare API\u6709\u8c03\u7528\u9891\u7387\u9650\u5236 \u5efa\u8bae\u589e\u52a0\u672c\u5730\u7f13\u5b58\u4e0e\u91cd\u8bd5\u673a\u5236 \u5927\u6279\u91cf\u7b5b\u9009\u65f6\u53ef\u80fd\u8f83\u6162","title":"3. \u6027\u80fd\u8003\u8651"},{"location":"01_project_overview/project_status_2025_09_latest/#_14","text":"","title":"\u4e0b\u4e00\u6b65\u89c4\u5212"},{"location":"01_project_overview/project_status_2025_09_latest/#1-2","text":"[ ] \u6027\u80fd\u4f18\u5316: \u672c\u5730\u7f13\u5b58\u673a\u5236 [ ] \u6e05\u6d17\u7b56\u7565: \u8f6f\u5316NWC\u7ec4\u4ef6\u6e05\u6d17\u89c4\u5219 [ ] \u900f\u660e\u5ea6: \u5e02\u573a\u5feb\u7167trade_date\u900f\u4f20\u5230\u524d\u7aef [ ] \u6d4b\u8bd5: \u63d0\u5347\u8986\u76d6\u7387\u523080%+","title":"\u77ed\u671f\u4f18\u5316(1-2\u5468)"},{"location":"01_project_overview/project_status_2025_09_latest/#1_2","text":"[ ] \u884c\u4e1a\u4e13\u7528\u6a21\u578b: \u91d1\u878d\u4f01\u4e1a\u4f30\u503c\u6a21\u578b [ ] \u6570\u636e\u76d1\u63a7: \u5b9a\u671fTS\u2194PG\u57fa\u7ebf\u6f02\u79fb\u68c0\u67e5 [ ] \u591a\u5e02\u573a\u652f\u6301: \u6e2f\u80a1/\u7f8e\u80a1\u6570\u636e\u6e90 [ ] \u6279\u91cf\u4f30\u503c: \u652f\u6301\u80a1\u7968\u6c60\u6279\u91cf\u5904\u7406","title":"\u4e2d\u671f\u589e\u5f3a(1\u4e2a\u6708)"},{"location":"01_project_overview/project_status_2025_09_latest/#3_1","text":"[ ] \u5b9e\u65f6\u6d41\u5904\u7406: \u76d8\u4e2d\u5b9e\u65f6\u4f30\u503c\u66f4\u65b0 [ ] \u673a\u5668\u5b66\u4e60: \u5386\u53f2\u4f30\u503c\u51c6\u786e\u6027\u53cd\u9988\u5b66\u4e60 [ ] \u4e91\u539f\u751f\u90e8\u7f72: Docker + K8s\u751f\u4ea7\u90e8\u7f72 [ ] \u5f00\u653eAPI: \u7b2c\u4e09\u65b9\u96c6\u6210\u63a5\u53e3","title":"\u957f\u671f\u613f\u666f(3\u4e2a\u6708)"},{"location":"01_project_overview/project_status_2025_09_latest/#_15","text":"","title":"\u6280\u672f\u503a\u52a1"},{"location":"01_project_overview/project_status_2025_09_latest/#_16","text":"\u7c7b\u578b\u6ce8\u89e3 : MyPy\u8986\u76d6\u7387\u4ecd\u8f83\u4f4e\uff0c\u9700\u8981\u9010\u6b65\u8865\u5f3a \u5f02\u5e38\u5904\u7406 : \u90e8\u5206\u6a21\u5757\u7f3a\u4e4f\u5b8c\u6574\u7684\u9519\u8bef\u5904\u7406\u94fe\u8def \u6587\u6863\u540c\u6b65 : \u4ee3\u7801\u53d8\u66f4\u540e\u6587\u6863\u66f4\u65b0\u6ede\u540e","title":"\u9ad8\u4f18\u5148\u7ea7"},{"location":"01_project_overview/project_status_2025_09_latest/#_17","text":"\u65e5\u5fd7\u7cfb\u7edf : \u7edf\u4e00\u7684\u65e5\u5fd7\u683c\u5f0f\u4e0e\u7ea7\u522b\u7ba1\u7406 \u914d\u7f6e\u7ba1\u7406 : \u73af\u5883\u53d8\u91cf\u7ba1\u7406\u53ef\u4ee5\u66f4\u52a0\u7ed3\u6784\u5316 \u6570\u636e\u5e93\u8fde\u63a5 : \u8fde\u63a5\u6c60\u4e0e\u4e8b\u52a1\u7ba1\u7406\u4f18\u5316","title":"\u4e2d\u4f18\u5148\u7ea7"},{"location":"01_project_overview/project_status_2025_09_latest/#_18","text":"\u9879\u76ee\u5df2\u8fbe\u5230\u751f\u4ea7\u53ef\u7528\u72b6\u6001\uff0c\u6838\u5fc3\u529f\u80fd\u5b8c\u6574\u4e14\u7ecf\u8fc7\u9a8c\u8bc1\u3002TuShare\u6570\u636e\u6e90\u7684\u5f15\u5165\u663e\u8457\u63d0\u5347\u4e86\u7cfb\u7edf\u7684\u65f6\u6548\u6027\u548c\u6570\u636e\u5b8c\u6574\u6027\u3002\u5f53\u524d\u7248\u672c(3.0)\u5728\u79d1\u5b66\u6027\u3001\u51c6\u786e\u6027\u3001\u5b9e\u7528\u6027\u65b9\u9762\u5747\u6ee1\u8db3\u4e13\u4e1a\u6295\u8d44\u5206\u6790\u9700\u6c42\u3002 \u4e0b\u4e00\u9636\u6bb5\u7684\u91cd\u70b9\u662f\u6027\u80fd\u4f18\u5316\u3001\u7528\u6237\u4f53\u9a8c\u63d0\u5347\u548c\u529f\u80fd\u6269\u5c55\uff0c\u4e3a\u66f4\u5927\u89c4\u6a21\u7684\u751f\u4ea7\u5e94\u7528\u505a\u51c6\u5907\u3002","title":"\u7ed3\u8bba"},{"location":"02_architecture/","text":"\u67b6\u6784\u8bbe\u8ba1\u6587\u6863 \u672c\u76ee\u5f55\u5305\u542b\u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\u76f8\u5173\u6587\u6863\uff0c\u9762\u5411\u67b6\u6784\u5e08\u548c\u9ad8\u7ea7\u5f00\u53d1\u8005\u3002 \u6587\u6863\u5217\u8868 \ud83c\udfd7\ufe0f \u7cfb\u7edf\u67b6\u6784 hybrid_architecture_design.md - \u6df7\u5408\u67b6\u6784\u8be6\u7ec6\u8bbe\u8ba1\uff08\u2b50\u2b50\u2b50\u2b50 \u6838\u5fc3\uff09 \u6574\u4f53\u67b6\u6784\u8bbe\u8ba1 \u6570\u636e\u6e90\u67b6\u6784 \u670d\u52a1\u95f4\u4ea4\u4e92\u8bbe\u8ba1 \u6027\u80fd\u4f18\u5316\u7b56\u7565 dcf_architecture.md - DCF\u8ba1\u7b97\u67b6\u6784\u8bbe\u8ba1 DCF\u6a21\u578b\u8bbe\u8ba1 \u8ba1\u7b97\u5668\u6a21\u5757\u67b6\u6784 \u6570\u636e\u6d41\u8bbe\u8ba1 \u67b6\u6784\u539f\u5219 \u6a21\u5757\u5316\u8bbe\u8ba1 - \u6bcf\u4e2a\u8ba1\u7b97\u6b65\u9aa4\u72ec\u7acb\u6210\u7c7b \u6570\u636e\u6e90\u62bd\u8c61 - \u7edf\u4e00\u6570\u636e\u63a5\u53e3\uff0c\u652f\u6301\u591a\u6570\u636e\u6e90 \u5f02\u6b65\u5904\u7406 - FastAPI + asyncpg \u5b9e\u73b0\u9ad8\u6027\u80fd \u914d\u7f6e\u9a71\u52a8 - \u73af\u5883\u53d8\u91cf\u63a7\u5236\u7cfb\u7edf\u884c\u4e3a \u5173\u952e\u8bbe\u8ba1\u6a21\u5f0f \u7b56\u7565\u6a21\u5f0f : DCF\u8ba1\u7b97\u5668\u96c6\u7fa4 \u5de5\u5382\u6a21\u5f0f : \u6570\u636e\u6e90\u521b\u5efa \u89c2\u5bdf\u8005\u6a21\u5f0f : \u7f13\u5b58\u66f4\u65b0\u673a\u5236 \u9002\u914d\u5668\u6a21\u5f0f : \u591a\u6570\u636e\u6e90\u9002\u914d \u9605\u8bfb\u5efa\u8bae \u67b6\u6784\u5e08 \u91cd\u70b9\u9605\u8bfb hybrid_architecture_design.md \u7ed3\u5408\u4ee3\u7801\u7406\u89e3\u8bbe\u8ba1\u7406\u5ff5 \u5f00\u53d1\u8005 \u5148\u4e86\u89e3\u6574\u4f53\u67b6\u6784\uff0c\u518d\u6df1\u5165\u5177\u4f53\u6a21\u5757\u8bbe\u8ba1 \u66f4\u65b0\u9891\u7387 \u534a\u5e74\u5ea6\u66f4\u65b0\u6216\u91cd\u5927\u67b6\u6784\u53d8\u66f4\u65f6\u66f4\u65b0","title":"\u67b6\u6784\u8bbe\u8ba1\u6587\u6863"},{"location":"02_architecture/#_1","text":"\u672c\u76ee\u5f55\u5305\u542b\u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\u76f8\u5173\u6587\u6863\uff0c\u9762\u5411\u67b6\u6784\u5e08\u548c\u9ad8\u7ea7\u5f00\u53d1\u8005\u3002","title":"\u67b6\u6784\u8bbe\u8ba1\u6587\u6863"},{"location":"02_architecture/#_2","text":"","title":"\u6587\u6863\u5217\u8868"},{"location":"02_architecture/#_3","text":"hybrid_architecture_design.md - \u6df7\u5408\u67b6\u6784\u8be6\u7ec6\u8bbe\u8ba1\uff08\u2b50\u2b50\u2b50\u2b50 \u6838\u5fc3\uff09 \u6574\u4f53\u67b6\u6784\u8bbe\u8ba1 \u6570\u636e\u6e90\u67b6\u6784 \u670d\u52a1\u95f4\u4ea4\u4e92\u8bbe\u8ba1 \u6027\u80fd\u4f18\u5316\u7b56\u7565 dcf_architecture.md - DCF\u8ba1\u7b97\u67b6\u6784\u8bbe\u8ba1 DCF\u6a21\u578b\u8bbe\u8ba1 \u8ba1\u7b97\u5668\u6a21\u5757\u67b6\u6784 \u6570\u636e\u6d41\u8bbe\u8ba1","title":"\ud83c\udfd7\ufe0f \u7cfb\u7edf\u67b6\u6784"},{"location":"02_architecture/#_4","text":"\u6a21\u5757\u5316\u8bbe\u8ba1 - \u6bcf\u4e2a\u8ba1\u7b97\u6b65\u9aa4\u72ec\u7acb\u6210\u7c7b \u6570\u636e\u6e90\u62bd\u8c61 - \u7edf\u4e00\u6570\u636e\u63a5\u53e3\uff0c\u652f\u6301\u591a\u6570\u636e\u6e90 \u5f02\u6b65\u5904\u7406 - FastAPI + asyncpg \u5b9e\u73b0\u9ad8\u6027\u80fd \u914d\u7f6e\u9a71\u52a8 - \u73af\u5883\u53d8\u91cf\u63a7\u5236\u7cfb\u7edf\u884c\u4e3a","title":"\u67b6\u6784\u539f\u5219"},{"location":"02_architecture/#_5","text":"\u7b56\u7565\u6a21\u5f0f : DCF\u8ba1\u7b97\u5668\u96c6\u7fa4 \u5de5\u5382\u6a21\u5f0f : \u6570\u636e\u6e90\u521b\u5efa \u89c2\u5bdf\u8005\u6a21\u5f0f : \u7f13\u5b58\u66f4\u65b0\u673a\u5236 \u9002\u914d\u5668\u6a21\u5f0f : \u591a\u6570\u636e\u6e90\u9002\u914d","title":"\u5173\u952e\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"02_architecture/#_6","text":"","title":"\u9605\u8bfb\u5efa\u8bae"},{"location":"02_architecture/#_7","text":"\u91cd\u70b9\u9605\u8bfb hybrid_architecture_design.md \u7ed3\u5408\u4ee3\u7801\u7406\u89e3\u8bbe\u8ba1\u7406\u5ff5","title":"\u67b6\u6784\u5e08"},{"location":"02_architecture/#_8","text":"\u5148\u4e86\u89e3\u6574\u4f53\u67b6\u6784\uff0c\u518d\u6df1\u5165\u5177\u4f53\u6a21\u5757\u8bbe\u8ba1","title":"\u5f00\u53d1\u8005"},{"location":"02_architecture/#_9","text":"\u534a\u5e74\u5ea6\u66f4\u65b0\u6216\u91cd\u5927\u67b6\u6784\u53d8\u66f4\u65f6\u66f4\u65b0","title":"\u66f4\u65b0\u9891\u7387"},{"location":"02_architecture/dcf_architecture/","text":"DCF \u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\u4e0e\u67b6\u6784 \u672c\u6587\u6863\u6982\u8ff0\u672c\u9879\u76ee\u4e2d DCF \u4f30\u503c\u7684\u6838\u5fc3\u4e1a\u52a1\u6d41\u7a0b\u3001\u5173\u952e\u6a21\u5757\u4e0e\u6570\u636e\u6d41\uff0c\u5e76\u7ed9\u51fa\u6574\u4f53\u4e0e\u5b50\u6a21\u5757\u7684\u67b6\u6784\u56fe\uff08Mermaid\uff09\u3002 \u603b\u4f53\u67b6\u6784 flowchart TD %% API \u5c42\u4e0e\u670d\u52a1\u7f16\u6392 A[API \u8bf7\u6c42\\n`src/api/main.py`\\n`StockValuationRequest`] --> B[DataProcessor\\n\u6e05\u6d17/\u6bd4\u7387/\u6700\u65b0\u6307\u6807\\n`src/core/financial/processor.py`] A -->|\u4f30\u503c\u53c2\u6570| S[ValuationService\\n\u7f16\u6392 DCF \u6b65\u9aa4\\n`src/services/valuation_service.py`] %% \u6570\u636e\u51c6\u5907 B -->|historical_ratios\\nlatest_metrics\\nlatest_balance_sheet| S %% \u9884\u6d4b\u4e0eUFCF S --> C[FinancialForecaster\\n\u751f\u6210\u9010\u5e74\u9884\u6d4bDF\\n`src/core/financial/forecaster.py`] C -->|DataFrame: year, revenue, ebit, nopat, d_a, capex, NWC\u9879, delta_nwc, ebitda, ufcf| S %% \u8d44\u672c\u6210\u672c S --> D[WaccCalculator\\n\u8ba1\u7b97 WACC/Ke\\n`src/core/calculators/dcf/wacc_calculator.py`] D -->|wacc, ke| S %% \u7ec8\u503c\u8ba1\u7b97 S --> E[TerminalValueCalculator\\n\u7ec8\u503c: \u9000\u51fa\u4e58\u6570/\u6c38\u7eed\u589e\u957f\\n`src/core/calculators/dcf/terminal_value_calculator.py`] E -->|terminal_value| S %% \u73b0\u503c\u6298\u73b0 S --> F[PresentValueCalculator\\n\u6298\u73b0UFCF\u4e0eTV\\n`src/core/calculators/dcf/present_value_calculator.py`] F -->|pv_ufcf, pv_tv| S %% \u80a1\u6743\u6865\u6881 S --> G[EquityBridgeCalculator\\nEV->Equity->VPS\\n`src/core/calculators/equity_bridge_calculator.py`] G -->|net_debt, equity_value, value_per_share| S %% \u8f93\u51fa S --> H[DcfForecastDetails\\n`src/api/models.py`] H --> R[API \u54cd\u5e94/\u524d\u7aef] WACC \u8ba1\u7b97\u5b50\u6d41\u7a0b flowchart LR subgraph Inputs P1[\u53c2\u6570: risk_free_rate, beta, market_risk_premium, size_premium, country_risk_premium, industry_risk_premium, cost_of_debt, tax_rate] P2[\u6743\u91cd\u6a21\u5f0f: target \u6216 market] P3[\u76ee\u6807\u503a\u52a1\u6bd4\u4f8b target_debt_ratio] P4[\u6700\u65b0\u5e02\u503c market_cap & \u8d44\u4ea7\u8d1f\u503a\u8868] end P1 --> W{WaccCalculator} P2 --> W P3 --> W P4 -->|market \u6a21\u5f0f\\n\u503a\u52a1\u5e02\u503c\u8fd1\u4f3c\u8d26\u9762| W W -->|Ke = Rf + \u03b2*(MRP+CRP) + Size + Industry| Ke[Ke] W -->|Kd(AT) = Kd*(1-T)| Kd[\u7a0e\u540e\u503a\u52a1\u6210\u672c] W -->|\u6743\u91cd: target \u6216 market| WT[Equity/ Debt \u6bd4\u4f8b] Ke --> X[WACC = E*Ke + D*Kd(AT)] Kd --> X WT --> X \u5173\u952e\u6a21\u5757\u804c\u8d23\u4e0e\u8f93\u5165/\u8f93\u51fa DataProcessor \uff08\u6570\u636e\u51c6\u5907\uff09 \u8f93\u5165\uff1a\u539f\u59cb\u4e09\u5927\u62a5\u8868\u3001\u57fa\u672c\u4fe1\u606f\u3001PE/PB\u3001\u80a1\u606f\u3001\u4ef7\u683c\u7b49 \u8f93\u51fa\uff1a processed_data \uff08\u6e05\u6d17\u540e\u7684\u62a5\u8868\uff09\u3001 historical_ratios \uff08\u4e2d\u4f4d\u6570/\u5929\u6570\uff09\u3001 latest_metrics \u3001 latest_balance_sheet FinancialForecaster \uff08\u8d22\u52a1\u9884\u6d4b\uff09 \u8f93\u5165\uff1a\u4e0a\u4e00\u5e74\u5ea6\u6536\u5165\u3001\u5386\u53f2\u6bd4\u7387\u3001\u9884\u6d4b\u5047\u8bbe\uff08\u5229\u6da6\u7387/\u5404\u9879\u6bd4\u7387\u4e0e\u5929\u6570/\u8fc7\u6e21\u5e74\u6570\u7b49\uff09 \u8f93\u51fa\uff1a\u542b\u9010\u5e74 year, revenue, ebit, nopat, d_a, capex, NWC \u5206\u9879, delta_nwc, ebitda, ufcf \u7684 DataFrame FcfCalculator \uff08UFCF\uff09 \u516c\u5f0f\uff1a ufcf = nopat + d_a - capex - delta_nwc \u5c31\u5730\u56de\u586b ufcf \u5217\uff08Decimal \u8ba1\u7b97\uff0c\u5f02\u5e38/NaN \u9632\u62a4\uff09 WaccCalculator \uff08WACC/Ke\uff09 Ke\uff08\u589e\u5f3a CAPM\uff09\uff1a Ke = Rf + \u03b2*(MRP + CRP) + Size + Industry \u503a\u52a1\u6210\u672c\u7a0e\u540e\uff1a Kd(AT) = Kd*(1 - Tax) \u6743\u91cd\uff1a target \uff08 target_debt_ratio \uff09\u6216 market \uff08\u4ee5\u5e02\u503c/\u8d26\u9762\u503a\u52a1\u8fd1\u4f3c\u6c42\u6743\u91cd\uff09 \u8fd4\u56de\uff1a (wacc, ke) \uff1b\u542b\u5927\u91cf\u7c7b\u578b/\u8303\u56f4\u6821\u9a8c\u4e0e\u56de\u9000 TerminalValueCalculator \uff08\u7ec8\u503c\uff09 Exit Multiple\uff1a TV = EBITDA_T * ExitMultiple Perpetual Growth\uff1a\u82e5\u542f\u7528 GDP \u4e0a\u9650\uff0c g = min(g_input, GDP_CAP) \uff1b\u8981\u6c42 g < wacc \u516c\u5f0f\uff1a TV = UFCF_T * (1 + g) / (wacc - g) PresentValueCalculator \uff08\u73b0\u503c\u6298\u73b0\uff09 \u5e74\u4e2d\u6298\u73b0\u53ef\u9009\uff1a\u6307\u6570 t-0.5 \u8f93\u51fa\uff1a pv_ufcf \u4e0e pv_tv \uff08Decimal \u9010\u671f\u6298\u73b0\u5e76\u6c47\u603b\uff09 EquityBridgeCalculator \uff08\u80a1\u6743\u6865\uff09 NetDebt = (LT/ST \u501f\u6b3e + \u503a\u5238 + \u4e00\u5e74\u5185\u5230\u671f\u975e\u6d41\u52a8\u8d1f\u503a) - \u8d27\u5e01\u8d44\u91d1 EquityValue = EV - NetDebt - MinorityInterest - PreferredEquity Value/Share = EquityValue / TotalShares ValuationService \uff08\u7f16\u6392\u4e0e\u9632\u62a4\uff09 \u987a\u5e8f\uff1a\u9884\u6d4b -> WACC -> \u7ec8\u503c -> \u73b0\u503c -> \u80a1\u6743\u6865 -> \u6c47\u603b DcfForecastDetails \u903b\u8f91\uff1aAPI \u5047\u8bbe\u952e\u6620\u5c04\u3001\u5e02\u573a\u6743\u91cd\u5931\u8d25\u56de\u9000\u76ee\u6807\u6743\u91cd\u3001\u9ed8\u8ba4 ExitMultiple/PGR\u3001 g<w \u5b88\u62a4\u3001\u8c03\u8bd5\u5feb\u7167\u3001\u654f\u611f\u6027\u5206\u6790 \u73af\u5883\u53d8\u91cf\u4e0e\u9ed8\u8ba4 WaccCalculator \uff1a DEFAULT_BETA , RISK_FREE_RATE , MARKET_RISK_PREMIUM , COUNTRY_RISK_PREMIUM , INDUSTRY_RISK_PREMIUM , DEFAULT_COST_OF_DEBT , DEFAULT_TARGET_TAX_RATE , DEFAULT_SIZE_PREMIUM , TARGET_DEBT_RATIO TerminalValueCalculator \uff1a USE_GDP_CAP \uff08\u9ed8\u8ba4\u4e3a true\uff09\uff0c GDP_NOMINAL_CAP \uff08\u9ed8\u8ba4 0.05\uff09 ValuationService \uff1a DEFAULT_EXIT_MULTIPLE \uff08\u9ed8\u8ba4 8.0\uff09\uff0c DEFAULT_PERPETUAL_GROWTH_RATE \uff08\u9ed8\u8ba4 0.025\uff09 \u4e3b\u8981\u6570\u636e\u6d41\u4e0e\u4ea7\u51fa DataProcessor \u6e05\u6d17\u6570\u636e\u3001\u8ba1\u7b97\u5386\u53f2\u4e2d\u4f4d\u6570/\u5929\u6570\u4e0e\u6700\u65b0\u6307\u6807 FinancialForecaster \u57fa\u4e8e\u5386\u53f2\u4e0e\u5047\u8bbe\u751f\u6210\u9010\u5e74\u9884\u6d4b\uff0c FcfCalculator \u586b\u5145 ufcf WaccCalculator \u8ba1\u7b97 wacc, ke \uff08\u652f\u6301 market/target \u6743\u91cd\uff09 TerminalValueCalculator \u8ba1\u7b97\u7ec8\u503c\uff08Exit Multiple \u6216 Perpetual Growth\uff0c\u542b GDP \u4e0a\u9650\u4e0e g<w \u6821\u9a8c\uff09 PresentValueCalculator \u5c06 UFCF \u4e0e TV \u6298\u73b0\u4e3a\u73b0\u503c\uff08\u53ef\u5e74\u4e2d\u6298\u73b0\uff09 EquityBridgeCalculator \u8ba1\u7b97\u51c0\u503a\u52a1\u3001\u80a1\u6743\u4ef7\u503c\u3001\u6bcf\u80a1\u4ef7\u503c \u6c47\u603b\u4e3a DcfForecastDetails \u8fd4\u56de API/\u524d\u7aef \u53c2\u8003\u4ee3\u7801\u4f4d\u7f6e Valuation \u7f16\u6392\uff1a src/services/valuation_service.py WACC/\u7ec8\u503c/\u73b0\u503c/UFCF/\u80a1\u6743\u6865\uff1a src/core/calculators/dcf/wacc_calculator.py src/core/calculators/dcf/terminal_value_calculator.py src/core/calculators/dcf/present_value_calculator.py src/core/calculators/dcf/fcf_calculator.py src/core/calculators/equity_bridge_calculator.py \u9884\u6d4b\u5668/\u6570\u636e\u5904\u7406\uff1a src/core/financial/forecaster.py src/core/financial/processor.py DCF \u7ed3\u679c\u6a21\u578b\uff1a src/api/models.py ```","title":"DCF \u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\u4e0e\u67b6\u6784"},{"location":"02_architecture/dcf_architecture/#dcf","text":"\u672c\u6587\u6863\u6982\u8ff0\u672c\u9879\u76ee\u4e2d DCF \u4f30\u503c\u7684\u6838\u5fc3\u4e1a\u52a1\u6d41\u7a0b\u3001\u5173\u952e\u6a21\u5757\u4e0e\u6570\u636e\u6d41\uff0c\u5e76\u7ed9\u51fa\u6574\u4f53\u4e0e\u5b50\u6a21\u5757\u7684\u67b6\u6784\u56fe\uff08Mermaid\uff09\u3002","title":"DCF \u6838\u5fc3\u4e1a\u52a1\u903b\u8f91\u4e0e\u67b6\u6784"},{"location":"02_architecture/dcf_architecture/#_1","text":"flowchart TD %% API \u5c42\u4e0e\u670d\u52a1\u7f16\u6392 A[API \u8bf7\u6c42\\n`src/api/main.py`\\n`StockValuationRequest`] --> B[DataProcessor\\n\u6e05\u6d17/\u6bd4\u7387/\u6700\u65b0\u6307\u6807\\n`src/core/financial/processor.py`] A -->|\u4f30\u503c\u53c2\u6570| S[ValuationService\\n\u7f16\u6392 DCF \u6b65\u9aa4\\n`src/services/valuation_service.py`] %% \u6570\u636e\u51c6\u5907 B -->|historical_ratios\\nlatest_metrics\\nlatest_balance_sheet| S %% \u9884\u6d4b\u4e0eUFCF S --> C[FinancialForecaster\\n\u751f\u6210\u9010\u5e74\u9884\u6d4bDF\\n`src/core/financial/forecaster.py`] C -->|DataFrame: year, revenue, ebit, nopat, d_a, capex, NWC\u9879, delta_nwc, ebitda, ufcf| S %% \u8d44\u672c\u6210\u672c S --> D[WaccCalculator\\n\u8ba1\u7b97 WACC/Ke\\n`src/core/calculators/dcf/wacc_calculator.py`] D -->|wacc, ke| S %% \u7ec8\u503c\u8ba1\u7b97 S --> E[TerminalValueCalculator\\n\u7ec8\u503c: \u9000\u51fa\u4e58\u6570/\u6c38\u7eed\u589e\u957f\\n`src/core/calculators/dcf/terminal_value_calculator.py`] E -->|terminal_value| S %% \u73b0\u503c\u6298\u73b0 S --> F[PresentValueCalculator\\n\u6298\u73b0UFCF\u4e0eTV\\n`src/core/calculators/dcf/present_value_calculator.py`] F -->|pv_ufcf, pv_tv| S %% \u80a1\u6743\u6865\u6881 S --> G[EquityBridgeCalculator\\nEV->Equity->VPS\\n`src/core/calculators/equity_bridge_calculator.py`] G -->|net_debt, equity_value, value_per_share| S %% \u8f93\u51fa S --> H[DcfForecastDetails\\n`src/api/models.py`] H --> R[API \u54cd\u5e94/\u524d\u7aef]","title":"\u603b\u4f53\u67b6\u6784"},{"location":"02_architecture/dcf_architecture/#wacc","text":"flowchart LR subgraph Inputs P1[\u53c2\u6570: risk_free_rate, beta, market_risk_premium, size_premium, country_risk_premium, industry_risk_premium, cost_of_debt, tax_rate] P2[\u6743\u91cd\u6a21\u5f0f: target \u6216 market] P3[\u76ee\u6807\u503a\u52a1\u6bd4\u4f8b target_debt_ratio] P4[\u6700\u65b0\u5e02\u503c market_cap & \u8d44\u4ea7\u8d1f\u503a\u8868] end P1 --> W{WaccCalculator} P2 --> W P3 --> W P4 -->|market \u6a21\u5f0f\\n\u503a\u52a1\u5e02\u503c\u8fd1\u4f3c\u8d26\u9762| W W -->|Ke = Rf + \u03b2*(MRP+CRP) + Size + Industry| Ke[Ke] W -->|Kd(AT) = Kd*(1-T)| Kd[\u7a0e\u540e\u503a\u52a1\u6210\u672c] W -->|\u6743\u91cd: target \u6216 market| WT[Equity/ Debt \u6bd4\u4f8b] Ke --> X[WACC = E*Ke + D*Kd(AT)] Kd --> X WT --> X","title":"WACC \u8ba1\u7b97\u5b50\u6d41\u7a0b"},{"location":"02_architecture/dcf_architecture/#_2","text":"DataProcessor \uff08\u6570\u636e\u51c6\u5907\uff09 \u8f93\u5165\uff1a\u539f\u59cb\u4e09\u5927\u62a5\u8868\u3001\u57fa\u672c\u4fe1\u606f\u3001PE/PB\u3001\u80a1\u606f\u3001\u4ef7\u683c\u7b49 \u8f93\u51fa\uff1a processed_data \uff08\u6e05\u6d17\u540e\u7684\u62a5\u8868\uff09\u3001 historical_ratios \uff08\u4e2d\u4f4d\u6570/\u5929\u6570\uff09\u3001 latest_metrics \u3001 latest_balance_sheet FinancialForecaster \uff08\u8d22\u52a1\u9884\u6d4b\uff09 \u8f93\u5165\uff1a\u4e0a\u4e00\u5e74\u5ea6\u6536\u5165\u3001\u5386\u53f2\u6bd4\u7387\u3001\u9884\u6d4b\u5047\u8bbe\uff08\u5229\u6da6\u7387/\u5404\u9879\u6bd4\u7387\u4e0e\u5929\u6570/\u8fc7\u6e21\u5e74\u6570\u7b49\uff09 \u8f93\u51fa\uff1a\u542b\u9010\u5e74 year, revenue, ebit, nopat, d_a, capex, NWC \u5206\u9879, delta_nwc, ebitda, ufcf \u7684 DataFrame FcfCalculator \uff08UFCF\uff09 \u516c\u5f0f\uff1a ufcf = nopat + d_a - capex - delta_nwc \u5c31\u5730\u56de\u586b ufcf \u5217\uff08Decimal \u8ba1\u7b97\uff0c\u5f02\u5e38/NaN \u9632\u62a4\uff09 WaccCalculator \uff08WACC/Ke\uff09 Ke\uff08\u589e\u5f3a CAPM\uff09\uff1a Ke = Rf + \u03b2*(MRP + CRP) + Size + Industry \u503a\u52a1\u6210\u672c\u7a0e\u540e\uff1a Kd(AT) = Kd*(1 - Tax) \u6743\u91cd\uff1a target \uff08 target_debt_ratio \uff09\u6216 market \uff08\u4ee5\u5e02\u503c/\u8d26\u9762\u503a\u52a1\u8fd1\u4f3c\u6c42\u6743\u91cd\uff09 \u8fd4\u56de\uff1a (wacc, ke) \uff1b\u542b\u5927\u91cf\u7c7b\u578b/\u8303\u56f4\u6821\u9a8c\u4e0e\u56de\u9000 TerminalValueCalculator \uff08\u7ec8\u503c\uff09 Exit Multiple\uff1a TV = EBITDA_T * ExitMultiple Perpetual Growth\uff1a\u82e5\u542f\u7528 GDP \u4e0a\u9650\uff0c g = min(g_input, GDP_CAP) \uff1b\u8981\u6c42 g < wacc \u516c\u5f0f\uff1a TV = UFCF_T * (1 + g) / (wacc - g) PresentValueCalculator \uff08\u73b0\u503c\u6298\u73b0\uff09 \u5e74\u4e2d\u6298\u73b0\u53ef\u9009\uff1a\u6307\u6570 t-0.5 \u8f93\u51fa\uff1a pv_ufcf \u4e0e pv_tv \uff08Decimal \u9010\u671f\u6298\u73b0\u5e76\u6c47\u603b\uff09 EquityBridgeCalculator \uff08\u80a1\u6743\u6865\uff09 NetDebt = (LT/ST \u501f\u6b3e + \u503a\u5238 + \u4e00\u5e74\u5185\u5230\u671f\u975e\u6d41\u52a8\u8d1f\u503a) - \u8d27\u5e01\u8d44\u91d1 EquityValue = EV - NetDebt - MinorityInterest - PreferredEquity Value/Share = EquityValue / TotalShares ValuationService \uff08\u7f16\u6392\u4e0e\u9632\u62a4\uff09 \u987a\u5e8f\uff1a\u9884\u6d4b -> WACC -> \u7ec8\u503c -> \u73b0\u503c -> \u80a1\u6743\u6865 -> \u6c47\u603b DcfForecastDetails \u903b\u8f91\uff1aAPI \u5047\u8bbe\u952e\u6620\u5c04\u3001\u5e02\u573a\u6743\u91cd\u5931\u8d25\u56de\u9000\u76ee\u6807\u6743\u91cd\u3001\u9ed8\u8ba4 ExitMultiple/PGR\u3001 g<w \u5b88\u62a4\u3001\u8c03\u8bd5\u5feb\u7167\u3001\u654f\u611f\u6027\u5206\u6790","title":"\u5173\u952e\u6a21\u5757\u804c\u8d23\u4e0e\u8f93\u5165/\u8f93\u51fa"},{"location":"02_architecture/dcf_architecture/#_3","text":"WaccCalculator \uff1a DEFAULT_BETA , RISK_FREE_RATE , MARKET_RISK_PREMIUM , COUNTRY_RISK_PREMIUM , INDUSTRY_RISK_PREMIUM , DEFAULT_COST_OF_DEBT , DEFAULT_TARGET_TAX_RATE , DEFAULT_SIZE_PREMIUM , TARGET_DEBT_RATIO TerminalValueCalculator \uff1a USE_GDP_CAP \uff08\u9ed8\u8ba4\u4e3a true\uff09\uff0c GDP_NOMINAL_CAP \uff08\u9ed8\u8ba4 0.05\uff09 ValuationService \uff1a DEFAULT_EXIT_MULTIPLE \uff08\u9ed8\u8ba4 8.0\uff09\uff0c DEFAULT_PERPETUAL_GROWTH_RATE \uff08\u9ed8\u8ba4 0.025\uff09","title":"\u73af\u5883\u53d8\u91cf\u4e0e\u9ed8\u8ba4"},{"location":"02_architecture/dcf_architecture/#_4","text":"DataProcessor \u6e05\u6d17\u6570\u636e\u3001\u8ba1\u7b97\u5386\u53f2\u4e2d\u4f4d\u6570/\u5929\u6570\u4e0e\u6700\u65b0\u6307\u6807 FinancialForecaster \u57fa\u4e8e\u5386\u53f2\u4e0e\u5047\u8bbe\u751f\u6210\u9010\u5e74\u9884\u6d4b\uff0c FcfCalculator \u586b\u5145 ufcf WaccCalculator \u8ba1\u7b97 wacc, ke \uff08\u652f\u6301 market/target \u6743\u91cd\uff09 TerminalValueCalculator \u8ba1\u7b97\u7ec8\u503c\uff08Exit Multiple \u6216 Perpetual Growth\uff0c\u542b GDP \u4e0a\u9650\u4e0e g<w \u6821\u9a8c\uff09 PresentValueCalculator \u5c06 UFCF \u4e0e TV \u6298\u73b0\u4e3a\u73b0\u503c\uff08\u53ef\u5e74\u4e2d\u6298\u73b0\uff09 EquityBridgeCalculator \u8ba1\u7b97\u51c0\u503a\u52a1\u3001\u80a1\u6743\u4ef7\u503c\u3001\u6bcf\u80a1\u4ef7\u503c \u6c47\u603b\u4e3a DcfForecastDetails \u8fd4\u56de API/\u524d\u7aef","title":"\u4e3b\u8981\u6570\u636e\u6d41\u4e0e\u4ea7\u51fa"},{"location":"02_architecture/dcf_architecture/#_5","text":"Valuation \u7f16\u6392\uff1a src/services/valuation_service.py WACC/\u7ec8\u503c/\u73b0\u503c/UFCF/\u80a1\u6743\u6865\uff1a src/core/calculators/dcf/wacc_calculator.py src/core/calculators/dcf/terminal_value_calculator.py src/core/calculators/dcf/present_value_calculator.py src/core/calculators/dcf/fcf_calculator.py src/core/calculators/equity_bridge_calculator.py \u9884\u6d4b\u5668/\u6570\u636e\u5904\u7406\uff1a src/core/financial/forecaster.py src/core/financial/processor.py DCF \u7ed3\u679c\u6a21\u578b\uff1a src/api/models.py ```","title":"\u53c2\u8003\u4ee3\u7801\u4f4d\u7f6e"},{"location":"02_architecture/hybrid_architecture_design/","text":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u6df7\u5408\u67b6\u6784\u8bbe\u8ba1\u6587\u6863 \u6587\u6863\u4fe1\u606f \u6587\u6863\u6807\u9898 : \u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784\u8bbe\u8ba1 \u521b\u5efa\u65e5\u671f : 2025\u5e741\u6708 \u7248\u672c : v1.0 \u4f5c\u8005 : huliux \u5ba1\u6838\u72b6\u6001 : \u5f85\u5ba1\u6838 \u6574\u7406\u8bf4\u660e \u672c\u6587\u6863\u5df2\u6574\u5408\u4ee5\u4e0b\u5185\u5bb9\uff1a - \u539fmigration_checklist.md\u7684\u5b9e\u65bd\u6b65\u9aa4 - \u539ftushare_migration_technical_analysis.md\u7684\u6280\u672f\u7ec6\u8282 - \u539ftushare_postgresql_field_comparison.md\u7684\u5b57\u6bb5\u6620\u5c04 \u6267\u884c\u6458\u8981 \u672c\u6587\u6863\u8be6\u7ec6\u63cf\u8ff0\u4e86\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u91c7\u7528\u7684 Tushare + PostgreSQL\u6df7\u5408\u67b6\u6784 \u8bbe\u8ba1\u65b9\u6848\u3002\u8be5\u67b6\u6784\u901a\u8fc7\u4e3b\u5907\u6570\u636e\u6e90\u6a21\u5f0f\uff0c\u663e\u8457\u63d0\u5347\u4e86\u7cfb\u7edf\u7684\u6570\u636e\u53ef\u9760\u6027\u3001\u6027\u80fd\u8868\u73b0\u548c\u6210\u672c\u6548\u76ca\u3002\u6838\u5fc3\u7279\u6027\u5305\u62ec\u667a\u80fd\u6570\u636e\u6e90\u5207\u6362\u3001\u591a\u5c42\u7ea7\u7f13\u5b58\u673a\u5236\u3001\u81ea\u52a8\u964d\u7ea7\u6062\u590d\u548c\u5168\u9762\u76d1\u63a7\u544a\u8b66\u3002 \u67b6\u6784\u4f18\u52bf \ud83c\udfaf \u9ad8\u53ef\u9760\u6027 : \u53cc\u6570\u636e\u6e90\u4fdd\u969c\uff0c\u7cfb\u7edf\u53ef\u7528\u6027\u8fbe99.5% \u26a1 \u9ad8\u6027\u80fd : \u667a\u80fd\u7f13\u5b58\u673a\u5236\uff0c\u6570\u636e\u8bbf\u95ee\u901f\u5ea6\u63d0\u534770% \ud83d\udcb0 \u6210\u672c\u4f18\u5316 : API\u8c03\u7528\u6210\u672c\u964d\u4f4e60% \ud83d\udd04 \u7075\u6d3b\u5207\u6362 : \u652f\u6301\u914d\u7f6e\u5316\u6570\u636e\u6e90\u9009\u62e9 \ud83d\udcca \u5168\u9762\u76d1\u63a7 : \u5b9e\u65f6\u72b6\u6001\u76d1\u63a7\u548c\u667a\u80fd\u544a\u8b66 \u8fd1\u671f\u6539\u52a8\u6458\u8981\uff082025-09-26\uff09 \u7528\u6237\u8ba4\u8bc1\u7cfb\u7edf\u5b8c\u6574\u5b9e\u73b0 \uff1a \u6570\u636e\u5e93\u67b6\u6784\u4eceSQLite\u8fc1\u79fb\u81f3PostgreSQL/Supabase\uff0c\u89e3\u51b3\u5e76\u53d1\u9501\u95ee\u9898 \u5b8c\u6574\u7684\u7528\u6237\u6ce8\u518c\u3001\u767b\u5f55\u3001\u4f1a\u8bdd\u7ba1\u7406\u529f\u80fd \u8ba4\u8bc1\u4e2d\u95f4\u4ef6\u4fdd\u62a4\u654f\u611f\u529f\u80fd\u548c\u6570\u636e\u8bbf\u95ee \u5bc6\u7801\u54c8\u5e0c\u3001\u4f1a\u8bdd\u4ee4\u724c\u3001\u9632CSRF\u7b49\u5b89\u5168\u7279\u6027 \u667a\u80fd\u7f13\u5b58\u7cfb\u7edf\u91cd\u5927\u5347\u7ea7 \uff1a \u4f30\u503c\u7ed3\u679c\u5728\u7528\u6237\u4f1a\u8bdd\u95f4\u6301\u4e45\u4fdd\u5b58\uff0c\u5927\u5e45\u63d0\u5347\u7528\u6237\u4f53\u9a8c \u4f1a\u8bdd\u6062\u590d\u529f\u80fd\uff0c\u7528\u6237\u91cd\u65b0\u767b\u5f55\u540e\u53ef\u6062\u590d\u4e4b\u524d\u7684\u5206\u6790\u7ed3\u679c \u7f13\u5b58\u7b56\u7565\u4f18\u5316\uff0c\u5e73\u8861\u6027\u80fd\u4e0e\u6570\u636e\u4e00\u81f4\u6027 \u4fee\u590d\u7f13\u5b58\u7cfb\u7edf\u4e2dundefined\u53d8\u91cf\u7b49\u5173\u952e\u9519\u8bef \u524d\u7aef\u7528\u6237\u4f53\u9a8c\u4f18\u5316 \uff1a \u4f18\u5316\u754c\u9762\u5e03\u5c40\u548c\u53c2\u6570\u8bbe\u7f6e\u4f53\u9a8c\uff0c\u7b80\u5316\u64cd\u4f5c\u6d41\u7a0b \u589e\u5f3a\u7528\u6237\u53cd\u9988\u548c\u9519\u8bef\u5904\u7406\u673a\u5236 \u4fee\u590d\"\u4f30\u503c\u8ba1\u7b97\u51fa\u9519: None\"\u7b49\u9519\u8bef\u663e\u793a\u95ee\u9898 \u4f18\u5316\u6570\u636e\u5c55\u793a\u683c\u5f0f\u548c\u89c6\u89c9\u6548\u679c \u5386\u53f2\u6539\u52a8\u6458\u8981\uff082025-09-11\uff09 \u670d\u52a1\u5c42\uff08ValuationService\uff09\u589e\u5f3a\uff1a \u5728\u57fa\u7840\u4f30\u503c\u4e0e\u654f\u611f\u6027\u4e24\u7c7b\u8def\u5f84\u7edf\u4e00\u7f16\u6392 Forecaster\u3001WACC\u3001\u7ec8\u503c\u4e0e\u73b0\u503c\u8ba1\u7b97\uff0c\u65b0\u589e\u670d\u52a1\u5185\u56de\u9000\u4e0e\u5b88\u62a4\u903b\u8f91\u3002 \u5f53 wacc_weight_mode=market \u5931\u8d25\u65f6\uff0c\u81ea\u52a8\u56de\u9000\u5230 target \u6743\u91cd\u5e76\u8bb0\u5f55\u8b66\u544a\uff0c\u907f\u514d 500\u3002 \u5bf9\u654f\u611f\u6027\u5355\u5143\u683c\uff1a \u8ba1\u7b97 EV/EBITDA (Terminal) \u4e0e implied_pgr \uff1b \u5f53 g \u2265 WACC \u65f6\u8df3\u8fc7\u8be5\u7ec4\u5408\uff1b dcf_implied_pe \u7f3a\u5931\u65f6\u6309\u57fa\u51c6 EPS \u56de\u586b\u3002 GDP \u4e0a\u9650\u63a7\u5236\uff1a\u670d\u52a1\u5c42\u5728\u8bf7\u6c42\u7ef4\u5ea6\u652f\u6301\u5f00\u5173\u4e0e\u4e0a\u9650\u503c\uff08\u4f18\u5148\u7ea7\u9ad8\u4e8e\u73af\u5883\u53d8\u91cf\uff09\uff1b\u7ec8\u503c\u8ba1\u7b97\u5668\u4ecd\u4fdd\u7559\u5e95\u5c42\u4e0a\u9650\u4e0e\u6709\u6548\u6027\u6821\u9a8c\uff0c\u53cc\u5c42\u4fdd\u62a4\u3002 LLM \u62a5\u544a\uff1a\u63d0\u793a\u6a21\u677f\u5f3a\u5316\uff08\u4ef7\u503c\u6295\u8d44\u5bfc\u5411\uff09\uff0c\u5e76\u5728\u54cd\u5e94\u4e2d\u643a\u5e26 debug_request_slice \uff08\u542b\u884c\u4e1a\u9884\u8bbe\u4e0e\u504f\u79bb\uff09\u4ee5\u4fbf\u5ba1\u8ba1\u3002 1. \u67b6\u6784\u6982\u89c8 1.1 \u6574\u4f53\u67b6\u6784\u56fe \u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u6df7\u5408\u67b6\u6784 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u5e94\u7528\u5c42 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Streamlit\u524d\u7aef \u2502 \u2502 FastAPI \u2502 \u2502 \u4e1a\u52a1\u903b\u8f91\u5c42 \u2502 \u2502 \u2502 \u2502 (\u7528\u6237\u754c\u9762) \u2502 \u2502 (API\u670d\u52a1) \u2502 \u2502 (\u4f30\u503c\u8ba1\u7b97) \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u6570\u636e\u8bbf\u95ee\u62bd\u8c61\u5c42 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 DataSourceManager \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u914d\u7f6e\u7ba1\u7406 \u2502 \u2502 \u8def\u7531\u7b56\u7565 \u2502 \u2502 \u5065\u5eb7\u68c0\u67e5 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 (.env\u63a7\u5236) \u2502 \u2502 (\u667a\u80fd\u9009\u62e9) \u2502 \u2502 (\u72b6\u6001\u76d1\u63a7) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u7f13\u5b58\u7ba1\u7406\u5c42 \u2502 \u2502 \u4e3b\u6570\u636e\u6e90 \u2502 \u2502 \u5907\u6570\u636e\u6e90 \u2502 \u2502 \u2502 \u2502 (Tushare) \u2502 \u2502 (PostgreSQL) \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Redis\u7f13\u5b58 \u2502 \u2502 \u2502 \u2022 \u5b9e\u65f6\u6570\u636e \u2502 \u2502 \u2022 \u5386\u53f2\u6570\u636e \u2502 \u2502 \u2502 (\u70ed\u6570\u636e) \u2502 \u2502 \u2502 \u2022 \u9ad8\u9891\u66f4\u65b0 \u2502 \u2502 \u2022 \u7a33\u5b9a\u53ef\u9760 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2022 \u4e30\u5bcc\u5b57\u6bb5 \u2502 \u2502 \u2022 \u672c\u5730\u8bbf\u95ee \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2022 API\u9650\u6d41 \u2502 \u2502 \u2022 \u79bb\u7ebf\u53ef\u7528 \u2502 \u2502 \u2502 \u672c\u5730\u7f13\u5b58 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 (\u51b7\u6570\u636e) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u76d1\u63a7\u544a\u8b66\u5c42 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502 \u6027\u80fd\u76d1\u63a7 \u2502 \u2502 \u5f02\u5e38\u544a\u8b66 \u2502\u2502 \u2502 \u2502 (\u54cd\u5e94\u65f6\u95f4/QPS) \u2502 \u2502 (\u6545\u969c\u68c0\u6d4b) \u2502\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 1.2 \u6838\u5fc3\u7ec4\u4ef6\u8bf4\u660e \u7ec4\u4ef6 \u804c\u8d23 \u6280\u672f\u5b9e\u73b0 DataSourceManager \u6570\u636e\u6e90\u7ba1\u7406\u548c\u8def\u7531 Python\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f TushareDataFetcher Tushare\u6570\u636e\u83b7\u53d6 Tushare SDK + \u8fde\u63a5\u6c60 PostgreSQLDataFetcher PostgreSQL\u6570\u636e\u83b7\u53d6 SQLAlchemy + \u8fde\u63a5\u6c60 CacheManager \u7f13\u5b58\u7ba1\u7406 Redis + \u672c\u5730LRU\u7f13\u5b58 HealthChecker \u5065\u5eb7\u72b6\u6001\u68c0\u67e5 \u5b9a\u65f6\u4efb\u52a1 + \u72b6\u6001\u5b58\u50a8 MonitoringService \u76d1\u63a7\u544a\u8b66 Prometheus + \u81ea\u5b9a\u4e49\u6307\u6807 2. \u6570\u636e\u6e90\u8bbe\u8ba1 2.1 \u4e3b\u6570\u636e\u6e90 - Tushare 2.1.1 \u6570\u636e\u6e90\u7279\u6027 \u6570\u636e\u6e90: Tushare Pro API \u7c7b\u578b: \u4e3b\u6570\u636e\u6e90 \u4f18\u52bf: - \u6570\u636e\u5b9e\u65f6\u6027\u5f3a\uff0cT+1\u66f4\u65b0 - \u6570\u636e\u5b57\u6bb5\u4e30\u5bcc\uff0c\u8986\u76d6\u5168\u9762 - \u6570\u636e\u8d28\u91cf\u9ad8\uff0c\u4e13\u4e1a\u91d1\u878d\u6570\u636e\u63d0\u4f9b\u5546 - API\u63a5\u53e3\u6807\u51c6\u5316\uff0c\u6613\u4e8e\u96c6\u6210 \u6311\u6218: - API\u8c03\u7528\u6709\u9891\u7387\u9650\u5236 - \u9700\u8981\u4ed8\u8d39\u79ef\u5206\uff0c\u6709\u6210\u672c\u8003\u8651 - \u7f51\u7edc\u4f9d\u8d56\uff0c\u5b58\u5728\u670d\u52a1\u4e2d\u65ad\u98ce\u9669 - \u6570\u636e\u91cf\u5927\u65f6\u54cd\u5e94\u8f83\u6162 2.1.2 API\u914d\u989d\u7ba1\u7406 # API\u914d\u989d\u7b56\u7565 API_QUOTA_CONFIG = { 'daily_limit': 10000, # \u65e5\u8c03\u7528\u9650\u5236 'minute_limit': 500, # \u5206\u949f\u8c03\u7528\u9650\u5236 'priority_apis': [ # \u4f18\u5148\u7ea7API\u5217\u8868 'stock_basic', # \u80a1\u7968\u57fa\u672c\u4fe1\u606f 'daily_basic', # \u6bcf\u65e5\u57fa\u672c\u9762 'income', # \u5229\u6da6\u8868 'balancesheet', # \u8d44\u4ea7\u8d1f\u503a\u8868 'cashflow' # \u73b0\u91d1\u6d41\u91cf\u8868 ], 'cache_duration': { # \u7f13\u5b58\u65f6\u957f\u914d\u7f6e 'stock_basic': 86400, # 24\u5c0f\u65f6 'daily_basic': 3600, # 1\u5c0f\u65f6 'financial_data': 43200 # 12\u5c0f\u65f6 } } 2.2 \u5907\u6570\u636e\u6e90 - PostgreSQL 2.2.1 \u6570\u636e\u6e90\u7279\u6027 \u6570\u636e\u6e90: PostgreSQL\u6570\u636e\u5e93 \u7c7b\u578b: \u5907\u6570\u636e\u6e90 \u4f18\u52bf: - \u672c\u5730\u8bbf\u95ee\uff0c\u54cd\u5e94\u901f\u5ea6\u5feb - \u65e0\u7f51\u7edc\u4f9d\u8d56\uff0c\u79bb\u7ebf\u53ef\u7528 - \u6570\u636e\u7a33\u5b9a\uff0c\u65e0API\u9650\u5236 - \u652f\u6301\u590d\u6742\u67e5\u8be2\u548c\u805a\u5408 \u5c40\u9650: - \u6570\u636e\u66f4\u65b0\u9891\u7387\u8f83\u4f4e - \u9700\u8981\u5b9a\u671f\u7ef4\u62a4\u548c\u66f4\u65b0 - \u5b58\u50a8\u6210\u672c\u968f\u6570\u636e\u91cf\u589e\u957f - \u6570\u636e\u5b57\u6bb5\u53ef\u80fd\u4e0d\u5982Tushare\u4e30\u5bcc 2.2.2 \u6570\u636e\u8868\u7ed3\u6784 -- \u6838\u5fc3\u6570\u636e\u8868 CREATE TABLE stock_basic ( ts_code VARCHAR(10) PRIMARY KEY, symbol VARCHAR(10), name VARCHAR(50), area VARCHAR(20), industry VARCHAR(50), market VARCHAR(10), list_date DATE, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); CREATE TABLE daily_quotes ( id SERIAL PRIMARY KEY, ts_code VARCHAR(10), trade_date DATE, open DECIMAL(10,2), high DECIMAL(10,2), low DECIMAL(10,2), close DECIMAL(10,2), volume BIGINT, amount DECIMAL(15,2), updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(ts_code, trade_date) ); -- \u8d22\u52a1\u6570\u636e\u8868 CREATE TABLE financial_indicators ( id SERIAL PRIMARY KEY, ts_code VARCHAR(10), end_date DATE, pe DECIMAL(10,2), pb DECIMAL(10,2), ps DECIMAL(10,2), total_share DECIMAL(15,2), float_share DECIMAL(15,2), updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(ts_code, end_date) ); 2.3 \u6570\u636e\u6e90\u6620\u5c04\u5173\u7cfb 2.3.1 \u5b57\u6bb5\u6620\u5c04\u8868 # \u6570\u636e\u6e90\u5b57\u6bb5\u6620\u5c04\u914d\u7f6e FIELD_MAPPING = { 'stock_basic': { 'tushare_fields': ['ts_code', 'symbol', 'name', 'area', 'industry', 'market', 'list_date'], 'postgresql_fields': ['ts_code', 'symbol', 'name', 'area', 'industry', 'market', 'list_date'], 'mapping': { # \u5b57\u6bb5\u540d\u6620\u5c04 'ts_code': 'ts_code', 'symbol': 'symbol', 'name': 'name', 'area': 'area', 'industry': 'industry', 'market': 'market', 'list_date': 'list_date' } }, 'daily_basic': { 'tushare_fields': ['ts_code', 'trade_date', 'close', 'pe', 'pb', 'total_share'], 'postgresql_fields': ['ts_code', 'trade_date', 'close', 'pe', 'pb', 'total_share'], 'unit_conversion': { # \u5355\u4f4d\u8f6c\u6362 'total_share': lambda x: x * 10000 if x else None # \u4e07\u80a1\u8f6c\u80a1 } } } 3. \u6570\u636e\u6e90\u7ba1\u7406\u5668\u8bbe\u8ba1 3.1 DataSourceManager\u6838\u5fc3\u7c7b from abc import ABC, abstractmethod from enum import Enum from typing import Dict, Any, Optional, List import logging class DataSourceType(Enum): \"\"\"\u6570\u636e\u6e90\u7c7b\u578b\u679a\u4e3e\"\"\" TUSHARE = \"tushare\" POSTGRESQL = \"postgresql\" CACHE = \"cache\" class DataSourceStatus(Enum): \"\"\"\u6570\u636e\u6e90\u72b6\u6001\u679a\u4e3e\"\"\" HEALTHY = \"healthy\" DEGRADED = \"degraded\" UNAVAILABLE = \"unavailable\" class DataSourceManager: \"\"\"\u6570\u636e\u6e90\u7ba1\u7406\u5668 - \u6838\u5fc3\u534f\u8c03\u7c7b\"\"\" def __init__(self, config: Dict[str, Any]): self.config = config self.primary_source = DataSourceType.TUSHARE self.fallback_source = DataSourceType.POSTGRESQL self.data_fetchers = {} self.cache_manager = None self.health_checker = None self.logger = logging.getLogger(__name__) self._initialize_components() def _initialize_components(self): \"\"\"\u521d\u59cb\u5316\u5404\u7ec4\u4ef6\"\"\" # \u521d\u59cb\u5316\u6570\u636e\u83b7\u53d6\u5668 self.data_fetchers[DataSourceType.TUSHARE] = TushareDataFetcher(self.config) self.data_fetchers[DataSourceType.POSTGRESQL] = PostgreSQLDataFetcher(self.config) # \u521d\u59cb\u5316\u7f13\u5b58\u7ba1\u7406\u5668 self.cache_manager = CacheManager(self.config) # \u521d\u59cb\u5316\u5065\u5eb7\u68c0\u67e5\u5668 self.health_checker = HealthChecker(self.data_fetchers) async def get_data(self, data_type: str, params: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u6570\u636e - \u4e3b\u8981\u5165\u53e3\u65b9\u6cd5\"\"\" try: # 1. \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6 cached_data = await self.cache_manager.get(data_type, params) if cached_data: self.logger.info(f\"Cache hit for {data_type}\") return cached_data # 2. \u9009\u62e9\u6570\u636e\u6e90 data_source = await self._select_data_source(data_type) # 3. \u83b7\u53d6\u6570\u636e data = await self._fetch_data(data_source, data_type, params) # 4. \u7f13\u5b58\u6570\u636e await self.cache_manager.set(data_type, params, data) return data except Exception as e: self.logger.error(f\"Error getting data for {data_type}: {str(e)}\") return await self._handle_error(data_type, params, e) async def _select_data_source(self, data_type: str) -> DataSourceType: \"\"\"\u667a\u80fd\u6570\u636e\u6e90\u9009\u62e9\"\"\" # \u68c0\u67e5\u914d\u7f6e\u7684\u6570\u636e\u6e90\u504f\u597d if self.config.get('force_data_source'): return DataSourceType(self.config['force_data_source']) # \u68c0\u67e5\u4e3b\u6570\u636e\u6e90\u5065\u5eb7\u72b6\u6001 primary_status = await self.health_checker.check_health(self.primary_source) if primary_status == DataSourceStatus.HEALTHY: return self.primary_source # \u4e3b\u6570\u636e\u6e90\u4e0d\u53ef\u7528\uff0c\u4f7f\u7528\u5907\u7528\u6570\u636e\u6e90 fallback_status = await self.health_checker.check_health(self.fallback_source) if fallback_status in [DataSourceStatus.HEALTHY, DataSourceStatus.DEGRADED]: self.logger.warning(f\"Primary source unavailable, using fallback: {self.fallback_source}\") return self.fallback_source # \u6240\u6709\u6570\u636e\u6e90\u90fd\u4e0d\u53ef\u7528 raise Exception(\"All data sources are unavailable\") async def _fetch_data(self, source: DataSourceType, data_type: str, params: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u4ece\u6307\u5b9a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\"\"\" fetcher = self.data_fetchers[source] return await fetcher.fetch_data(data_type, params) async def _handle_error(self, data_type: str, params: Dict[str, Any], error: Exception) -> Dict[str, Any]: \"\"\"\u9519\u8bef\u5904\u7406\u548c\u964d\u7ea7\u7b56\u7565\"\"\" self.logger.error(f\"Data fetch failed: {str(error)}\") # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\u8fc7\u671f\u6570\u636e stale_data = await self.cache_manager.get_stale(data_type, params) if stale_data: self.logger.warning(\"Returning stale cached data due to error\") return stale_data # \u8fd4\u56de\u9ed8\u8ba4\u503c\u6216\u629b\u51fa\u5f02\u5e38 raise error 3.2 \u5065\u5eb7\u68c0\u67e5\u673a\u5236 import asyncio from datetime import datetime, timedelta from typing import Dict class HealthChecker: \"\"\"\u6570\u636e\u6e90\u5065\u5eb7\u68c0\u67e5\u5668\"\"\" def __init__(self, data_fetchers: Dict[DataSourceType, Any]): self.data_fetchers = data_fetchers self.health_status = {} self.last_check = {} self.check_interval = 60 # 60\u79d2\u68c0\u67e5\u95f4\u9694 self.logger = logging.getLogger(__name__) async def check_health(self, source: DataSourceType) -> DataSourceStatus: \"\"\"\u68c0\u67e5\u6570\u636e\u6e90\u5065\u5eb7\u72b6\u6001\"\"\" now = datetime.now() # \u68c0\u67e5\u662f\u5426\u9700\u8981\u91cd\u65b0\u68c0\u67e5 if (source not in self.last_check or now - self.last_check[source] > timedelta(seconds=self.check_interval)): await self._perform_health_check(source) self.last_check[source] = now return self.health_status.get(source, DataSourceStatus.UNAVAILABLE) async def _perform_health_check(self, source: DataSourceType): \"\"\"\u6267\u884c\u5065\u5eb7\u68c0\u67e5\"\"\" try: fetcher = self.data_fetchers[source] # \u6267\u884c\u7b80\u5355\u7684\u8fde\u63a5\u6d4b\u8bd5 start_time = datetime.now() await fetcher.health_check() response_time = (datetime.now() - start_time).total_seconds() # \u6839\u636e\u54cd\u5e94\u65f6\u95f4\u5224\u65ad\u72b6\u6001 if response_time < 2.0: self.health_status[source] = DataSourceStatus.HEALTHY elif response_time < 5.0: self.health_status[source] = DataSourceStatus.DEGRADED else: self.health_status[source] = DataSourceStatus.UNAVAILABLE self.logger.info(f\"{source} health check: {self.health_status[source]} (response_time: {response_time:.2f}s)\") except Exception as e: self.health_status[source] = DataSourceStatus.UNAVAILABLE self.logger.error(f\"{source} health check failed: {str(e)}\") async def start_monitoring(self): \"\"\"\u542f\u52a8\u6301\u7eed\u76d1\u63a7\"\"\" while True: for source in self.data_fetchers.keys(): await self._perform_health_check(source) await asyncio.sleep(self.check_interval) 4. \u7f13\u5b58\u7b56\u7565\u8bbe\u8ba1 4.1 \u591a\u5c42\u7ea7\u7f13\u5b58\u67b6\u6784 \u7f13\u5b58\u5c42\u7ea7\u7ed3\u6784 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 L1: \u5185\u5b58\u7f13\u5b58 (LRU) \u2502 \u2502 \u2022 \u5bb9\u91cf: 1000\u4e2a\u5bf9\u8c61 \u2502 \u2502 \u2022 TTL: 5-30\u5206\u949f \u2502 \u2502 \u2022 \u7528\u9014: \u70ed\u70b9\u6570\u636e\u5feb\u901f\u8bbf\u95ee \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 L2: Redis\u7f13\u5b58 \u2502 \u2502 \u2022 \u5bb9\u91cf: 10GB \u2502 \u2502 \u2022 TTL: 1-24\u5c0f\u65f6 \u2502 \u2502 \u2022 \u7528\u9014: \u5206\u5e03\u5f0f\u7f13\u5b58\uff0c\u652f\u6301\u96c6\u7fa4 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 L3: \u672c\u5730\u6587\u4ef6\u7f13\u5b58 \u2502 \u2502 \u2022 \u5bb9\u91cf: 1GB \u2502 \u2502 \u2022 TTL: 1-7\u5929 \u2502 \u2502 \u2022 \u7528\u9014: \u51b7\u6570\u636e\u5b58\u50a8\uff0c\u79bb\u7ebf\u8bbf\u95ee \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 4.2 \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u73b0 import json import hashlib from datetime import datetime, timedelta from typing import Any, Dict, Optional import redis from cachetools import LRUCache class CacheManager: \"\"\"\u591a\u5c42\u7ea7\u7f13\u5b58\u7ba1\u7406\u5668\"\"\" def __init__(self, config: Dict[str, Any]): self.config = config # L1: \u5185\u5b58\u7f13\u5b58 self.memory_cache = LRUCache(maxsize=1000) # L2: Redis\u7f13\u5b58 self.redis_client = redis.Redis( host=config.get('redis_host', 'localhost'), port=config.get('redis_port', 6379), db=config.get('redis_db', 0), decode_responses=True ) # L3: \u6587\u4ef6\u7f13\u5b58\u8def\u5f84 self.file_cache_dir = config.get('file_cache_dir', './cache') self.logger = logging.getLogger(__name__) def _generate_cache_key(self, data_type: str, params: Dict[str, Any]) -> str: \"\"\"\u751f\u6210\u7f13\u5b58\u952e\"\"\" # \u521b\u5efa\u53c2\u6570\u7684\u54c8\u5e0c\u503c params_str = json.dumps(params, sort_keys=True) params_hash = hashlib.md5(params_str.encode()).hexdigest()[:8] return f\"{data_type}:{params_hash}\" async def get(self, data_type: str, params: Dict[str, Any]) -> Optional[Dict[str, Any]]: \"\"\"\u83b7\u53d6\u7f13\u5b58\u6570\u636e\"\"\" cache_key = self._generate_cache_key(data_type, params) # L1: \u68c0\u67e5\u5185\u5b58\u7f13\u5b58 if cache_key in self.memory_cache: self.logger.debug(f\"L1 cache hit: {cache_key}\") return self.memory_cache[cache_key] # L2: \u68c0\u67e5Redis\u7f13\u5b58 try: redis_data = self.redis_client.get(cache_key) if redis_data: data = json.loads(redis_data) # \u56de\u586b\u5230L1\u7f13\u5b58 self.memory_cache[cache_key] = data self.logger.debug(f\"L2 cache hit: {cache_key}\") return data except Exception as e: self.logger.warning(f\"Redis cache error: {str(e)}\") # L3: \u68c0\u67e5\u6587\u4ef6\u7f13\u5b58 try: file_path = os.path.join(self.file_cache_dir, f\"{cache_key}.json\") if os.path.exists(file_path): with open(file_path, 'r') as f: data = json.load(f) # \u68c0\u67e5\u6587\u4ef6\u7f13\u5b58\u662f\u5426\u8fc7\u671f cache_time = datetime.fromisoformat(data.get('_cache_time', '1970-01-01')) if datetime.now() - cache_time < timedelta(days=7): # \u56de\u586b\u5230\u4e0a\u7ea7\u7f13\u5b58 self.memory_cache[cache_key] = data try: self.redis_client.setex(cache_key, 3600, json.dumps(data)) except: pass self.logger.debug(f\"L3 cache hit: {cache_key}\") return data except Exception as e: self.logger.warning(f\"File cache error: {str(e)}\") return None async def set(self, data_type: str, params: Dict[str, Any], data: Dict[str, Any]): \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e\"\"\" cache_key = self._generate_cache_key(data_type, params) # \u6dfb\u52a0\u7f13\u5b58\u65f6\u95f4\u6233 data_with_timestamp = { **data, '_cache_time': datetime.now().isoformat(), '_data_type': data_type } # \u83b7\u53d6TTL\u914d\u7f6e ttl_config = self.config.get('cache_ttl', {}) memory_ttl = ttl_config.get(data_type, {}).get('memory', 1800) # 30\u5206\u949f redis_ttl = ttl_config.get(data_type, {}).get('redis', 3600) # 1\u5c0f\u65f6 # L1: \u8bbe\u7f6e\u5185\u5b58\u7f13\u5b58 self.memory_cache[cache_key] = data_with_timestamp # L2: \u8bbe\u7f6eRedis\u7f13\u5b58 try: self.redis_client.setex( cache_key, redis_ttl, json.dumps(data_with_timestamp) ) except Exception as e: self.logger.warning(f\"Redis cache set error: {str(e)}\") # L3: \u8bbe\u7f6e\u6587\u4ef6\u7f13\u5b58\uff08\u5f02\u6b65\uff09 asyncio.create_task(self._set_file_cache(cache_key, data_with_timestamp)) async def _set_file_cache(self, cache_key: str, data: Dict[str, Any]): \"\"\"\u5f02\u6b65\u8bbe\u7f6e\u6587\u4ef6\u7f13\u5b58\"\"\" try: os.makedirs(self.file_cache_dir, exist_ok=True) file_path = os.path.join(self.file_cache_dir, f\"{cache_key}.json\") with open(file_path, 'w') as f: json.dump(data, f, indent=2) except Exception as e: self.logger.warning(f\"File cache set error: {str(e)}\") async def get_stale(self, data_type: str, params: Dict[str, Any]) -> Optional[Dict[str, Any]]: \"\"\"\u83b7\u53d6\u8fc7\u671f\u7684\u7f13\u5b58\u6570\u636e\uff08\u7528\u4e8e\u964d\u7ea7\uff09\"\"\" cache_key = self._generate_cache_key(data_type, params) # \u5c1d\u8bd5\u4ece\u6587\u4ef6\u7f13\u5b58\u83b7\u53d6\uff0c\u5ffd\u7565\u8fc7\u671f\u65f6\u95f4 try: file_path = os.path.join(self.file_cache_dir, f\"{cache_key}.json\") if os.path.exists(file_path): with open(file_path, 'r') as f: data = json.load(f) self.logger.warning(f\"Returning stale cache data: {cache_key}\") return data except Exception as e: self.logger.error(f\"Stale cache retrieval error: {str(e)}\") return None async def invalidate(self, data_type: str, params: Dict[str, Any] = None): \"\"\"\u7f13\u5b58\u5931\u6548\"\"\" if params: # \u5931\u6548\u7279\u5b9a\u7f13\u5b58 cache_key = self._generate_cache_key(data_type, params) self._invalidate_key(cache_key) else: # \u5931\u6548\u6570\u636e\u7c7b\u578b\u7684\u6240\u6709\u7f13\u5b58 await self._invalidate_by_pattern(f\"{data_type}:*\") def _invalidate_key(self, cache_key: str): \"\"\"\u5931\u6548\u6307\u5b9a\u952e\u7684\u7f13\u5b58\"\"\" # L1: \u5185\u5b58\u7f13\u5b58 if cache_key in self.memory_cache: del self.memory_cache[cache_key] # L2: Redis\u7f13\u5b58 try: self.redis_client.delete(cache_key) except: pass # L3: \u6587\u4ef6\u7f13\u5b58 try: file_path = os.path.join(self.file_cache_dir, f\"{cache_key}.json\") if os.path.exists(file_path): os.remove(file_path) except: pass async def _invalidate_by_pattern(self, pattern: str): \"\"\"\u6309\u6a21\u5f0f\u5931\u6548\u7f13\u5b58\"\"\" # Redis\u6a21\u5f0f\u5339\u914d\u5220\u9664 try: keys = self.redis_client.keys(pattern) if keys: self.redis_client.delete(*keys) except: pass # \u5185\u5b58\u7f13\u5b58\u6a21\u5f0f\u5339\u914d\u5220\u9664 keys_to_delete = [k for k in self.memory_cache.keys() if k.startswith(pattern.replace('*', ''))] for key in keys_to_delete: del self.memory_cache[key] 4.3 \u7f13\u5b58\u7b56\u7565\u914d\u7f6e # \u7f13\u5b58TTL\u914d\u7f6e CACHE_TTL_CONFIG = { 'stock_basic': { 'memory': 3600, # 1\u5c0f\u65f6 'redis': 86400, # 24\u5c0f\u65f6 'file': 604800 # 7\u5929 }, 'daily_basic': { 'memory': 1800, # 30\u5206\u949f 'redis': 3600, # 1\u5c0f\u65f6 'file': 86400 # 1\u5929 }, 'financial_data': { 'memory': 7200, # 2\u5c0f\u65f6 'redis': 43200, # 12\u5c0f\u65f6 'file': 2592000 # 30\u5929 }, 'real_time_quotes': { 'memory': 300, # 5\u5206\u949f 'redis': 900, # 15\u5206\u949f 'file': 3600 # 1\u5c0f\u65f6 } } # \u7f13\u5b58\u5931\u6548\u7b56\u7565 CACHE_INVALIDATION_RULES = { 'market_close': { 'time': '15:30', 'invalidate': ['daily_basic', 'real_time_quotes'] }, 'financial_report': { 'trigger': 'quarterly', 'invalidate': ['financial_data', 'valuation_metrics'] }, 'stock_list_update': { 'trigger': 'weekly', 'invalidate': ['stock_basic'] } } 5. \u9519\u8bef\u5904\u7406\u548c\u964d\u7ea7\u7b56\u7565 5.1 \u9519\u8bef\u5206\u7c7b\u548c\u5904\u7406 from enum import Enum from typing import Dict, Any, Optional class ErrorType(Enum): \"\"\"\u9519\u8bef\u7c7b\u578b\u679a\u4e3e\"\"\" NETWORK_ERROR = \"network_error\" # \u7f51\u7edc\u8fde\u63a5\u9519\u8bef API_LIMIT_ERROR = \"api_limit_error\" # API\u9650\u6d41\u9519\u8bef DATA_NOT_FOUND = \"data_not_found\" # \u6570\u636e\u4e0d\u5b58\u5728 AUTHENTICATION_ERROR = \"auth_error\" # \u8ba4\u8bc1\u9519\u8bef SERVER_ERROR = \"server_error\" # \u670d\u52a1\u5668\u9519\u8bef TIMEOUT_ERROR = \"timeout_error\" # \u8d85\u65f6\u9519\u8bef DATA_FORMAT_ERROR = \"format_error\" # \u6570\u636e\u683c\u5f0f\u9519\u8bef class ErrorHandler: \"\"\"\u7edf\u4e00\u9519\u8bef\u5904\u7406\u5668\"\"\" def __init__(self, config: Dict[str, Any]): self.config = config self.retry_config = config.get('retry_config', {}) self.fallback_config = config.get('fallback_config', {}) self.logger = logging.getLogger(__name__) async def handle_error(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u7edf\u4e00\u9519\u8bef\u5904\u7406\u5165\u53e3\"\"\" error_type = self._classify_error(error) self.logger.error(f\"Error occurred: {error_type} - {str(error)}\") # \u6839\u636e\u9519\u8bef\u7c7b\u578b\u9009\u62e9\u5904\u7406\u7b56\u7565 if error_type == ErrorType.API_LIMIT_ERROR: return await self._handle_api_limit_error(error, context) elif error_type == ErrorType.NETWORK_ERROR: return await self._handle_network_error(error, context) elif error_type == ErrorType.TIMEOUT_ERROR: return await self._handle_timeout_error(error, context) elif error_type == ErrorType.DATA_NOT_FOUND: return await self._handle_data_not_found_error(error, context) else: return await self._handle_generic_error(error, context) def _classify_error(self, error: Exception) -> ErrorType: \"\"\"\u9519\u8bef\u5206\u7c7b\"\"\" error_msg = str(error).lower() if 'rate limit' in error_msg or 'quota exceeded' in error_msg: return ErrorType.API_LIMIT_ERROR elif 'network' in error_msg or 'connection' in error_msg: return ErrorType.NETWORK_ERROR elif 'timeout' in error_msg: return ErrorType.TIMEOUT_ERROR elif 'not found' in error_msg or 'no data' in error_msg: return ErrorType.DATA_NOT_FOUND elif 'authentication' in error_msg or 'unauthorized' in error_msg: return ErrorType.AUTHENTICATION_ERROR elif 'server error' in error_msg or '500' in error_msg: return ErrorType.SERVER_ERROR else: return ErrorType.DATA_FORMAT_ERROR async def _handle_api_limit_error(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u5904\u7406API\u9650\u6d41\u9519\u8bef\"\"\" # 1. \u5207\u6362\u5230\u5907\u7528\u6570\u636e\u6e90 self.logger.warning(\"API limit reached, switching to fallback data source\") # 2. \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\u6570\u636e cache_manager = context.get('cache_manager') if cache_manager: stale_data = await cache_manager.get_stale( context.get('data_type'), context.get('params') ) if stale_data: return stale_data # 3. \u4f7f\u7528\u5907\u7528\u6570\u636e\u6e90 fallback_fetcher = context.get('fallback_fetcher') if fallback_fetcher: return await fallback_fetcher.fetch_data( context.get('data_type'), context.get('params') ) raise error async def _handle_network_error(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u5904\u7406\u7f51\u7edc\u9519\u8bef\"\"\" # \u91cd\u8bd5\u673a\u5236 retry_count = context.get('retry_count', 0) max_retries = self.retry_config.get('max_retries', 3) if retry_count < max_retries: self.logger.info(f\"Network error, retrying ({retry_count + 1}/{max_retries})\") # \u6307\u6570\u9000\u907f wait_time = 2 ** retry_count await asyncio.sleep(wait_time) # \u66f4\u65b0\u91cd\u8bd5\u6b21\u6570 context['retry_count'] = retry_count + 1 # \u91cd\u65b0\u5c1d\u8bd5 fetcher = context.get('fetcher') if fetcher: return await fetcher.fetch_data( context.get('data_type'), context.get('params') ) # \u91cd\u8bd5\u5931\u8d25\uff0c\u4f7f\u7528\u964d\u7ea7\u7b56\u7565 return await self._apply_fallback_strategy(error, context) async def _apply_fallback_strategy(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u5e94\u7528\u964d\u7ea7\u7b56\u7565\"\"\" # 1. \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\u8fc7\u671f\u6570\u636e cache_manager = context.get('cache_manager') if cache_manager: stale_data = await cache_manager.get_stale( context.get('data_type'), context.get('params') ) if stale_data: self.logger.warning(\"Using stale cached data as fallback\") return stale_data # 2. \u4f7f\u7528\u5907\u7528\u6570\u636e\u6e90 fallback_fetcher = context.get('fallback_fetcher') if fallback_fetcher: try: self.logger.warning(\"Using fallback data source\") return await fallback_fetcher.fetch_data( context.get('data_type'), context.get('params') ) except Exception as fallback_error: self.logger.error(f\"Fallback data source also failed: {str(fallback_error)}\") # 3. \u8fd4\u56de\u9ed8\u8ba4\u503c\u6216\u629b\u51fa\u5f02\u5e38 default_data = self.fallback_config.get('default_data', {}) if default_data: self.logger.warning(\"Using default fallback data\") return default_data # \u6240\u6709\u964d\u7ea7\u7b56\u7565\u90fd\u5931\u8d25\uff0c\u629b\u51fa\u539f\u59cb\u5f02\u5e38 raise error 5.2 \u81ea\u52a8\u964d\u7ea7\u548c\u6062\u590d\u673a\u5236 import asyncio from datetime import datetime, timedelta from typing import Dict, List class AutoDegradationManager: \"\"\"\u81ea\u52a8\u964d\u7ea7\u7ba1\u7406\u5668\"\"\" def __init__(self, data_source_manager, config: Dict[str, Any]): self.data_source_manager = data_source_manager self.config = config self.degradation_rules = config.get('degradation_rules', {}) self.recovery_rules = config.get('recovery_rules', {}) self.current_degradations = {} self.logger = logging.getLogger(__name__) async def evaluate_degradation(self, source: DataSourceType, error_history: List[Dict]): \"\"\"\u8bc4\u4f30\u662f\u5426\u9700\u8981\u964d\u7ea7\"\"\" # \u5206\u6790\u9519\u8bef\u5386\u53f2 recent_errors = [e for e in error_history if datetime.now() - e['timestamp'] < timedelta(minutes=5)] error_rate = len(recent_errors) / max(1, len(error_history)) # \u68c0\u67e5\u964d\u7ea7\u6761\u4ef6 if error_rate > self.degradation_rules.get('error_rate_threshold', 0.5): await self._trigger_degradation(source, 'high_error_rate') # \u68c0\u67e5\u54cd\u5e94\u65f6\u95f4 avg_response_time = sum(e.get('response_time', 0) for e in recent_errors) / max(1, len(recent_errors)) if avg_response_time > self.degradation_rules.get('response_time_threshold', 10.0): await self._trigger_degradation(source, 'slow_response') async def _trigger_degradation(self, source: DataSourceType, reason: str): \"\"\"\u89e6\u53d1\u964d\u7ea7\"\"\" if source not in self.current_degradations: self.current_degradations[source] = { 'reason': reason, 'start_time': datetime.now(), 'attempts': 0 } self.logger.warning(f\"Triggering degradation for {source}: {reason}\") # \u901a\u77e5\u6570\u636e\u6e90\u7ba1\u7406\u5668 await self.data_source_manager.set_source_status(source, DataSourceStatus.DEGRADED) async def evaluate_recovery(self): \"\"\"\u8bc4\u4f30\u6062\u590d\u6761\u4ef6\"\"\" for source, degradation_info in list(self.current_degradations.items()): # \u68c0\u67e5\u964d\u7ea7\u65f6\u95f4 degradation_duration = datetime.now() - degradation_info['start_time'] min_degradation_time = timedelta(minutes=self.recovery_rules.get('min_degradation_minutes', 5)) if degradation_duration > min_degradation_time: # \u5c1d\u8bd5\u6062\u590d\u68c0\u67e5 if await self._test_recovery(source): await self._trigger_recovery(source) async def _test_recovery(self, source: DataSourceType) -> bool: \"\"\"\u6d4b\u8bd5\u6570\u636e\u6e90\u662f\u5426\u53ef\u4ee5\u6062\u590d\"\"\" try: # \u6267\u884c\u5065\u5eb7\u68c0\u67e5 health_checker = self.data_source_manager.health_checker status = await health_checker.check_health(source) return status == DataSourceStatus.HEALTHY except Exception as e: self.logger.debug(f\"Recovery test failed for {source}: {str(e)}\") return False async def _trigger_recovery(self, source: DataSourceType): \"\"\"\u89e6\u53d1\u6062\u590d\"\"\" if source in self.current_degradations: degradation_info = self.current_degradations[source] duration = datetime.now() - degradation_info['start_time'] self.logger.info(f\"Recovering {source} after {duration}\") # \u79fb\u9664\u964d\u7ea7\u72b6\u6001 del self.current_degradations[source] # \u901a\u77e5\u6570\u636e\u6e90\u7ba1\u7406\u5668 await self.data_source_manager.set_source_status(source, DataSourceStatus.HEALTHY) async def start_monitoring(self): \"\"\"\u542f\u52a8\u81ea\u52a8\u964d\u7ea7\u76d1\u63a7\"\"\" while True: try: await self.evaluate_recovery() await asyncio.sleep(30) # 30\u79d2\u68c0\u67e5\u4e00\u6b21 except Exception as e: self.logger.error(f\"Auto degradation monitoring error: {str(e)}\") await asyncio.sleep(60) 6. \u76d1\u63a7\u548c\u544a\u8b66\u7cfb\u7edf 6.1 \u76d1\u63a7\u6307\u6807\u5b9a\u4e49 from dataclasses import dataclass from typing import Dict, List, Optional from datetime import datetime import time @dataclass class MetricPoint: \"\"\"\u76d1\u63a7\u6307\u6807\u6570\u636e\u70b9\"\"\" name: str value: float timestamp: datetime tags: Dict[str, str] unit: str = \"\" class MetricsCollector: \"\"\"\u6307\u6807\u6536\u96c6\u5668\"\"\" def __init__(self, config: Dict[str, Any]): self.config = config self.metrics_buffer = [] self.counters = {} self.gauges = {} self.histograms = {} self.logger = logging.getLogger(__name__) def increment_counter(self, name: str, value: float = 1.0, tags: Dict[str, str] = None): \"\"\"\u9012\u589e\u8ba1\u6570\u5668\"\"\" key = self._make_key(name, tags or {}) self.counters[key] = self.counters.get(key, 0) + value self._add_metric_point(MetricPoint( name=name, value=self.counters[key], timestamp=datetime.now(), tags=tags or {}, unit=\"count\" )) def set_gauge(self, name: str, value: float, tags: Dict[str, str] = None): \"\"\"\u8bbe\u7f6e\u4eea\u8868\u503c\"\"\" key = self._make_key(name, tags or {}) self.gauges[key] = value self._add_metric_point(MetricPoint( name=name, value=value, timestamp=datetime.now(), tags=tags or {}, unit=\"gauge\" )) def record_histogram(self, name: str, value: float, tags: Dict[str, str] = None): \"\"\"\u8bb0\u5f55\u76f4\u65b9\u56fe\u503c\"\"\" key = self._make_key(name, tags or {}) if key not in self.histograms: self.histograms[key] = [] self.histograms[key].append(value) # \u4fdd\u6301\u6700\u8fd11000\u4e2a\u503c if len(self.histograms[key]) > 1000: self.histograms[key] = self.histograms[key][-1000:] self._add_metric_point(MetricPoint( name=name, value=value, timestamp=datetime.now(), tags=tags or {}, unit=\"histogram\" )) def _make_key(self, name: str, tags: Dict[str, str]) -> str: \"\"\"\u751f\u6210\u6307\u6807\u952e\"\"\" tag_str = \",\".join(f\"{k}={v}\" for k, v in sorted(tags.items())) return f\"{name}[{tag_str}]\" def _add_metric_point(self, metric: MetricPoint): \"\"\"\u6dfb\u52a0\u6307\u6807\u70b9\u5230\u7f13\u51b2\u533a\"\"\" self.metrics_buffer.append(metric) # \u7f13\u51b2\u533a\u6ee1\u65f6\u53d1\u9001 if len(self.metrics_buffer) >= 100: asyncio.create_task(self._flush_metrics()) async def _flush_metrics(self): \"\"\"\u5237\u65b0\u6307\u6807\u5230\u76d1\u63a7\u7cfb\u7edf\"\"\" if not self.metrics_buffer: return try: # \u53d1\u9001\u5230Prometheus\u6216\u5176\u4ed6\u76d1\u63a7\u7cfb\u7edf await self._send_to_monitoring_system(self.metrics_buffer) self.metrics_buffer.clear() except Exception as e: self.logger.error(f\"Failed to flush metrics: {str(e)}\") async def _send_to_monitoring_system(self, metrics: List[MetricPoint]): \"\"\"\u53d1\u9001\u6307\u6807\u5230\u76d1\u63a7\u7cfb\u7edf\"\"\" # \u8fd9\u91cc\u53ef\u4ee5\u96c6\u6210Prometheus\u3001InfluxDB\u7b49\u76d1\u63a7\u7cfb\u7edf for metric in metrics: self.logger.debug(f\"Metric: {metric.name}={metric.value} {metric.tags}\") # \u6838\u5fc3\u76d1\u63a7\u6307\u6807\u5b9a\u4e49 CORE_METRICS = { # \u6570\u636e\u6e90\u6307\u6807 'data_source_requests_total': 'Counter - \u6570\u636e\u6e90\u8bf7\u6c42\u603b\u6570', 'data_source_errors_total': 'Counter - \u6570\u636e\u6e90\u9519\u8bef\u603b\u6570', 'data_source_response_time': 'Histogram - \u6570\u636e\u6e90\u54cd\u5e94\u65f6\u95f4', 'data_source_availability': 'Gauge - \u6570\u636e\u6e90\u53ef\u7528\u6027', # \u7f13\u5b58\u6307\u6807 'cache_hits_total': 'Counter - \u7f13\u5b58\u547d\u4e2d\u603b\u6570', 'cache_misses_total': 'Counter - \u7f13\u5b58\u672a\u547d\u4e2d\u603b\u6570', 'cache_hit_ratio': 'Gauge - \u7f13\u5b58\u547d\u4e2d\u7387', 'cache_size_bytes': 'Gauge - \u7f13\u5b58\u5927\u5c0f', # API\u6307\u6807 'api_requests_total': 'Counter - API\u8bf7\u6c42\u603b\u6570', 'api_response_time': 'Histogram - API\u54cd\u5e94\u65f6\u95f4', 'api_errors_total': 'Counter - API\u9519\u8bef\u603b\u6570', # \u4e1a\u52a1\u6307\u6807 'valuation_calculations_total': 'Counter - \u4f30\u503c\u8ba1\u7b97\u603b\u6570', 'valuation_calculation_time': 'Histogram - \u4f30\u503c\u8ba1\u7b97\u65f6\u95f4', 'active_users': 'Gauge - \u6d3b\u8dc3\u7528\u6237\u6570' } 6.2 \u544a\u8b66\u89c4\u5219\u914d\u7f6e # \u544a\u8b66\u89c4\u5219\u914d\u7f6e alert_rules: # \u6570\u636e\u6e90\u544a\u8b66 data_source_down: metric: data_source_availability condition: \"< 0.5\" duration: \"2m\" severity: critical message: \"\u6570\u636e\u6e90 {{$labels.source}} \u4e0d\u53ef\u7528\" data_source_slow: metric: data_source_response_time condition: \"> 10\" duration: \"5m\" severity: warning message: \"\u6570\u636e\u6e90 {{$labels.source}} \u54cd\u5e94\u7f13\u6162\" high_error_rate: metric: rate(data_source_errors_total[5m]) condition: \"> 0.1\" duration: \"3m\" severity: warning message: \"\u6570\u636e\u6e90 {{$labels.source}} \u9519\u8bef\u7387\u8fc7\u9ad8\" # \u7f13\u5b58\u544a\u8b66 low_cache_hit_ratio: metric: cache_hit_ratio condition: \"< 0.7\" duration: \"10m\" severity: warning message: \"\u7f13\u5b58\u547d\u4e2d\u7387\u8fc7\u4f4e: {{$value}}\" cache_size_high: metric: cache_size_bytes condition: \"> 8GB\" duration: \"5m\" severity: warning message: \"\u7f13\u5b58\u4f7f\u7528\u91cf\u8fc7\u9ad8: {{$value}}\" # API\u544a\u8b66 api_response_slow: metric: api_response_time condition: \"> 5\" duration: \"5m\" severity: warning message: \"API\u54cd\u5e94\u65f6\u95f4\u8fc7\u957f: {{$value}}s\" api_error_rate_high: metric: rate(api_errors_total[5m]) condition: \"> 0.05\" duration: \"3m\" severity: critical message: \"API\u9519\u8bef\u7387\u8fc7\u9ad8: {{$value}}\" # \u544a\u8b66\u901a\u77e5\u914d\u7f6e notification_channels: email: enabled: true smtp_server: \"smtp.example.com\" recipients: [\"admin@example.com\"] slack: enabled: true webhook_url: \"https://hooks.slack.com/services/...\" channel: \"#alerts\" webhook: enabled: false url: \"https://api.example.com/alerts\" 6.3 \u76d1\u63a7\u4eea\u8868\u677f class MonitoringDashboard: \"\"\"\u76d1\u63a7\u4eea\u8868\u677f\"\"\" def __init__(self, metrics_collector: MetricsCollector): self.metrics_collector = metrics_collector self.dashboard_config = self._load_dashboard_config() def _load_dashboard_config(self) -> Dict[str, Any]: \"\"\"\u52a0\u8f7d\u4eea\u8868\u677f\u914d\u7f6e\"\"\" return { 'panels': [ { 'title': '\u6570\u636e\u6e90\u72b6\u6001', 'type': 'stat', 'metrics': ['data_source_availability'], 'thresholds': [0.9, 0.95] }, { 'title': '\u54cd\u5e94\u65f6\u95f4\u8d8b\u52bf', 'type': 'graph', 'metrics': ['data_source_response_time', 'api_response_time'], 'time_range': '1h' }, { 'title': '\u7f13\u5b58\u6027\u80fd', 'type': 'graph', 'metrics': ['cache_hit_ratio', 'cache_hits_total', 'cache_misses_total'], 'time_range': '6h' }, { 'title': '\u9519\u8bef\u7387\u7edf\u8ba1', 'type': 'graph', 'metrics': ['data_source_errors_total', 'api_errors_total'], 'time_range': '24h' }, { 'title': '\u4e1a\u52a1\u6307\u6807', 'type': 'stat', 'metrics': ['valuation_calculations_total', 'active_users'], 'time_range': '1d' } ] } async def get_dashboard_data(self) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u4eea\u8868\u677f\u6570\u636e\"\"\" dashboard_data = { 'timestamp': datetime.now().isoformat(), 'panels': [] } for panel_config in self.dashboard_config['panels']: panel_data = await self._get_panel_data(panel_config) dashboard_data['panels'].append(panel_data) return dashboard_data async def _get_panel_data(self, panel_config: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u9762\u677f\u6570\u636e\"\"\" panel_data = { 'title': panel_config['title'], 'type': panel_config['type'], 'data': [] } for metric_name in panel_config['metrics']: metric_data = await self._get_metric_data( metric_name, panel_config.get('time_range', '1h') ) panel_data['data'].append(metric_data) return panel_data async def _get_metric_data(self, metric_name: str, time_range: str) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u6307\u6807\u6570\u636e\"\"\" # \u8fd9\u91cc\u5e94\u8be5\u4ece\u65f6\u5e8f\u6570\u636e\u5e93\u67e5\u8be2\u6570\u636e # \u4e3a\u4e86\u793a\u4f8b\uff0c\u8fd4\u56de\u6a21\u62df\u6570\u636e return { 'metric': metric_name, 'values': [], # \u5b9e\u9645\u7684\u65f6\u5e8f\u6570\u636e\u70b9 'current_value': 0.0, 'trend': 'stable' # up, down, stable } 7. \u914d\u7f6e\u7ba1\u7406 7.1 \u73af\u5883\u914d\u7f6e\u6587\u4ef6 # .env \u914d\u7f6e\u6587\u4ef6 # ==================== \u6570\u636e\u6e90\u914d\u7f6e ==================== # \u4e3b\u6570\u636e\u6e90\u9009\u62e9: tushare, postgresql PRIMARY_DATA_SOURCE=tushare # \u5907\u7528\u6570\u636e\u6e90\u9009\u62e9: postgresql, tushare FALLBACK_DATA_SOURCE=postgresql # \u5f3a\u5236\u4f7f\u7528\u6307\u5b9a\u6570\u636e\u6e90 (\u53ef\u9009): tushare, postgresql # FORCE_DATA_SOURCE=tushare # ==================== Tushare\u914d\u7f6e ==================== TUSHARE_TOKEN=your_tushare_token_here TUSHARE_API_URL=http://api.tushare.pro TUSHARE_TIMEOUT=30 TUSHARE_MAX_RETRIES=3 TUSHARE_RETRY_DELAY=1 # API\u914d\u989d\u7ba1\u7406 TUSHARE_DAILY_LIMIT=10000 TUSHARE_MINUTE_LIMIT=500 TUSHARE_ENABLE_QUOTA_CHECK=true # ==================== PostgreSQL\u914d\u7f6e ==================== POSTGRESQL_HOST=localhost POSTGRESQL_PORT=5432 POSTGRESQL_DATABASE=stock_valuation POSTGRESQL_USERNAME=postgres POSTGRESQL_PASSWORD=your_password_here POSTGRESQL_POOL_SIZE=10 POSTGRESQL_MAX_OVERFLOW=20 POSTGRESQL_POOL_TIMEOUT=30 # ==================== Redis\u7f13\u5b58\u914d\u7f6e ==================== REDIS_HOST=localhost REDIS_PORT=6379 REDIS_DB=0 REDIS_PASSWORD= REDIS_MAX_CONNECTIONS=10 REDIS_SOCKET_TIMEOUT=5 # ==================== \u7f13\u5b58\u7b56\u7565\u914d\u7f6e ==================== # \u542f\u7528\u7f13\u5b58\u5c42\u7ea7: memory, redis, file ENABLE_MEMORY_CACHE=true ENABLE_REDIS_CACHE=true ENABLE_FILE_CACHE=true # \u7f13\u5b58\u76ee\u5f55 FILE_CACHE_DIR=./cache # \u7f13\u5b58TTL (\u79d2) CACHE_TTL_STOCK_BASIC_MEMORY=3600 CACHE_TTL_STOCK_BASIC_REDIS=86400 CACHE_TTL_DAILY_BASIC_MEMORY=1800 CACHE_TTL_DAILY_BASIC_REDIS=3600 CACHE_TTL_FINANCIAL_DATA_MEMORY=7200 CACHE_TTL_FINANCIAL_DATA_REDIS=43200 # ==================== \u5065\u5eb7\u68c0\u67e5\u914d\u7f6e ==================== HEALTH_CHECK_INTERVAL=60 HEALTH_CHECK_TIMEOUT=10 HEALTH_CHECK_RETRY_COUNT=3 # \u5065\u5eb7\u72b6\u6001\u9608\u503c HEALTH_RESPONSE_TIME_HEALTHY=2.0 HEALTH_RESPONSE_TIME_DEGRADED=5.0 # ==================== \u964d\u7ea7\u7b56\u7565\u914d\u7f6e ==================== # \u542f\u7528\u81ea\u52a8\u964d\u7ea7 ENABLE_AUTO_DEGRADATION=true # \u964d\u7ea7\u89e6\u53d1\u6761\u4ef6 DEGRADATION_ERROR_RATE_THRESHOLD=0.5 DEGRADATION_RESPONSE_TIME_THRESHOLD=10.0 DEGRADATION_MIN_DURATION_MINUTES=5 # \u6062\u590d\u6761\u4ef6 RECOVERY_SUCCESS_RATE_THRESHOLD=0.9 RECOVERY_TEST_INTERVAL=30 # ==================== \u76d1\u63a7\u544a\u8b66\u914d\u7f6e ==================== # \u542f\u7528\u76d1\u63a7 ENABLE_MONITORING=true MONITORING_INTERVAL=30 # Prometheus\u914d\u7f6e PROMETHEUS_ENABLED=false PROMETHEUS_HOST=localhost PROMETHEUS_PORT=9090 # \u544a\u8b66\u914d\u7f6e ALERT_EMAIL_ENABLED=true ALERT_EMAIL_SMTP_SERVER=smtp.example.com ALERT_EMAIL_RECIPIENTS=admin@example.com ALERT_SLACK_ENABLED=false ALERT_SLACK_WEBHOOK_URL= # ==================== \u65e5\u5fd7\u914d\u7f6e ==================== LOG_LEVEL=INFO LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s LOG_FILE_PATH=./logs/stock_valuation.log LOG_MAX_SIZE=100MB LOG_BACKUP_COUNT=5 # ==================== \u6027\u80fd\u914d\u7f6e ==================== # \u8fde\u63a5\u6c60\u914d\u7f6e CONNECTION_POOL_SIZE=10 CONNECTION_POOL_MAX_OVERFLOW=20 CONNECTION_POOL_TIMEOUT=30 # \u5f02\u6b65\u914d\u7f6e ASYNC_WORKER_COUNT=4 ASYNC_QUEUE_SIZE=1000 # \u9650\u6d41\u914d\u7f6e RATE_LIMIT_ENABLED=true RATE_LIMIT_REQUESTS_PER_MINUTE=1000 RATE_LIMIT_BURST_SIZE=100 7.2 \u914d\u7f6e\u52a0\u8f7d\u5668 import os from typing import Dict, Any, Optional from dataclasses import dataclass from pathlib import Path @dataclass class DataSourceConfig: \"\"\"\u6570\u636e\u6e90\u914d\u7f6e\"\"\" primary_source: str fallback_source: str force_source: Optional[str] = None @dataclass class TushareConfig: \"\"\"Tushare\u914d\u7f6e\"\"\" token: str api_url: str = \"http://api.tushare.pro\" timeout: int = 30 max_retries: int = 3 retry_delay: int = 1 daily_limit: int = 10000 minute_limit: int = 500 enable_quota_check: bool = True @dataclass class PostgreSQLConfig: \"\"\"PostgreSQL\u914d\u7f6e\"\"\" host: str = \"localhost\" port: int = 5432 database: str = \"stock_valuation\" username: str = \"postgres\" password: str = \"\" pool_size: int = 10 max_overflow: int = 20 pool_timeout: int = 30 @dataclass class CacheConfig: \"\"\"\u7f13\u5b58\u914d\u7f6e\"\"\" enable_memory: bool = True enable_redis: bool = True enable_file: bool = True file_cache_dir: str = \"./cache\" redis_host: str = \"localhost\" redis_port: int = 6379 redis_db: int = 0 redis_password: str = \"\" class ConfigLoader: \"\"\"\u914d\u7f6e\u52a0\u8f7d\u5668\"\"\" def __init__(self, env_file: str = \".env\"): self.env_file = env_file self._load_env_file() def _load_env_file(self): \"\"\"\u52a0\u8f7d\u73af\u5883\u53d8\u91cf\u6587\u4ef6\"\"\" if Path(self.env_file).exists(): with open(self.env_file, 'r') as f: for line in f: line = line.strip() if line and not line.startswith('#') and '=' in line: key, value = line.split('=', 1) os.environ[key.strip()] = value.strip() def get_data_source_config(self) -> DataSourceConfig: \"\"\"\u83b7\u53d6\u6570\u636e\u6e90\u914d\u7f6e\"\"\" return DataSourceConfig( primary_source=os.getenv('PRIMARY_DATA_SOURCE', 'tushare'), fallback_source=os.getenv('FALLBACK_DATA_SOURCE', 'postgresql'), force_source=os.getenv('FORCE_DATA_SOURCE') ) def get_tushare_config(self) -> TushareConfig: \"\"\"\u83b7\u53d6Tushare\u914d\u7f6e\"\"\" token = os.getenv('TUSHARE_TOKEN') if not token: raise ValueError(\"TUSHARE_TOKEN is required\") return TushareConfig( token=token, api_url=os.getenv('TUSHARE_API_URL', 'http://api.tushare.pro'), timeout=int(os.getenv('TUSHARE_TIMEOUT', '30')), max_retries=int(os.getenv('TUSHARE_MAX_RETRIES', '3')), retry_delay=int(os.getenv('TUSHARE_RETRY_DELAY', '1')), daily_limit=int(os.getenv('TUSHARE_DAILY_LIMIT', '10000')), minute_limit=int(os.getenv('TUSHARE_MINUTE_LIMIT', '500')), enable_quota_check=os.getenv('TUSHARE_ENABLE_QUOTA_CHECK', 'true').lower() == 'true' ) def get_postgresql_config(self) -> PostgreSQLConfig: \"\"\"\u83b7\u53d6PostgreSQL\u914d\u7f6e\"\"\" return PostgreSQLConfig( host=os.getenv('POSTGRESQL_HOST', 'localhost'), port=int(os.getenv('POSTGRESQL_PORT', '5432')), database=os.getenv('POSTGRESQL_DATABASE', 'stock_valuation'), username=os.getenv('POSTGRESQL_USERNAME', 'postgres'), password=os.getenv('POSTGRESQL_PASSWORD', ''), pool_size=int(os.getenv('POSTGRESQL_POOL_SIZE', '10')), max_overflow=int(os.getenv('POSTGRESQL_MAX_OVERFLOW', '20')), pool_timeout=int(os.getenv('POSTGRESQL_POOL_TIMEOUT', '30')) ) def get_cache_config(self) -> CacheConfig: \"\"\"\u83b7\u53d6\u7f13\u5b58\u914d\u7f6e\"\"\" return CacheConfig( enable_memory=os.getenv('ENABLE_MEMORY_CACHE', 'true').lower() == 'true', enable_redis=os.getenv('ENABLE_REDIS_CACHE', 'true').lower() == 'true', enable_file=os.getenv('ENABLE_FILE_CACHE', 'true').lower() == 'true', file_cache_dir=os.getenv('FILE_CACHE_DIR', './cache'), redis_host=os.getenv('REDIS_HOST', 'localhost'), redis_port=int(os.getenv('REDIS_PORT', '6379')), redis_db=int(os.getenv('REDIS_DB', '0')), redis_password=os.getenv('REDIS_PASSWORD', '') ) def get_full_config(self) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u5b8c\u6574\u914d\u7f6e\"\"\" return { 'data_source': self.get_data_source_config(), 'tushare': self.get_tushare_config(), 'postgresql': self.get_postgresql_config(), 'cache': self.get_cache_config(), 'monitoring': { 'enabled': os.getenv('ENABLE_MONITORING', 'true').lower() == 'true', 'interval': int(os.getenv('MONITORING_INTERVAL', '30')) }, 'logging': { 'level': os.getenv('LOG_LEVEL', 'INFO'), 'format': os.getenv('LOG_FORMAT', '%(asctime)s - %(name)s - %(levelname)s - %(message)s'), 'file_path': os.getenv('LOG_FILE_PATH', './logs/stock_valuation.log') } } 8. \u90e8\u7f72\u65b9\u6848 8.1 Docker\u5bb9\u5668\u5316\u90e8\u7f72 # Dockerfile FROM python:3.9-slim # \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55 WORKDIR /app # \u5b89\u88c5\u7cfb\u7edf\u4f9d\u8d56 RUN apt-get update && apt-get install -y \\ gcc \\ g++ \\ && rm -rf /var/lib/apt/lists/* # \u590d\u5236\u4f9d\u8d56\u6587\u4ef6 COPY requirements.txt . # \u5b89\u88c5Python\u4f9d\u8d56 RUN pip install --no-cache-dir -r requirements.txt # \u590d\u5236\u5e94\u7528\u4ee3\u7801 COPY . . # \u521b\u5efa\u7f13\u5b58\u76ee\u5f55 RUN mkdir -p /app/cache /app/logs # \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf ENV PYTHONPATH=/app ENV PYTHONUNBUFFERED=1 # \u66b4\u9732\u7aef\u53e3 EXPOSE 8000 # \u5065\u5eb7\u68c0\u67e5 HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\ CMD curl -f http://localhost:8000/health || exit 1 # \u542f\u52a8\u547d\u4ee4 CMD [\"python\", \"-m\", \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] # docker-compose.yml version: '3.8' services: stock-valuation: build: . ports: - \"8000:8000\" environment: - PRIMARY_DATA_SOURCE=tushare - FALLBACK_DATA_SOURCE=postgresql - TUSHARE_TOKEN=${TUSHARE_TOKEN} - POSTGRESQL_HOST=postgres - REDIS_HOST=redis depends_on: - postgres - redis volumes: - ./cache:/app/cache - ./logs:/app/logs restart: unless-stopped networks: - stock-network postgres: image: postgres:13 environment: - POSTGRES_DB=stock_valuation - POSTGRES_USER=postgres - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} volumes: - postgres_data:/var/lib/postgresql/data - ./init.sql:/docker-entrypoint-initdb.d/init.sql ports: - \"5432:5432\" restart: unless-stopped networks: - stock-network redis: image: redis:6-alpine ports: - \"6379:6379\" volumes: - redis_data:/data restart: unless-stopped networks: - stock-network prometheus: image: prom/prometheus:latest ports: - \"9090:9090\" volumes: - ./prometheus.yml:/etc/prometheus/prometheus.yml - prometheus_data:/prometheus command: - '--config.file=/etc/prometheus/prometheus.yml' - '--storage.tsdb.path=/prometheus' - '--web.console.libraries=/etc/prometheus/console_libraries' - '--web.console.templates=/etc/prometheus/consoles' restart: unless-stopped networks: - stock-network grafana: image: grafana/grafana:latest ports: - \"3000:3000\" environment: - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD} volumes: - grafana_data:/var/lib/grafana - ./grafana/dashboards:/etc/grafana/provisioning/dashboards - ./grafana/datasources:/etc/grafana/provisioning/datasources restart: unless-stopped networks: - stock-network volumes: postgres_data: redis_data: prometheus_data: grafana_data: networks: stock-network: driver: bridge 8.2 Kubernetes\u90e8\u7f72 # k8s-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: stock-valuation labels: app: stock-valuation spec: replicas: 3 selector: matchLabels: app: stock-valuation template: metadata: labels: app: stock-valuation spec: containers: - name: stock-valuation image: stock-valuation:latest ports: - containerPort: 8000 env: - name: PRIMARY_DATA_SOURCE value: \"tushare\" - name: FALLBACK_DATA_SOURCE value: \"postgresql\" - name: TUSHARE_TOKEN valueFrom: secretKeyRef: name: tushare-secret key: token - name: POSTGRESQL_HOST value: \"postgres-service\" - name: REDIS_HOST value: \"redis-service\" resources: requests: memory: \"512Mi\" cpu: \"250m\" limits: memory: \"1Gi\" cpu: \"500m\" livenessProbe: httpGet: path: /health port: 8000 initialDelaySeconds: 30 periodSeconds: 10 readinessProbe: httpGet: path: /ready port: 8000 initialDelaySeconds: 5 periodSeconds: 5 volumeMounts: - name: cache-volume mountPath: /app/cache - name: logs-volume mountPath: /app/logs volumes: - name: cache-volume emptyDir: {} - name: logs-volume emptyDir: {} --- apiVersion: v1 kind: Service metadata: name: stock-valuation-service spec: selector: app: stock-valuation ports: - protocol: TCP port: 80 targetPort: 8000 type: LoadBalancer 9. \u5b9e\u65bd\u8ba1\u5212 9.1 \u5b9e\u65bd\u9636\u6bb5\u5212\u5206 \u7b2c\u4e00\u9636\u6bb5\uff1a\u57fa\u7840\u67b6\u6784\u642d\u5efa (1-2\u5468) \u76ee\u6807 : \u5efa\u7acb\u6df7\u5408\u6570\u636e\u6e90\u7684\u57fa\u7840\u6846\u67b6 \u4efb\u52a1\u6e05\u5355 : - [ ] \u521b\u5efaDataSourceManager\u6838\u5fc3\u7c7b - [ ] \u5b9e\u73b0TushareDataFetcher - [ ] \u5b9e\u73b0PostgreSQLDataFetcher - [ ] \u5efa\u7acb\u57fa\u7840\u7684\u914d\u7f6e\u7ba1\u7406\u7cfb\u7edf - [ ] \u5b9e\u73b0\u7b80\u5355\u7684\u6570\u636e\u6e90\u5207\u6362\u903b\u8f91 \u9a8c\u6536\u6807\u51c6 : - \u80fd\u591f\u901a\u8fc7\u914d\u7f6e\u5207\u6362\u6570\u636e\u6e90 - \u57fa\u672c\u7684\u6570\u636e\u83b7\u53d6\u529f\u80fd\u6b63\u5e38 - \u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387\u8fbe\u523080% \u7b2c\u4e8c\u9636\u6bb5\uff1a\u7f13\u5b58\u7cfb\u7edf\u5b9e\u73b0 (1-2\u5468) \u76ee\u6807 : \u5b9e\u73b0\u591a\u5c42\u7ea7\u7f13\u5b58\u673a\u5236 \u4efb\u52a1\u6e05\u5355 : - [ ] \u5b9e\u73b0CacheManager\u7c7b - [ ] \u96c6\u6210Redis\u7f13\u5b58 - [ ] \u5b9e\u73b0\u672c\u5730\u6587\u4ef6\u7f13\u5b58 - [ ] \u5efa\u7acb\u7f13\u5b58\u5931\u6548\u7b56\u7565 - [ ] \u4f18\u5316\u7f13\u5b58\u952e\u751f\u6210\u7b97\u6cd5 \u9a8c\u6536\u6807\u51c6 : - \u7f13\u5b58\u547d\u4e2d\u7387\u8fbe\u523070%\u4ee5\u4e0a - \u7f13\u5b58\u6570\u636e\u4e00\u81f4\u6027\u4fdd\u8bc1 - \u7f13\u5b58\u6027\u80fd\u6d4b\u8bd5\u901a\u8fc7 \u7b2c\u4e09\u9636\u6bb5\uff1a\u5065\u5eb7\u68c0\u67e5\u548c\u964d\u7ea7 (1\u5468) \u76ee\u6807 : \u5b9e\u73b0\u81ea\u52a8\u5065\u5eb7\u68c0\u67e5\u548c\u964d\u7ea7\u673a\u5236 \u4efb\u52a1\u6e05\u5355 : - [ ] \u5b9e\u73b0HealthChecker\u7c7b - [ ] \u5efa\u7acb\u6570\u636e\u6e90\u72b6\u6001\u76d1\u63a7 - [ ] \u5b9e\u73b0\u81ea\u52a8\u964d\u7ea7\u903b\u8f91 - [ ] \u5efa\u7acb\u6062\u590d\u673a\u5236 - [ ] \u5b9e\u73b0\u9519\u8bef\u5904\u7406\u7b56\u7565 \u9a8c\u6536\u6807\u51c6 : - \u6570\u636e\u6e90\u6545\u969c\u81ea\u52a8\u68c0\u6d4b - \u964d\u7ea7\u5207\u6362\u65f6\u95f4<5\u79d2 - \u6062\u590d\u673a\u5236\u6b63\u5e38\u5de5\u4f5c \u7b2c\u56db\u9636\u6bb5\uff1a\u76d1\u63a7\u544a\u8b66\u7cfb\u7edf (1\u5468) \u76ee\u6807 : \u5efa\u7acb\u5b8c\u6574\u7684\u76d1\u63a7\u544a\u8b66\u4f53\u7cfb \u4efb\u52a1\u6e05\u5355 : - [ ] \u5b9e\u73b0MetricsCollector - [ ] \u96c6\u6210Prometheus\u76d1\u63a7 - [ ] \u5efa\u7acb\u544a\u8b66\u89c4\u5219 - [ ] \u521b\u5efa\u76d1\u63a7\u4eea\u8868\u677f - [ ] \u5b9e\u73b0\u544a\u8b66\u901a\u77e5 \u9a8c\u6536\u6807\u51c6 : - \u5173\u952e\u6307\u6807\u76d1\u63a7\u8986\u76d6 - \u544a\u8b66\u53ca\u65f6\u51c6\u786e - \u4eea\u8868\u677f\u6570\u636e\u5b8c\u6574 \u7b2c\u4e94\u9636\u6bb5\uff1a\u6027\u80fd\u4f18\u5316\u548c\u6d4b\u8bd5 (1-2\u5468) \u76ee\u6807 : \u7cfb\u7edf\u6027\u80fd\u4f18\u5316\u548c\u5168\u9762\u6d4b\u8bd5 \u4efb\u52a1\u6e05\u5355 : - [ ] \u6027\u80fd\u538b\u529b\u6d4b\u8bd5 - [ ] \u5e76\u53d1\u5b89\u5168\u6d4b\u8bd5 - [ ] \u6545\u969c\u6062\u590d\u6d4b\u8bd5 - [ ] \u6570\u636e\u4e00\u81f4\u6027\u6d4b\u8bd5 - [ ] \u7528\u6237\u9a8c\u6536\u6d4b\u8bd5 \u9a8c\u6536\u6807\u51c6 : - \u7cfb\u7edf\u54cd\u5e94\u65f6\u95f4<2\u79d2 - \u5e76\u53d1\u7528\u6237\u6570>100 - \u6570\u636e\u51c6\u786e\u602799.9% - \u7cfb\u7edf\u53ef\u7528\u602799.5% 9.2 \u98ce\u9669\u63a7\u5236\u63aa\u65bd \u6280\u672f\u98ce\u9669 \u98ce\u9669\u9879 \u98ce\u9669\u7b49\u7ea7 \u5f71\u54cd \u5e94\u5bf9\u63aa\u65bd Tushare API\u53d8\u66f4 \u4e2d \u6570\u636e\u83b7\u53d6\u5931\u8d25 \u7248\u672c\u9501\u5b9a\u3001\u9002\u914d\u5c42\u8bbe\u8ba1 \u6570\u636e\u6e90\u540c\u6b65\u5ef6\u8fdf \u4e2d \u6570\u636e\u4e0d\u4e00\u81f4 \u65f6\u95f4\u6233\u6821\u9a8c\u3001\u589e\u91cf\u540c\u6b65 \u7f13\u5b58\u6570\u636e\u8fc7\u671f \u4f4e \u6027\u80fd\u4e0b\u964d \u667a\u80fd\u9884\u52a0\u8f7d\u3001\u8fc7\u671f\u7b56\u7565 \u5e76\u53d1\u8bbf\u95ee\u51b2\u7a81 \u4e2d \u6570\u636e\u9519\u8bef \u9501\u673a\u5236\u3001\u961f\u5217\u7ba1\u7406 \u4e1a\u52a1\u98ce\u9669 \u98ce\u9669\u9879 \u98ce\u9669\u7b49\u7ea7 \u5f71\u54cd \u5e94\u5bf9\u63aa\u65bd \u6570\u636e\u6e90\u6210\u672c\u4e0a\u5347 \u4e2d \u8fd0\u8425\u6210\u672c\u589e\u52a0 \u6210\u672c\u76d1\u63a7\u3001\u7528\u91cf\u4f18\u5316 \u670d\u52a1\u4e2d\u65ad \u9ad8 \u4e1a\u52a1\u505c\u6b62 \u591a\u91cd\u5907\u4efd\u3001\u5feb\u901f\u6062\u590d \u6570\u636e\u8d28\u91cf\u95ee\u9898 \u4e2d \u8ba1\u7b97\u9519\u8bef \u6570\u636e\u6821\u9a8c\u3001\u8d28\u91cf\u76d1\u63a7 9.3 \u6210\u529f\u6307\u6807 \u6280\u672f\u6307\u6807 \u7cfb\u7edf\u53ef\u7528\u6027 : \u226599.5% \u54cd\u5e94\u65f6\u95f4 : \u22642\u79d2 (95%\u8bf7\u6c42) \u7f13\u5b58\u547d\u4e2d\u7387 : \u226570% \u9519\u8bef\u7387 : \u22640.1% \u6570\u636e\u51c6\u786e\u6027 : \u226599.9% \u4e1a\u52a1\u6307\u6807 API\u8c03\u7528\u6210\u672c : \u964d\u4f4e60% \u6570\u636e\u66f4\u65b0\u9891\u7387 : \u63d0\u534750% \u7528\u6237\u6ee1\u610f\u5ea6 : \u226590% \u7cfb\u7edf\u7ef4\u62a4\u6210\u672c : \u964d\u4f4e40% 10. \u603b\u7ed3 10.1 \u67b6\u6784\u4f18\u52bf\u603b\u7ed3 \u9ad8\u53ef\u9760\u6027 : \u53cc\u6570\u636e\u6e90\u4fdd\u969c\uff0c\u5355\u70b9\u6545\u969c\u98ce\u9669\u964d\u4f4e90% \u9ad8\u6027\u80fd : \u591a\u5c42\u7f13\u5b58\u673a\u5236\uff0c\u6570\u636e\u8bbf\u95ee\u901f\u5ea6\u63d0\u534770% \u6210\u672c\u4f18\u5316 : \u667a\u80fdAPI\u8c03\u7528\u7ba1\u7406\uff0c\u6210\u672c\u964d\u4f4e60% \u6613\u7ef4\u62a4 : \u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u7ef4\u62a4\u6210\u672c\u964d\u4f4e40% \u53ef\u6269\u5c55 : \u652f\u6301\u65b0\u6570\u636e\u6e90\u63a5\u5165\uff0c\u6269\u5c55\u6027\u5f3a 10.2 \u5173\u952e\u6280\u672f\u521b\u65b0 \u667a\u80fd\u6570\u636e\u6e90\u8def\u7531 : \u57fa\u4e8e\u5065\u5eb7\u72b6\u6001\u548c\u6027\u80fd\u7684\u52a8\u6001\u9009\u62e9 \u591a\u5c42\u7ea7\u7f13\u5b58 : \u5185\u5b58+Redis+\u6587\u4ef6\u7684\u4e09\u7ea7\u7f13\u5b58\u4f53\u7cfb \u81ea\u52a8\u964d\u7ea7\u6062\u590d : \u65e0\u4eba\u5de5\u5e72\u9884\u7684\u6545\u969c\u5904\u7406\u673a\u5236 \u5b9e\u65f6\u76d1\u63a7\u544a\u8b66 : \u5168\u65b9\u4f4d\u7684\u7cfb\u7edf\u72b6\u6001\u76d1\u63a7 10.3 \u540e\u7eed\u53d1\u5c55\u65b9\u5411 AI\u9a71\u52a8\u4f18\u5316 : \u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u7f13\u5b58\u7b56\u7565\u4f18\u5316 \u591a\u4e91\u90e8\u7f72 : \u652f\u6301\u591a\u4e91\u73af\u5883\u7684\u6570\u636e\u6e90\u5206\u5e03 \u5b9e\u65f6\u6d41\u5904\u7406 : \u96c6\u6210\u6d41\u5f0f\u6570\u636e\u5904\u7406\u80fd\u529b \u8fb9\u7f18\u8ba1\u7b97 : \u652f\u6301\u8fb9\u7f18\u8282\u70b9\u7684\u6570\u636e\u7f13\u5b58 \u6587\u6863\u7248\u672c : v1.0 \u6700\u540e\u66f4\u65b0 : 2025\u5e741\u6708 \u4e0b\u6b21\u5ba1\u6838 : 2025\u5e743\u6708","title":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u6df7\u5408\u67b6\u6784\u8bbe\u8ba1\u6587\u6863"},{"location":"02_architecture/hybrid_architecture_design/#_1","text":"","title":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u6df7\u5408\u67b6\u6784\u8bbe\u8ba1\u6587\u6863"},{"location":"02_architecture/hybrid_architecture_design/#_2","text":"\u6587\u6863\u6807\u9898 : \u6df7\u5408\u6570\u636e\u6e90\u67b6\u6784\u8bbe\u8ba1 \u521b\u5efa\u65e5\u671f : 2025\u5e741\u6708 \u7248\u672c : v1.0 \u4f5c\u8005 : huliux \u5ba1\u6838\u72b6\u6001 : \u5f85\u5ba1\u6838","title":"\u6587\u6863\u4fe1\u606f"},{"location":"02_architecture/hybrid_architecture_design/#_3","text":"\u672c\u6587\u6863\u5df2\u6574\u5408\u4ee5\u4e0b\u5185\u5bb9\uff1a - \u539fmigration_checklist.md\u7684\u5b9e\u65bd\u6b65\u9aa4 - \u539ftushare_migration_technical_analysis.md\u7684\u6280\u672f\u7ec6\u8282 - \u539ftushare_postgresql_field_comparison.md\u7684\u5b57\u6bb5\u6620\u5c04","title":"\u6574\u7406\u8bf4\u660e"},{"location":"02_architecture/hybrid_architecture_design/#_4","text":"\u672c\u6587\u6863\u8be6\u7ec6\u63cf\u8ff0\u4e86\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u91c7\u7528\u7684 Tushare + PostgreSQL\u6df7\u5408\u67b6\u6784 \u8bbe\u8ba1\u65b9\u6848\u3002\u8be5\u67b6\u6784\u901a\u8fc7\u4e3b\u5907\u6570\u636e\u6e90\u6a21\u5f0f\uff0c\u663e\u8457\u63d0\u5347\u4e86\u7cfb\u7edf\u7684\u6570\u636e\u53ef\u9760\u6027\u3001\u6027\u80fd\u8868\u73b0\u548c\u6210\u672c\u6548\u76ca\u3002\u6838\u5fc3\u7279\u6027\u5305\u62ec\u667a\u80fd\u6570\u636e\u6e90\u5207\u6362\u3001\u591a\u5c42\u7ea7\u7f13\u5b58\u673a\u5236\u3001\u81ea\u52a8\u964d\u7ea7\u6062\u590d\u548c\u5168\u9762\u76d1\u63a7\u544a\u8b66\u3002","title":"\u6267\u884c\u6458\u8981"},{"location":"02_architecture/hybrid_architecture_design/#_5","text":"\ud83c\udfaf \u9ad8\u53ef\u9760\u6027 : \u53cc\u6570\u636e\u6e90\u4fdd\u969c\uff0c\u7cfb\u7edf\u53ef\u7528\u6027\u8fbe99.5% \u26a1 \u9ad8\u6027\u80fd : \u667a\u80fd\u7f13\u5b58\u673a\u5236\uff0c\u6570\u636e\u8bbf\u95ee\u901f\u5ea6\u63d0\u534770% \ud83d\udcb0 \u6210\u672c\u4f18\u5316 : API\u8c03\u7528\u6210\u672c\u964d\u4f4e60% \ud83d\udd04 \u7075\u6d3b\u5207\u6362 : \u652f\u6301\u914d\u7f6e\u5316\u6570\u636e\u6e90\u9009\u62e9 \ud83d\udcca \u5168\u9762\u76d1\u63a7 : \u5b9e\u65f6\u72b6\u6001\u76d1\u63a7\u548c\u667a\u80fd\u544a\u8b66","title":"\u67b6\u6784\u4f18\u52bf"},{"location":"02_architecture/hybrid_architecture_design/#2025-09-26","text":"\u7528\u6237\u8ba4\u8bc1\u7cfb\u7edf\u5b8c\u6574\u5b9e\u73b0 \uff1a \u6570\u636e\u5e93\u67b6\u6784\u4eceSQLite\u8fc1\u79fb\u81f3PostgreSQL/Supabase\uff0c\u89e3\u51b3\u5e76\u53d1\u9501\u95ee\u9898 \u5b8c\u6574\u7684\u7528\u6237\u6ce8\u518c\u3001\u767b\u5f55\u3001\u4f1a\u8bdd\u7ba1\u7406\u529f\u80fd \u8ba4\u8bc1\u4e2d\u95f4\u4ef6\u4fdd\u62a4\u654f\u611f\u529f\u80fd\u548c\u6570\u636e\u8bbf\u95ee \u5bc6\u7801\u54c8\u5e0c\u3001\u4f1a\u8bdd\u4ee4\u724c\u3001\u9632CSRF\u7b49\u5b89\u5168\u7279\u6027 \u667a\u80fd\u7f13\u5b58\u7cfb\u7edf\u91cd\u5927\u5347\u7ea7 \uff1a \u4f30\u503c\u7ed3\u679c\u5728\u7528\u6237\u4f1a\u8bdd\u95f4\u6301\u4e45\u4fdd\u5b58\uff0c\u5927\u5e45\u63d0\u5347\u7528\u6237\u4f53\u9a8c \u4f1a\u8bdd\u6062\u590d\u529f\u80fd\uff0c\u7528\u6237\u91cd\u65b0\u767b\u5f55\u540e\u53ef\u6062\u590d\u4e4b\u524d\u7684\u5206\u6790\u7ed3\u679c \u7f13\u5b58\u7b56\u7565\u4f18\u5316\uff0c\u5e73\u8861\u6027\u80fd\u4e0e\u6570\u636e\u4e00\u81f4\u6027 \u4fee\u590d\u7f13\u5b58\u7cfb\u7edf\u4e2dundefined\u53d8\u91cf\u7b49\u5173\u952e\u9519\u8bef \u524d\u7aef\u7528\u6237\u4f53\u9a8c\u4f18\u5316 \uff1a \u4f18\u5316\u754c\u9762\u5e03\u5c40\u548c\u53c2\u6570\u8bbe\u7f6e\u4f53\u9a8c\uff0c\u7b80\u5316\u64cd\u4f5c\u6d41\u7a0b \u589e\u5f3a\u7528\u6237\u53cd\u9988\u548c\u9519\u8bef\u5904\u7406\u673a\u5236 \u4fee\u590d\"\u4f30\u503c\u8ba1\u7b97\u51fa\u9519: None\"\u7b49\u9519\u8bef\u663e\u793a\u95ee\u9898 \u4f18\u5316\u6570\u636e\u5c55\u793a\u683c\u5f0f\u548c\u89c6\u89c9\u6548\u679c","title":"\u8fd1\u671f\u6539\u52a8\u6458\u8981\uff082025-09-26\uff09"},{"location":"02_architecture/hybrid_architecture_design/#2025-09-11","text":"\u670d\u52a1\u5c42\uff08ValuationService\uff09\u589e\u5f3a\uff1a \u5728\u57fa\u7840\u4f30\u503c\u4e0e\u654f\u611f\u6027\u4e24\u7c7b\u8def\u5f84\u7edf\u4e00\u7f16\u6392 Forecaster\u3001WACC\u3001\u7ec8\u503c\u4e0e\u73b0\u503c\u8ba1\u7b97\uff0c\u65b0\u589e\u670d\u52a1\u5185\u56de\u9000\u4e0e\u5b88\u62a4\u903b\u8f91\u3002 \u5f53 wacc_weight_mode=market \u5931\u8d25\u65f6\uff0c\u81ea\u52a8\u56de\u9000\u5230 target \u6743\u91cd\u5e76\u8bb0\u5f55\u8b66\u544a\uff0c\u907f\u514d 500\u3002 \u5bf9\u654f\u611f\u6027\u5355\u5143\u683c\uff1a \u8ba1\u7b97 EV/EBITDA (Terminal) \u4e0e implied_pgr \uff1b \u5f53 g \u2265 WACC \u65f6\u8df3\u8fc7\u8be5\u7ec4\u5408\uff1b dcf_implied_pe \u7f3a\u5931\u65f6\u6309\u57fa\u51c6 EPS \u56de\u586b\u3002 GDP \u4e0a\u9650\u63a7\u5236\uff1a\u670d\u52a1\u5c42\u5728\u8bf7\u6c42\u7ef4\u5ea6\u652f\u6301\u5f00\u5173\u4e0e\u4e0a\u9650\u503c\uff08\u4f18\u5148\u7ea7\u9ad8\u4e8e\u73af\u5883\u53d8\u91cf\uff09\uff1b\u7ec8\u503c\u8ba1\u7b97\u5668\u4ecd\u4fdd\u7559\u5e95\u5c42\u4e0a\u9650\u4e0e\u6709\u6548\u6027\u6821\u9a8c\uff0c\u53cc\u5c42\u4fdd\u62a4\u3002 LLM \u62a5\u544a\uff1a\u63d0\u793a\u6a21\u677f\u5f3a\u5316\uff08\u4ef7\u503c\u6295\u8d44\u5bfc\u5411\uff09\uff0c\u5e76\u5728\u54cd\u5e94\u4e2d\u643a\u5e26 debug_request_slice \uff08\u542b\u884c\u4e1a\u9884\u8bbe\u4e0e\u504f\u79bb\uff09\u4ee5\u4fbf\u5ba1\u8ba1\u3002","title":"\u5386\u53f2\u6539\u52a8\u6458\u8981\uff082025-09-11\uff09"},{"location":"02_architecture/hybrid_architecture_design/#1","text":"","title":"1. \u67b6\u6784\u6982\u89c8"},{"location":"02_architecture/hybrid_architecture_design/#11","text":"\u80a1\u7968\u4f30\u503c\u7cfb\u7edf\u6df7\u5408\u67b6\u6784 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u5e94\u7528\u5c42 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Streamlit\u524d\u7aef \u2502 \u2502 FastAPI \u2502 \u2502 \u4e1a\u52a1\u903b\u8f91\u5c42 \u2502 \u2502 \u2502 \u2502 (\u7528\u6237\u754c\u9762) \u2502 \u2502 (API\u670d\u52a1) \u2502 \u2502 (\u4f30\u503c\u8ba1\u7b97) \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u6570\u636e\u8bbf\u95ee\u62bd\u8c61\u5c42 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 DataSourceManager \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u914d\u7f6e\u7ba1\u7406 \u2502 \u2502 \u8def\u7531\u7b56\u7565 \u2502 \u2502 \u5065\u5eb7\u68c0\u67e5 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 (.env\u63a7\u5236) \u2502 \u2502 (\u667a\u80fd\u9009\u62e9) \u2502 \u2502 (\u72b6\u6001\u76d1\u63a7) \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u25bc \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u7f13\u5b58\u7ba1\u7406\u5c42 \u2502 \u2502 \u4e3b\u6570\u636e\u6e90 \u2502 \u2502 \u5907\u6570\u636e\u6e90 \u2502 \u2502 \u2502 \u2502 (Tushare) \u2502 \u2502 (PostgreSQL) \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 Redis\u7f13\u5b58 \u2502 \u2502 \u2502 \u2022 \u5b9e\u65f6\u6570\u636e \u2502 \u2502 \u2022 \u5386\u53f2\u6570\u636e \u2502 \u2502 \u2502 (\u70ed\u6570\u636e) \u2502 \u2502 \u2502 \u2022 \u9ad8\u9891\u66f4\u65b0 \u2502 \u2502 \u2022 \u7a33\u5b9a\u53ef\u9760 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2022 \u4e30\u5bcc\u5b57\u6bb5 \u2502 \u2502 \u2022 \u672c\u5730\u8bbf\u95ee \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2022 API\u9650\u6d41 \u2502 \u2502 \u2022 \u79bb\u7ebf\u53ef\u7528 \u2502 \u2502 \u2502 \u672c\u5730\u7f13\u5b58 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 (\u51b7\u6570\u636e) \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u25bc \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u76d1\u63a7\u544a\u8b66\u5c42 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502 \u2502 \u2502 \u6027\u80fd\u76d1\u63a7 \u2502 \u2502 \u5f02\u5e38\u544a\u8b66 \u2502\u2502 \u2502 \u2502 (\u54cd\u5e94\u65f6\u95f4/QPS) \u2502 \u2502 (\u6545\u969c\u68c0\u6d4b) \u2502\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"1.1 \u6574\u4f53\u67b6\u6784\u56fe"},{"location":"02_architecture/hybrid_architecture_design/#12","text":"\u7ec4\u4ef6 \u804c\u8d23 \u6280\u672f\u5b9e\u73b0 DataSourceManager \u6570\u636e\u6e90\u7ba1\u7406\u548c\u8def\u7531 Python\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f TushareDataFetcher Tushare\u6570\u636e\u83b7\u53d6 Tushare SDK + \u8fde\u63a5\u6c60 PostgreSQLDataFetcher PostgreSQL\u6570\u636e\u83b7\u53d6 SQLAlchemy + \u8fde\u63a5\u6c60 CacheManager \u7f13\u5b58\u7ba1\u7406 Redis + \u672c\u5730LRU\u7f13\u5b58 HealthChecker \u5065\u5eb7\u72b6\u6001\u68c0\u67e5 \u5b9a\u65f6\u4efb\u52a1 + \u72b6\u6001\u5b58\u50a8 MonitoringService \u76d1\u63a7\u544a\u8b66 Prometheus + \u81ea\u5b9a\u4e49\u6307\u6807","title":"1.2 \u6838\u5fc3\u7ec4\u4ef6\u8bf4\u660e"},{"location":"02_architecture/hybrid_architecture_design/#2","text":"","title":"2. \u6570\u636e\u6e90\u8bbe\u8ba1"},{"location":"02_architecture/hybrid_architecture_design/#21-tushare","text":"","title":"2.1 \u4e3b\u6570\u636e\u6e90 - Tushare"},{"location":"02_architecture/hybrid_architecture_design/#211","text":"\u6570\u636e\u6e90: Tushare Pro API \u7c7b\u578b: \u4e3b\u6570\u636e\u6e90 \u4f18\u52bf: - \u6570\u636e\u5b9e\u65f6\u6027\u5f3a\uff0cT+1\u66f4\u65b0 - \u6570\u636e\u5b57\u6bb5\u4e30\u5bcc\uff0c\u8986\u76d6\u5168\u9762 - \u6570\u636e\u8d28\u91cf\u9ad8\uff0c\u4e13\u4e1a\u91d1\u878d\u6570\u636e\u63d0\u4f9b\u5546 - API\u63a5\u53e3\u6807\u51c6\u5316\uff0c\u6613\u4e8e\u96c6\u6210 \u6311\u6218: - API\u8c03\u7528\u6709\u9891\u7387\u9650\u5236 - \u9700\u8981\u4ed8\u8d39\u79ef\u5206\uff0c\u6709\u6210\u672c\u8003\u8651 - \u7f51\u7edc\u4f9d\u8d56\uff0c\u5b58\u5728\u670d\u52a1\u4e2d\u65ad\u98ce\u9669 - \u6570\u636e\u91cf\u5927\u65f6\u54cd\u5e94\u8f83\u6162","title":"2.1.1 \u6570\u636e\u6e90\u7279\u6027"},{"location":"02_architecture/hybrid_architecture_design/#212-api","text":"# API\u914d\u989d\u7b56\u7565 API_QUOTA_CONFIG = { 'daily_limit': 10000, # \u65e5\u8c03\u7528\u9650\u5236 'minute_limit': 500, # \u5206\u949f\u8c03\u7528\u9650\u5236 'priority_apis': [ # \u4f18\u5148\u7ea7API\u5217\u8868 'stock_basic', # \u80a1\u7968\u57fa\u672c\u4fe1\u606f 'daily_basic', # \u6bcf\u65e5\u57fa\u672c\u9762 'income', # \u5229\u6da6\u8868 'balancesheet', # \u8d44\u4ea7\u8d1f\u503a\u8868 'cashflow' # \u73b0\u91d1\u6d41\u91cf\u8868 ], 'cache_duration': { # \u7f13\u5b58\u65f6\u957f\u914d\u7f6e 'stock_basic': 86400, # 24\u5c0f\u65f6 'daily_basic': 3600, # 1\u5c0f\u65f6 'financial_data': 43200 # 12\u5c0f\u65f6 } }","title":"2.1.2 API\u914d\u989d\u7ba1\u7406"},{"location":"02_architecture/hybrid_architecture_design/#22-postgresql","text":"","title":"2.2 \u5907\u6570\u636e\u6e90 - PostgreSQL"},{"location":"02_architecture/hybrid_architecture_design/#221","text":"\u6570\u636e\u6e90: PostgreSQL\u6570\u636e\u5e93 \u7c7b\u578b: \u5907\u6570\u636e\u6e90 \u4f18\u52bf: - \u672c\u5730\u8bbf\u95ee\uff0c\u54cd\u5e94\u901f\u5ea6\u5feb - \u65e0\u7f51\u7edc\u4f9d\u8d56\uff0c\u79bb\u7ebf\u53ef\u7528 - \u6570\u636e\u7a33\u5b9a\uff0c\u65e0API\u9650\u5236 - \u652f\u6301\u590d\u6742\u67e5\u8be2\u548c\u805a\u5408 \u5c40\u9650: - \u6570\u636e\u66f4\u65b0\u9891\u7387\u8f83\u4f4e - \u9700\u8981\u5b9a\u671f\u7ef4\u62a4\u548c\u66f4\u65b0 - \u5b58\u50a8\u6210\u672c\u968f\u6570\u636e\u91cf\u589e\u957f - \u6570\u636e\u5b57\u6bb5\u53ef\u80fd\u4e0d\u5982Tushare\u4e30\u5bcc","title":"2.2.1 \u6570\u636e\u6e90\u7279\u6027"},{"location":"02_architecture/hybrid_architecture_design/#222","text":"-- \u6838\u5fc3\u6570\u636e\u8868 CREATE TABLE stock_basic ( ts_code VARCHAR(10) PRIMARY KEY, symbol VARCHAR(10), name VARCHAR(50), area VARCHAR(20), industry VARCHAR(50), market VARCHAR(10), list_date DATE, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); CREATE TABLE daily_quotes ( id SERIAL PRIMARY KEY, ts_code VARCHAR(10), trade_date DATE, open DECIMAL(10,2), high DECIMAL(10,2), low DECIMAL(10,2), close DECIMAL(10,2), volume BIGINT, amount DECIMAL(15,2), updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(ts_code, trade_date) ); -- \u8d22\u52a1\u6570\u636e\u8868 CREATE TABLE financial_indicators ( id SERIAL PRIMARY KEY, ts_code VARCHAR(10), end_date DATE, pe DECIMAL(10,2), pb DECIMAL(10,2), ps DECIMAL(10,2), total_share DECIMAL(15,2), float_share DECIMAL(15,2), updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE(ts_code, end_date) );","title":"2.2.2 \u6570\u636e\u8868\u7ed3\u6784"},{"location":"02_architecture/hybrid_architecture_design/#23","text":"","title":"2.3 \u6570\u636e\u6e90\u6620\u5c04\u5173\u7cfb"},{"location":"02_architecture/hybrid_architecture_design/#231","text":"# \u6570\u636e\u6e90\u5b57\u6bb5\u6620\u5c04\u914d\u7f6e FIELD_MAPPING = { 'stock_basic': { 'tushare_fields': ['ts_code', 'symbol', 'name', 'area', 'industry', 'market', 'list_date'], 'postgresql_fields': ['ts_code', 'symbol', 'name', 'area', 'industry', 'market', 'list_date'], 'mapping': { # \u5b57\u6bb5\u540d\u6620\u5c04 'ts_code': 'ts_code', 'symbol': 'symbol', 'name': 'name', 'area': 'area', 'industry': 'industry', 'market': 'market', 'list_date': 'list_date' } }, 'daily_basic': { 'tushare_fields': ['ts_code', 'trade_date', 'close', 'pe', 'pb', 'total_share'], 'postgresql_fields': ['ts_code', 'trade_date', 'close', 'pe', 'pb', 'total_share'], 'unit_conversion': { # \u5355\u4f4d\u8f6c\u6362 'total_share': lambda x: x * 10000 if x else None # \u4e07\u80a1\u8f6c\u80a1 } } }","title":"2.3.1 \u5b57\u6bb5\u6620\u5c04\u8868"},{"location":"02_architecture/hybrid_architecture_design/#3","text":"","title":"3. \u6570\u636e\u6e90\u7ba1\u7406\u5668\u8bbe\u8ba1"},{"location":"02_architecture/hybrid_architecture_design/#31-datasourcemanager","text":"from abc import ABC, abstractmethod from enum import Enum from typing import Dict, Any, Optional, List import logging class DataSourceType(Enum): \"\"\"\u6570\u636e\u6e90\u7c7b\u578b\u679a\u4e3e\"\"\" TUSHARE = \"tushare\" POSTGRESQL = \"postgresql\" CACHE = \"cache\" class DataSourceStatus(Enum): \"\"\"\u6570\u636e\u6e90\u72b6\u6001\u679a\u4e3e\"\"\" HEALTHY = \"healthy\" DEGRADED = \"degraded\" UNAVAILABLE = \"unavailable\" class DataSourceManager: \"\"\"\u6570\u636e\u6e90\u7ba1\u7406\u5668 - \u6838\u5fc3\u534f\u8c03\u7c7b\"\"\" def __init__(self, config: Dict[str, Any]): self.config = config self.primary_source = DataSourceType.TUSHARE self.fallback_source = DataSourceType.POSTGRESQL self.data_fetchers = {} self.cache_manager = None self.health_checker = None self.logger = logging.getLogger(__name__) self._initialize_components() def _initialize_components(self): \"\"\"\u521d\u59cb\u5316\u5404\u7ec4\u4ef6\"\"\" # \u521d\u59cb\u5316\u6570\u636e\u83b7\u53d6\u5668 self.data_fetchers[DataSourceType.TUSHARE] = TushareDataFetcher(self.config) self.data_fetchers[DataSourceType.POSTGRESQL] = PostgreSQLDataFetcher(self.config) # \u521d\u59cb\u5316\u7f13\u5b58\u7ba1\u7406\u5668 self.cache_manager = CacheManager(self.config) # \u521d\u59cb\u5316\u5065\u5eb7\u68c0\u67e5\u5668 self.health_checker = HealthChecker(self.data_fetchers) async def get_data(self, data_type: str, params: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u6570\u636e - \u4e3b\u8981\u5165\u53e3\u65b9\u6cd5\"\"\" try: # 1. \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6 cached_data = await self.cache_manager.get(data_type, params) if cached_data: self.logger.info(f\"Cache hit for {data_type}\") return cached_data # 2. \u9009\u62e9\u6570\u636e\u6e90 data_source = await self._select_data_source(data_type) # 3. \u83b7\u53d6\u6570\u636e data = await self._fetch_data(data_source, data_type, params) # 4. \u7f13\u5b58\u6570\u636e await self.cache_manager.set(data_type, params, data) return data except Exception as e: self.logger.error(f\"Error getting data for {data_type}: {str(e)}\") return await self._handle_error(data_type, params, e) async def _select_data_source(self, data_type: str) -> DataSourceType: \"\"\"\u667a\u80fd\u6570\u636e\u6e90\u9009\u62e9\"\"\" # \u68c0\u67e5\u914d\u7f6e\u7684\u6570\u636e\u6e90\u504f\u597d if self.config.get('force_data_source'): return DataSourceType(self.config['force_data_source']) # \u68c0\u67e5\u4e3b\u6570\u636e\u6e90\u5065\u5eb7\u72b6\u6001 primary_status = await self.health_checker.check_health(self.primary_source) if primary_status == DataSourceStatus.HEALTHY: return self.primary_source # \u4e3b\u6570\u636e\u6e90\u4e0d\u53ef\u7528\uff0c\u4f7f\u7528\u5907\u7528\u6570\u636e\u6e90 fallback_status = await self.health_checker.check_health(self.fallback_source) if fallback_status in [DataSourceStatus.HEALTHY, DataSourceStatus.DEGRADED]: self.logger.warning(f\"Primary source unavailable, using fallback: {self.fallback_source}\") return self.fallback_source # \u6240\u6709\u6570\u636e\u6e90\u90fd\u4e0d\u53ef\u7528 raise Exception(\"All data sources are unavailable\") async def _fetch_data(self, source: DataSourceType, data_type: str, params: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u4ece\u6307\u5b9a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\"\"\" fetcher = self.data_fetchers[source] return await fetcher.fetch_data(data_type, params) async def _handle_error(self, data_type: str, params: Dict[str, Any], error: Exception) -> Dict[str, Any]: \"\"\"\u9519\u8bef\u5904\u7406\u548c\u964d\u7ea7\u7b56\u7565\"\"\" self.logger.error(f\"Data fetch failed: {str(error)}\") # \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\u8fc7\u671f\u6570\u636e stale_data = await self.cache_manager.get_stale(data_type, params) if stale_data: self.logger.warning(\"Returning stale cached data due to error\") return stale_data # \u8fd4\u56de\u9ed8\u8ba4\u503c\u6216\u629b\u51fa\u5f02\u5e38 raise error","title":"3.1 DataSourceManager\u6838\u5fc3\u7c7b"},{"location":"02_architecture/hybrid_architecture_design/#32","text":"import asyncio from datetime import datetime, timedelta from typing import Dict class HealthChecker: \"\"\"\u6570\u636e\u6e90\u5065\u5eb7\u68c0\u67e5\u5668\"\"\" def __init__(self, data_fetchers: Dict[DataSourceType, Any]): self.data_fetchers = data_fetchers self.health_status = {} self.last_check = {} self.check_interval = 60 # 60\u79d2\u68c0\u67e5\u95f4\u9694 self.logger = logging.getLogger(__name__) async def check_health(self, source: DataSourceType) -> DataSourceStatus: \"\"\"\u68c0\u67e5\u6570\u636e\u6e90\u5065\u5eb7\u72b6\u6001\"\"\" now = datetime.now() # \u68c0\u67e5\u662f\u5426\u9700\u8981\u91cd\u65b0\u68c0\u67e5 if (source not in self.last_check or now - self.last_check[source] > timedelta(seconds=self.check_interval)): await self._perform_health_check(source) self.last_check[source] = now return self.health_status.get(source, DataSourceStatus.UNAVAILABLE) async def _perform_health_check(self, source: DataSourceType): \"\"\"\u6267\u884c\u5065\u5eb7\u68c0\u67e5\"\"\" try: fetcher = self.data_fetchers[source] # \u6267\u884c\u7b80\u5355\u7684\u8fde\u63a5\u6d4b\u8bd5 start_time = datetime.now() await fetcher.health_check() response_time = (datetime.now() - start_time).total_seconds() # \u6839\u636e\u54cd\u5e94\u65f6\u95f4\u5224\u65ad\u72b6\u6001 if response_time < 2.0: self.health_status[source] = DataSourceStatus.HEALTHY elif response_time < 5.0: self.health_status[source] = DataSourceStatus.DEGRADED else: self.health_status[source] = DataSourceStatus.UNAVAILABLE self.logger.info(f\"{source} health check: {self.health_status[source]} (response_time: {response_time:.2f}s)\") except Exception as e: self.health_status[source] = DataSourceStatus.UNAVAILABLE self.logger.error(f\"{source} health check failed: {str(e)}\") async def start_monitoring(self): \"\"\"\u542f\u52a8\u6301\u7eed\u76d1\u63a7\"\"\" while True: for source in self.data_fetchers.keys(): await self._perform_health_check(source) await asyncio.sleep(self.check_interval)","title":"3.2 \u5065\u5eb7\u68c0\u67e5\u673a\u5236"},{"location":"02_architecture/hybrid_architecture_design/#4","text":"","title":"4. \u7f13\u5b58\u7b56\u7565\u8bbe\u8ba1"},{"location":"02_architecture/hybrid_architecture_design/#41","text":"\u7f13\u5b58\u5c42\u7ea7\u7ed3\u6784 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 L1: \u5185\u5b58\u7f13\u5b58 (LRU) \u2502 \u2502 \u2022 \u5bb9\u91cf: 1000\u4e2a\u5bf9\u8c61 \u2502 \u2502 \u2022 TTL: 5-30\u5206\u949f \u2502 \u2502 \u2022 \u7528\u9014: \u70ed\u70b9\u6570\u636e\u5feb\u901f\u8bbf\u95ee \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 L2: Redis\u7f13\u5b58 \u2502 \u2502 \u2022 \u5bb9\u91cf: 10GB \u2502 \u2502 \u2022 TTL: 1-24\u5c0f\u65f6 \u2502 \u2502 \u2022 \u7528\u9014: \u5206\u5e03\u5f0f\u7f13\u5b58\uff0c\u652f\u6301\u96c6\u7fa4 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u25bc \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 L3: \u672c\u5730\u6587\u4ef6\u7f13\u5b58 \u2502 \u2502 \u2022 \u5bb9\u91cf: 1GB \u2502 \u2502 \u2022 TTL: 1-7\u5929 \u2502 \u2502 \u2022 \u7528\u9014: \u51b7\u6570\u636e\u5b58\u50a8\uff0c\u79bb\u7ebf\u8bbf\u95ee \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"4.1 \u591a\u5c42\u7ea7\u7f13\u5b58\u67b6\u6784"},{"location":"02_architecture/hybrid_architecture_design/#42","text":"import json import hashlib from datetime import datetime, timedelta from typing import Any, Dict, Optional import redis from cachetools import LRUCache class CacheManager: \"\"\"\u591a\u5c42\u7ea7\u7f13\u5b58\u7ba1\u7406\u5668\"\"\" def __init__(self, config: Dict[str, Any]): self.config = config # L1: \u5185\u5b58\u7f13\u5b58 self.memory_cache = LRUCache(maxsize=1000) # L2: Redis\u7f13\u5b58 self.redis_client = redis.Redis( host=config.get('redis_host', 'localhost'), port=config.get('redis_port', 6379), db=config.get('redis_db', 0), decode_responses=True ) # L3: \u6587\u4ef6\u7f13\u5b58\u8def\u5f84 self.file_cache_dir = config.get('file_cache_dir', './cache') self.logger = logging.getLogger(__name__) def _generate_cache_key(self, data_type: str, params: Dict[str, Any]) -> str: \"\"\"\u751f\u6210\u7f13\u5b58\u952e\"\"\" # \u521b\u5efa\u53c2\u6570\u7684\u54c8\u5e0c\u503c params_str = json.dumps(params, sort_keys=True) params_hash = hashlib.md5(params_str.encode()).hexdigest()[:8] return f\"{data_type}:{params_hash}\" async def get(self, data_type: str, params: Dict[str, Any]) -> Optional[Dict[str, Any]]: \"\"\"\u83b7\u53d6\u7f13\u5b58\u6570\u636e\"\"\" cache_key = self._generate_cache_key(data_type, params) # L1: \u68c0\u67e5\u5185\u5b58\u7f13\u5b58 if cache_key in self.memory_cache: self.logger.debug(f\"L1 cache hit: {cache_key}\") return self.memory_cache[cache_key] # L2: \u68c0\u67e5Redis\u7f13\u5b58 try: redis_data = self.redis_client.get(cache_key) if redis_data: data = json.loads(redis_data) # \u56de\u586b\u5230L1\u7f13\u5b58 self.memory_cache[cache_key] = data self.logger.debug(f\"L2 cache hit: {cache_key}\") return data except Exception as e: self.logger.warning(f\"Redis cache error: {str(e)}\") # L3: \u68c0\u67e5\u6587\u4ef6\u7f13\u5b58 try: file_path = os.path.join(self.file_cache_dir, f\"{cache_key}.json\") if os.path.exists(file_path): with open(file_path, 'r') as f: data = json.load(f) # \u68c0\u67e5\u6587\u4ef6\u7f13\u5b58\u662f\u5426\u8fc7\u671f cache_time = datetime.fromisoformat(data.get('_cache_time', '1970-01-01')) if datetime.now() - cache_time < timedelta(days=7): # \u56de\u586b\u5230\u4e0a\u7ea7\u7f13\u5b58 self.memory_cache[cache_key] = data try: self.redis_client.setex(cache_key, 3600, json.dumps(data)) except: pass self.logger.debug(f\"L3 cache hit: {cache_key}\") return data except Exception as e: self.logger.warning(f\"File cache error: {str(e)}\") return None async def set(self, data_type: str, params: Dict[str, Any], data: Dict[str, Any]): \"\"\"\u8bbe\u7f6e\u7f13\u5b58\u6570\u636e\"\"\" cache_key = self._generate_cache_key(data_type, params) # \u6dfb\u52a0\u7f13\u5b58\u65f6\u95f4\u6233 data_with_timestamp = { **data, '_cache_time': datetime.now().isoformat(), '_data_type': data_type } # \u83b7\u53d6TTL\u914d\u7f6e ttl_config = self.config.get('cache_ttl', {}) memory_ttl = ttl_config.get(data_type, {}).get('memory', 1800) # 30\u5206\u949f redis_ttl = ttl_config.get(data_type, {}).get('redis', 3600) # 1\u5c0f\u65f6 # L1: \u8bbe\u7f6e\u5185\u5b58\u7f13\u5b58 self.memory_cache[cache_key] = data_with_timestamp # L2: \u8bbe\u7f6eRedis\u7f13\u5b58 try: self.redis_client.setex( cache_key, redis_ttl, json.dumps(data_with_timestamp) ) except Exception as e: self.logger.warning(f\"Redis cache set error: {str(e)}\") # L3: \u8bbe\u7f6e\u6587\u4ef6\u7f13\u5b58\uff08\u5f02\u6b65\uff09 asyncio.create_task(self._set_file_cache(cache_key, data_with_timestamp)) async def _set_file_cache(self, cache_key: str, data: Dict[str, Any]): \"\"\"\u5f02\u6b65\u8bbe\u7f6e\u6587\u4ef6\u7f13\u5b58\"\"\" try: os.makedirs(self.file_cache_dir, exist_ok=True) file_path = os.path.join(self.file_cache_dir, f\"{cache_key}.json\") with open(file_path, 'w') as f: json.dump(data, f, indent=2) except Exception as e: self.logger.warning(f\"File cache set error: {str(e)}\") async def get_stale(self, data_type: str, params: Dict[str, Any]) -> Optional[Dict[str, Any]]: \"\"\"\u83b7\u53d6\u8fc7\u671f\u7684\u7f13\u5b58\u6570\u636e\uff08\u7528\u4e8e\u964d\u7ea7\uff09\"\"\" cache_key = self._generate_cache_key(data_type, params) # \u5c1d\u8bd5\u4ece\u6587\u4ef6\u7f13\u5b58\u83b7\u53d6\uff0c\u5ffd\u7565\u8fc7\u671f\u65f6\u95f4 try: file_path = os.path.join(self.file_cache_dir, f\"{cache_key}.json\") if os.path.exists(file_path): with open(file_path, 'r') as f: data = json.load(f) self.logger.warning(f\"Returning stale cache data: {cache_key}\") return data except Exception as e: self.logger.error(f\"Stale cache retrieval error: {str(e)}\") return None async def invalidate(self, data_type: str, params: Dict[str, Any] = None): \"\"\"\u7f13\u5b58\u5931\u6548\"\"\" if params: # \u5931\u6548\u7279\u5b9a\u7f13\u5b58 cache_key = self._generate_cache_key(data_type, params) self._invalidate_key(cache_key) else: # \u5931\u6548\u6570\u636e\u7c7b\u578b\u7684\u6240\u6709\u7f13\u5b58 await self._invalidate_by_pattern(f\"{data_type}:*\") def _invalidate_key(self, cache_key: str): \"\"\"\u5931\u6548\u6307\u5b9a\u952e\u7684\u7f13\u5b58\"\"\" # L1: \u5185\u5b58\u7f13\u5b58 if cache_key in self.memory_cache: del self.memory_cache[cache_key] # L2: Redis\u7f13\u5b58 try: self.redis_client.delete(cache_key) except: pass # L3: \u6587\u4ef6\u7f13\u5b58 try: file_path = os.path.join(self.file_cache_dir, f\"{cache_key}.json\") if os.path.exists(file_path): os.remove(file_path) except: pass async def _invalidate_by_pattern(self, pattern: str): \"\"\"\u6309\u6a21\u5f0f\u5931\u6548\u7f13\u5b58\"\"\" # Redis\u6a21\u5f0f\u5339\u914d\u5220\u9664 try: keys = self.redis_client.keys(pattern) if keys: self.redis_client.delete(*keys) except: pass # \u5185\u5b58\u7f13\u5b58\u6a21\u5f0f\u5339\u914d\u5220\u9664 keys_to_delete = [k for k in self.memory_cache.keys() if k.startswith(pattern.replace('*', ''))] for key in keys_to_delete: del self.memory_cache[key]","title":"4.2 \u7f13\u5b58\u7ba1\u7406\u5668\u5b9e\u73b0"},{"location":"02_architecture/hybrid_architecture_design/#43","text":"# \u7f13\u5b58TTL\u914d\u7f6e CACHE_TTL_CONFIG = { 'stock_basic': { 'memory': 3600, # 1\u5c0f\u65f6 'redis': 86400, # 24\u5c0f\u65f6 'file': 604800 # 7\u5929 }, 'daily_basic': { 'memory': 1800, # 30\u5206\u949f 'redis': 3600, # 1\u5c0f\u65f6 'file': 86400 # 1\u5929 }, 'financial_data': { 'memory': 7200, # 2\u5c0f\u65f6 'redis': 43200, # 12\u5c0f\u65f6 'file': 2592000 # 30\u5929 }, 'real_time_quotes': { 'memory': 300, # 5\u5206\u949f 'redis': 900, # 15\u5206\u949f 'file': 3600 # 1\u5c0f\u65f6 } } # \u7f13\u5b58\u5931\u6548\u7b56\u7565 CACHE_INVALIDATION_RULES = { 'market_close': { 'time': '15:30', 'invalidate': ['daily_basic', 'real_time_quotes'] }, 'financial_report': { 'trigger': 'quarterly', 'invalidate': ['financial_data', 'valuation_metrics'] }, 'stock_list_update': { 'trigger': 'weekly', 'invalidate': ['stock_basic'] } }","title":"4.3 \u7f13\u5b58\u7b56\u7565\u914d\u7f6e"},{"location":"02_architecture/hybrid_architecture_design/#5","text":"","title":"5. \u9519\u8bef\u5904\u7406\u548c\u964d\u7ea7\u7b56\u7565"},{"location":"02_architecture/hybrid_architecture_design/#51","text":"from enum import Enum from typing import Dict, Any, Optional class ErrorType(Enum): \"\"\"\u9519\u8bef\u7c7b\u578b\u679a\u4e3e\"\"\" NETWORK_ERROR = \"network_error\" # \u7f51\u7edc\u8fde\u63a5\u9519\u8bef API_LIMIT_ERROR = \"api_limit_error\" # API\u9650\u6d41\u9519\u8bef DATA_NOT_FOUND = \"data_not_found\" # \u6570\u636e\u4e0d\u5b58\u5728 AUTHENTICATION_ERROR = \"auth_error\" # \u8ba4\u8bc1\u9519\u8bef SERVER_ERROR = \"server_error\" # \u670d\u52a1\u5668\u9519\u8bef TIMEOUT_ERROR = \"timeout_error\" # \u8d85\u65f6\u9519\u8bef DATA_FORMAT_ERROR = \"format_error\" # \u6570\u636e\u683c\u5f0f\u9519\u8bef class ErrorHandler: \"\"\"\u7edf\u4e00\u9519\u8bef\u5904\u7406\u5668\"\"\" def __init__(self, config: Dict[str, Any]): self.config = config self.retry_config = config.get('retry_config', {}) self.fallback_config = config.get('fallback_config', {}) self.logger = logging.getLogger(__name__) async def handle_error(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u7edf\u4e00\u9519\u8bef\u5904\u7406\u5165\u53e3\"\"\" error_type = self._classify_error(error) self.logger.error(f\"Error occurred: {error_type} - {str(error)}\") # \u6839\u636e\u9519\u8bef\u7c7b\u578b\u9009\u62e9\u5904\u7406\u7b56\u7565 if error_type == ErrorType.API_LIMIT_ERROR: return await self._handle_api_limit_error(error, context) elif error_type == ErrorType.NETWORK_ERROR: return await self._handle_network_error(error, context) elif error_type == ErrorType.TIMEOUT_ERROR: return await self._handle_timeout_error(error, context) elif error_type == ErrorType.DATA_NOT_FOUND: return await self._handle_data_not_found_error(error, context) else: return await self._handle_generic_error(error, context) def _classify_error(self, error: Exception) -> ErrorType: \"\"\"\u9519\u8bef\u5206\u7c7b\"\"\" error_msg = str(error).lower() if 'rate limit' in error_msg or 'quota exceeded' in error_msg: return ErrorType.API_LIMIT_ERROR elif 'network' in error_msg or 'connection' in error_msg: return ErrorType.NETWORK_ERROR elif 'timeout' in error_msg: return ErrorType.TIMEOUT_ERROR elif 'not found' in error_msg or 'no data' in error_msg: return ErrorType.DATA_NOT_FOUND elif 'authentication' in error_msg or 'unauthorized' in error_msg: return ErrorType.AUTHENTICATION_ERROR elif 'server error' in error_msg or '500' in error_msg: return ErrorType.SERVER_ERROR else: return ErrorType.DATA_FORMAT_ERROR async def _handle_api_limit_error(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u5904\u7406API\u9650\u6d41\u9519\u8bef\"\"\" # 1. \u5207\u6362\u5230\u5907\u7528\u6570\u636e\u6e90 self.logger.warning(\"API limit reached, switching to fallback data source\") # 2. \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\u6570\u636e cache_manager = context.get('cache_manager') if cache_manager: stale_data = await cache_manager.get_stale( context.get('data_type'), context.get('params') ) if stale_data: return stale_data # 3. \u4f7f\u7528\u5907\u7528\u6570\u636e\u6e90 fallback_fetcher = context.get('fallback_fetcher') if fallback_fetcher: return await fallback_fetcher.fetch_data( context.get('data_type'), context.get('params') ) raise error async def _handle_network_error(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u5904\u7406\u7f51\u7edc\u9519\u8bef\"\"\" # \u91cd\u8bd5\u673a\u5236 retry_count = context.get('retry_count', 0) max_retries = self.retry_config.get('max_retries', 3) if retry_count < max_retries: self.logger.info(f\"Network error, retrying ({retry_count + 1}/{max_retries})\") # \u6307\u6570\u9000\u907f wait_time = 2 ** retry_count await asyncio.sleep(wait_time) # \u66f4\u65b0\u91cd\u8bd5\u6b21\u6570 context['retry_count'] = retry_count + 1 # \u91cd\u65b0\u5c1d\u8bd5 fetcher = context.get('fetcher') if fetcher: return await fetcher.fetch_data( context.get('data_type'), context.get('params') ) # \u91cd\u8bd5\u5931\u8d25\uff0c\u4f7f\u7528\u964d\u7ea7\u7b56\u7565 return await self._apply_fallback_strategy(error, context) async def _apply_fallback_strategy(self, error: Exception, context: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u5e94\u7528\u964d\u7ea7\u7b56\u7565\"\"\" # 1. \u5c1d\u8bd5\u4ece\u7f13\u5b58\u83b7\u53d6\u8fc7\u671f\u6570\u636e cache_manager = context.get('cache_manager') if cache_manager: stale_data = await cache_manager.get_stale( context.get('data_type'), context.get('params') ) if stale_data: self.logger.warning(\"Using stale cached data as fallback\") return stale_data # 2. \u4f7f\u7528\u5907\u7528\u6570\u636e\u6e90 fallback_fetcher = context.get('fallback_fetcher') if fallback_fetcher: try: self.logger.warning(\"Using fallback data source\") return await fallback_fetcher.fetch_data( context.get('data_type'), context.get('params') ) except Exception as fallback_error: self.logger.error(f\"Fallback data source also failed: {str(fallback_error)}\") # 3. \u8fd4\u56de\u9ed8\u8ba4\u503c\u6216\u629b\u51fa\u5f02\u5e38 default_data = self.fallback_config.get('default_data', {}) if default_data: self.logger.warning(\"Using default fallback data\") return default_data # \u6240\u6709\u964d\u7ea7\u7b56\u7565\u90fd\u5931\u8d25\uff0c\u629b\u51fa\u539f\u59cb\u5f02\u5e38 raise error","title":"5.1 \u9519\u8bef\u5206\u7c7b\u548c\u5904\u7406"},{"location":"02_architecture/hybrid_architecture_design/#52","text":"import asyncio from datetime import datetime, timedelta from typing import Dict, List class AutoDegradationManager: \"\"\"\u81ea\u52a8\u964d\u7ea7\u7ba1\u7406\u5668\"\"\" def __init__(self, data_source_manager, config: Dict[str, Any]): self.data_source_manager = data_source_manager self.config = config self.degradation_rules = config.get('degradation_rules', {}) self.recovery_rules = config.get('recovery_rules', {}) self.current_degradations = {} self.logger = logging.getLogger(__name__) async def evaluate_degradation(self, source: DataSourceType, error_history: List[Dict]): \"\"\"\u8bc4\u4f30\u662f\u5426\u9700\u8981\u964d\u7ea7\"\"\" # \u5206\u6790\u9519\u8bef\u5386\u53f2 recent_errors = [e for e in error_history if datetime.now() - e['timestamp'] < timedelta(minutes=5)] error_rate = len(recent_errors) / max(1, len(error_history)) # \u68c0\u67e5\u964d\u7ea7\u6761\u4ef6 if error_rate > self.degradation_rules.get('error_rate_threshold', 0.5): await self._trigger_degradation(source, 'high_error_rate') # \u68c0\u67e5\u54cd\u5e94\u65f6\u95f4 avg_response_time = sum(e.get('response_time', 0) for e in recent_errors) / max(1, len(recent_errors)) if avg_response_time > self.degradation_rules.get('response_time_threshold', 10.0): await self._trigger_degradation(source, 'slow_response') async def _trigger_degradation(self, source: DataSourceType, reason: str): \"\"\"\u89e6\u53d1\u964d\u7ea7\"\"\" if source not in self.current_degradations: self.current_degradations[source] = { 'reason': reason, 'start_time': datetime.now(), 'attempts': 0 } self.logger.warning(f\"Triggering degradation for {source}: {reason}\") # \u901a\u77e5\u6570\u636e\u6e90\u7ba1\u7406\u5668 await self.data_source_manager.set_source_status(source, DataSourceStatus.DEGRADED) async def evaluate_recovery(self): \"\"\"\u8bc4\u4f30\u6062\u590d\u6761\u4ef6\"\"\" for source, degradation_info in list(self.current_degradations.items()): # \u68c0\u67e5\u964d\u7ea7\u65f6\u95f4 degradation_duration = datetime.now() - degradation_info['start_time'] min_degradation_time = timedelta(minutes=self.recovery_rules.get('min_degradation_minutes', 5)) if degradation_duration > min_degradation_time: # \u5c1d\u8bd5\u6062\u590d\u68c0\u67e5 if await self._test_recovery(source): await self._trigger_recovery(source) async def _test_recovery(self, source: DataSourceType) -> bool: \"\"\"\u6d4b\u8bd5\u6570\u636e\u6e90\u662f\u5426\u53ef\u4ee5\u6062\u590d\"\"\" try: # \u6267\u884c\u5065\u5eb7\u68c0\u67e5 health_checker = self.data_source_manager.health_checker status = await health_checker.check_health(source) return status == DataSourceStatus.HEALTHY except Exception as e: self.logger.debug(f\"Recovery test failed for {source}: {str(e)}\") return False async def _trigger_recovery(self, source: DataSourceType): \"\"\"\u89e6\u53d1\u6062\u590d\"\"\" if source in self.current_degradations: degradation_info = self.current_degradations[source] duration = datetime.now() - degradation_info['start_time'] self.logger.info(f\"Recovering {source} after {duration}\") # \u79fb\u9664\u964d\u7ea7\u72b6\u6001 del self.current_degradations[source] # \u901a\u77e5\u6570\u636e\u6e90\u7ba1\u7406\u5668 await self.data_source_manager.set_source_status(source, DataSourceStatus.HEALTHY) async def start_monitoring(self): \"\"\"\u542f\u52a8\u81ea\u52a8\u964d\u7ea7\u76d1\u63a7\"\"\" while True: try: await self.evaluate_recovery() await asyncio.sleep(30) # 30\u79d2\u68c0\u67e5\u4e00\u6b21 except Exception as e: self.logger.error(f\"Auto degradation monitoring error: {str(e)}\") await asyncio.sleep(60)","title":"5.2 \u81ea\u52a8\u964d\u7ea7\u548c\u6062\u590d\u673a\u5236"},{"location":"02_architecture/hybrid_architecture_design/#6","text":"","title":"6. \u76d1\u63a7\u548c\u544a\u8b66\u7cfb\u7edf"},{"location":"02_architecture/hybrid_architecture_design/#61","text":"from dataclasses import dataclass from typing import Dict, List, Optional from datetime import datetime import time @dataclass class MetricPoint: \"\"\"\u76d1\u63a7\u6307\u6807\u6570\u636e\u70b9\"\"\" name: str value: float timestamp: datetime tags: Dict[str, str] unit: str = \"\" class MetricsCollector: \"\"\"\u6307\u6807\u6536\u96c6\u5668\"\"\" def __init__(self, config: Dict[str, Any]): self.config = config self.metrics_buffer = [] self.counters = {} self.gauges = {} self.histograms = {} self.logger = logging.getLogger(__name__) def increment_counter(self, name: str, value: float = 1.0, tags: Dict[str, str] = None): \"\"\"\u9012\u589e\u8ba1\u6570\u5668\"\"\" key = self._make_key(name, tags or {}) self.counters[key] = self.counters.get(key, 0) + value self._add_metric_point(MetricPoint( name=name, value=self.counters[key], timestamp=datetime.now(), tags=tags or {}, unit=\"count\" )) def set_gauge(self, name: str, value: float, tags: Dict[str, str] = None): \"\"\"\u8bbe\u7f6e\u4eea\u8868\u503c\"\"\" key = self._make_key(name, tags or {}) self.gauges[key] = value self._add_metric_point(MetricPoint( name=name, value=value, timestamp=datetime.now(), tags=tags or {}, unit=\"gauge\" )) def record_histogram(self, name: str, value: float, tags: Dict[str, str] = None): \"\"\"\u8bb0\u5f55\u76f4\u65b9\u56fe\u503c\"\"\" key = self._make_key(name, tags or {}) if key not in self.histograms: self.histograms[key] = [] self.histograms[key].append(value) # \u4fdd\u6301\u6700\u8fd11000\u4e2a\u503c if len(self.histograms[key]) > 1000: self.histograms[key] = self.histograms[key][-1000:] self._add_metric_point(MetricPoint( name=name, value=value, timestamp=datetime.now(), tags=tags or {}, unit=\"histogram\" )) def _make_key(self, name: str, tags: Dict[str, str]) -> str: \"\"\"\u751f\u6210\u6307\u6807\u952e\"\"\" tag_str = \",\".join(f\"{k}={v}\" for k, v in sorted(tags.items())) return f\"{name}[{tag_str}]\" def _add_metric_point(self, metric: MetricPoint): \"\"\"\u6dfb\u52a0\u6307\u6807\u70b9\u5230\u7f13\u51b2\u533a\"\"\" self.metrics_buffer.append(metric) # \u7f13\u51b2\u533a\u6ee1\u65f6\u53d1\u9001 if len(self.metrics_buffer) >= 100: asyncio.create_task(self._flush_metrics()) async def _flush_metrics(self): \"\"\"\u5237\u65b0\u6307\u6807\u5230\u76d1\u63a7\u7cfb\u7edf\"\"\" if not self.metrics_buffer: return try: # \u53d1\u9001\u5230Prometheus\u6216\u5176\u4ed6\u76d1\u63a7\u7cfb\u7edf await self._send_to_monitoring_system(self.metrics_buffer) self.metrics_buffer.clear() except Exception as e: self.logger.error(f\"Failed to flush metrics: {str(e)}\") async def _send_to_monitoring_system(self, metrics: List[MetricPoint]): \"\"\"\u53d1\u9001\u6307\u6807\u5230\u76d1\u63a7\u7cfb\u7edf\"\"\" # \u8fd9\u91cc\u53ef\u4ee5\u96c6\u6210Prometheus\u3001InfluxDB\u7b49\u76d1\u63a7\u7cfb\u7edf for metric in metrics: self.logger.debug(f\"Metric: {metric.name}={metric.value} {metric.tags}\") # \u6838\u5fc3\u76d1\u63a7\u6307\u6807\u5b9a\u4e49 CORE_METRICS = { # \u6570\u636e\u6e90\u6307\u6807 'data_source_requests_total': 'Counter - \u6570\u636e\u6e90\u8bf7\u6c42\u603b\u6570', 'data_source_errors_total': 'Counter - \u6570\u636e\u6e90\u9519\u8bef\u603b\u6570', 'data_source_response_time': 'Histogram - \u6570\u636e\u6e90\u54cd\u5e94\u65f6\u95f4', 'data_source_availability': 'Gauge - \u6570\u636e\u6e90\u53ef\u7528\u6027', # \u7f13\u5b58\u6307\u6807 'cache_hits_total': 'Counter - \u7f13\u5b58\u547d\u4e2d\u603b\u6570', 'cache_misses_total': 'Counter - \u7f13\u5b58\u672a\u547d\u4e2d\u603b\u6570', 'cache_hit_ratio': 'Gauge - \u7f13\u5b58\u547d\u4e2d\u7387', 'cache_size_bytes': 'Gauge - \u7f13\u5b58\u5927\u5c0f', # API\u6307\u6807 'api_requests_total': 'Counter - API\u8bf7\u6c42\u603b\u6570', 'api_response_time': 'Histogram - API\u54cd\u5e94\u65f6\u95f4', 'api_errors_total': 'Counter - API\u9519\u8bef\u603b\u6570', # \u4e1a\u52a1\u6307\u6807 'valuation_calculations_total': 'Counter - \u4f30\u503c\u8ba1\u7b97\u603b\u6570', 'valuation_calculation_time': 'Histogram - \u4f30\u503c\u8ba1\u7b97\u65f6\u95f4', 'active_users': 'Gauge - \u6d3b\u8dc3\u7528\u6237\u6570' }","title":"6.1 \u76d1\u63a7\u6307\u6807\u5b9a\u4e49"},{"location":"02_architecture/hybrid_architecture_design/#62","text":"# \u544a\u8b66\u89c4\u5219\u914d\u7f6e alert_rules: # \u6570\u636e\u6e90\u544a\u8b66 data_source_down: metric: data_source_availability condition: \"< 0.5\" duration: \"2m\" severity: critical message: \"\u6570\u636e\u6e90 {{$labels.source}} \u4e0d\u53ef\u7528\" data_source_slow: metric: data_source_response_time condition: \"> 10\" duration: \"5m\" severity: warning message: \"\u6570\u636e\u6e90 {{$labels.source}} \u54cd\u5e94\u7f13\u6162\" high_error_rate: metric: rate(data_source_errors_total[5m]) condition: \"> 0.1\" duration: \"3m\" severity: warning message: \"\u6570\u636e\u6e90 {{$labels.source}} \u9519\u8bef\u7387\u8fc7\u9ad8\" # \u7f13\u5b58\u544a\u8b66 low_cache_hit_ratio: metric: cache_hit_ratio condition: \"< 0.7\" duration: \"10m\" severity: warning message: \"\u7f13\u5b58\u547d\u4e2d\u7387\u8fc7\u4f4e: {{$value}}\" cache_size_high: metric: cache_size_bytes condition: \"> 8GB\" duration: \"5m\" severity: warning message: \"\u7f13\u5b58\u4f7f\u7528\u91cf\u8fc7\u9ad8: {{$value}}\" # API\u544a\u8b66 api_response_slow: metric: api_response_time condition: \"> 5\" duration: \"5m\" severity: warning message: \"API\u54cd\u5e94\u65f6\u95f4\u8fc7\u957f: {{$value}}s\" api_error_rate_high: metric: rate(api_errors_total[5m]) condition: \"> 0.05\" duration: \"3m\" severity: critical message: \"API\u9519\u8bef\u7387\u8fc7\u9ad8: {{$value}}\" # \u544a\u8b66\u901a\u77e5\u914d\u7f6e notification_channels: email: enabled: true smtp_server: \"smtp.example.com\" recipients: [\"admin@example.com\"] slack: enabled: true webhook_url: \"https://hooks.slack.com/services/...\" channel: \"#alerts\" webhook: enabled: false url: \"https://api.example.com/alerts\"","title":"6.2 \u544a\u8b66\u89c4\u5219\u914d\u7f6e"},{"location":"02_architecture/hybrid_architecture_design/#63","text":"class MonitoringDashboard: \"\"\"\u76d1\u63a7\u4eea\u8868\u677f\"\"\" def __init__(self, metrics_collector: MetricsCollector): self.metrics_collector = metrics_collector self.dashboard_config = self._load_dashboard_config() def _load_dashboard_config(self) -> Dict[str, Any]: \"\"\"\u52a0\u8f7d\u4eea\u8868\u677f\u914d\u7f6e\"\"\" return { 'panels': [ { 'title': '\u6570\u636e\u6e90\u72b6\u6001', 'type': 'stat', 'metrics': ['data_source_availability'], 'thresholds': [0.9, 0.95] }, { 'title': '\u54cd\u5e94\u65f6\u95f4\u8d8b\u52bf', 'type': 'graph', 'metrics': ['data_source_response_time', 'api_response_time'], 'time_range': '1h' }, { 'title': '\u7f13\u5b58\u6027\u80fd', 'type': 'graph', 'metrics': ['cache_hit_ratio', 'cache_hits_total', 'cache_misses_total'], 'time_range': '6h' }, { 'title': '\u9519\u8bef\u7387\u7edf\u8ba1', 'type': 'graph', 'metrics': ['data_source_errors_total', 'api_errors_total'], 'time_range': '24h' }, { 'title': '\u4e1a\u52a1\u6307\u6807', 'type': 'stat', 'metrics': ['valuation_calculations_total', 'active_users'], 'time_range': '1d' } ] } async def get_dashboard_data(self) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u4eea\u8868\u677f\u6570\u636e\"\"\" dashboard_data = { 'timestamp': datetime.now().isoformat(), 'panels': [] } for panel_config in self.dashboard_config['panels']: panel_data = await self._get_panel_data(panel_config) dashboard_data['panels'].append(panel_data) return dashboard_data async def _get_panel_data(self, panel_config: Dict[str, Any]) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u9762\u677f\u6570\u636e\"\"\" panel_data = { 'title': panel_config['title'], 'type': panel_config['type'], 'data': [] } for metric_name in panel_config['metrics']: metric_data = await self._get_metric_data( metric_name, panel_config.get('time_range', '1h') ) panel_data['data'].append(metric_data) return panel_data async def _get_metric_data(self, metric_name: str, time_range: str) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u6307\u6807\u6570\u636e\"\"\" # \u8fd9\u91cc\u5e94\u8be5\u4ece\u65f6\u5e8f\u6570\u636e\u5e93\u67e5\u8be2\u6570\u636e # \u4e3a\u4e86\u793a\u4f8b\uff0c\u8fd4\u56de\u6a21\u62df\u6570\u636e return { 'metric': metric_name, 'values': [], # \u5b9e\u9645\u7684\u65f6\u5e8f\u6570\u636e\u70b9 'current_value': 0.0, 'trend': 'stable' # up, down, stable }","title":"6.3 \u76d1\u63a7\u4eea\u8868\u677f"},{"location":"02_architecture/hybrid_architecture_design/#7","text":"","title":"7. \u914d\u7f6e\u7ba1\u7406"},{"location":"02_architecture/hybrid_architecture_design/#71","text":"# .env \u914d\u7f6e\u6587\u4ef6 # ==================== \u6570\u636e\u6e90\u914d\u7f6e ==================== # \u4e3b\u6570\u636e\u6e90\u9009\u62e9: tushare, postgresql PRIMARY_DATA_SOURCE=tushare # \u5907\u7528\u6570\u636e\u6e90\u9009\u62e9: postgresql, tushare FALLBACK_DATA_SOURCE=postgresql # \u5f3a\u5236\u4f7f\u7528\u6307\u5b9a\u6570\u636e\u6e90 (\u53ef\u9009): tushare, postgresql # FORCE_DATA_SOURCE=tushare # ==================== Tushare\u914d\u7f6e ==================== TUSHARE_TOKEN=your_tushare_token_here TUSHARE_API_URL=http://api.tushare.pro TUSHARE_TIMEOUT=30 TUSHARE_MAX_RETRIES=3 TUSHARE_RETRY_DELAY=1 # API\u914d\u989d\u7ba1\u7406 TUSHARE_DAILY_LIMIT=10000 TUSHARE_MINUTE_LIMIT=500 TUSHARE_ENABLE_QUOTA_CHECK=true # ==================== PostgreSQL\u914d\u7f6e ==================== POSTGRESQL_HOST=localhost POSTGRESQL_PORT=5432 POSTGRESQL_DATABASE=stock_valuation POSTGRESQL_USERNAME=postgres POSTGRESQL_PASSWORD=your_password_here POSTGRESQL_POOL_SIZE=10 POSTGRESQL_MAX_OVERFLOW=20 POSTGRESQL_POOL_TIMEOUT=30 # ==================== Redis\u7f13\u5b58\u914d\u7f6e ==================== REDIS_HOST=localhost REDIS_PORT=6379 REDIS_DB=0 REDIS_PASSWORD= REDIS_MAX_CONNECTIONS=10 REDIS_SOCKET_TIMEOUT=5 # ==================== \u7f13\u5b58\u7b56\u7565\u914d\u7f6e ==================== # \u542f\u7528\u7f13\u5b58\u5c42\u7ea7: memory, redis, file ENABLE_MEMORY_CACHE=true ENABLE_REDIS_CACHE=true ENABLE_FILE_CACHE=true # \u7f13\u5b58\u76ee\u5f55 FILE_CACHE_DIR=./cache # \u7f13\u5b58TTL (\u79d2) CACHE_TTL_STOCK_BASIC_MEMORY=3600 CACHE_TTL_STOCK_BASIC_REDIS=86400 CACHE_TTL_DAILY_BASIC_MEMORY=1800 CACHE_TTL_DAILY_BASIC_REDIS=3600 CACHE_TTL_FINANCIAL_DATA_MEMORY=7200 CACHE_TTL_FINANCIAL_DATA_REDIS=43200 # ==================== \u5065\u5eb7\u68c0\u67e5\u914d\u7f6e ==================== HEALTH_CHECK_INTERVAL=60 HEALTH_CHECK_TIMEOUT=10 HEALTH_CHECK_RETRY_COUNT=3 # \u5065\u5eb7\u72b6\u6001\u9608\u503c HEALTH_RESPONSE_TIME_HEALTHY=2.0 HEALTH_RESPONSE_TIME_DEGRADED=5.0 # ==================== \u964d\u7ea7\u7b56\u7565\u914d\u7f6e ==================== # \u542f\u7528\u81ea\u52a8\u964d\u7ea7 ENABLE_AUTO_DEGRADATION=true # \u964d\u7ea7\u89e6\u53d1\u6761\u4ef6 DEGRADATION_ERROR_RATE_THRESHOLD=0.5 DEGRADATION_RESPONSE_TIME_THRESHOLD=10.0 DEGRADATION_MIN_DURATION_MINUTES=5 # \u6062\u590d\u6761\u4ef6 RECOVERY_SUCCESS_RATE_THRESHOLD=0.9 RECOVERY_TEST_INTERVAL=30 # ==================== \u76d1\u63a7\u544a\u8b66\u914d\u7f6e ==================== # \u542f\u7528\u76d1\u63a7 ENABLE_MONITORING=true MONITORING_INTERVAL=30 # Prometheus\u914d\u7f6e PROMETHEUS_ENABLED=false PROMETHEUS_HOST=localhost PROMETHEUS_PORT=9090 # \u544a\u8b66\u914d\u7f6e ALERT_EMAIL_ENABLED=true ALERT_EMAIL_SMTP_SERVER=smtp.example.com ALERT_EMAIL_RECIPIENTS=admin@example.com ALERT_SLACK_ENABLED=false ALERT_SLACK_WEBHOOK_URL= # ==================== \u65e5\u5fd7\u914d\u7f6e ==================== LOG_LEVEL=INFO LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s LOG_FILE_PATH=./logs/stock_valuation.log LOG_MAX_SIZE=100MB LOG_BACKUP_COUNT=5 # ==================== \u6027\u80fd\u914d\u7f6e ==================== # \u8fde\u63a5\u6c60\u914d\u7f6e CONNECTION_POOL_SIZE=10 CONNECTION_POOL_MAX_OVERFLOW=20 CONNECTION_POOL_TIMEOUT=30 # \u5f02\u6b65\u914d\u7f6e ASYNC_WORKER_COUNT=4 ASYNC_QUEUE_SIZE=1000 # \u9650\u6d41\u914d\u7f6e RATE_LIMIT_ENABLED=true RATE_LIMIT_REQUESTS_PER_MINUTE=1000 RATE_LIMIT_BURST_SIZE=100","title":"7.1 \u73af\u5883\u914d\u7f6e\u6587\u4ef6"},{"location":"02_architecture/hybrid_architecture_design/#72","text":"import os from typing import Dict, Any, Optional from dataclasses import dataclass from pathlib import Path @dataclass class DataSourceConfig: \"\"\"\u6570\u636e\u6e90\u914d\u7f6e\"\"\" primary_source: str fallback_source: str force_source: Optional[str] = None @dataclass class TushareConfig: \"\"\"Tushare\u914d\u7f6e\"\"\" token: str api_url: str = \"http://api.tushare.pro\" timeout: int = 30 max_retries: int = 3 retry_delay: int = 1 daily_limit: int = 10000 minute_limit: int = 500 enable_quota_check: bool = True @dataclass class PostgreSQLConfig: \"\"\"PostgreSQL\u914d\u7f6e\"\"\" host: str = \"localhost\" port: int = 5432 database: str = \"stock_valuation\" username: str = \"postgres\" password: str = \"\" pool_size: int = 10 max_overflow: int = 20 pool_timeout: int = 30 @dataclass class CacheConfig: \"\"\"\u7f13\u5b58\u914d\u7f6e\"\"\" enable_memory: bool = True enable_redis: bool = True enable_file: bool = True file_cache_dir: str = \"./cache\" redis_host: str = \"localhost\" redis_port: int = 6379 redis_db: int = 0 redis_password: str = \"\" class ConfigLoader: \"\"\"\u914d\u7f6e\u52a0\u8f7d\u5668\"\"\" def __init__(self, env_file: str = \".env\"): self.env_file = env_file self._load_env_file() def _load_env_file(self): \"\"\"\u52a0\u8f7d\u73af\u5883\u53d8\u91cf\u6587\u4ef6\"\"\" if Path(self.env_file).exists(): with open(self.env_file, 'r') as f: for line in f: line = line.strip() if line and not line.startswith('#') and '=' in line: key, value = line.split('=', 1) os.environ[key.strip()] = value.strip() def get_data_source_config(self) -> DataSourceConfig: \"\"\"\u83b7\u53d6\u6570\u636e\u6e90\u914d\u7f6e\"\"\" return DataSourceConfig( primary_source=os.getenv('PRIMARY_DATA_SOURCE', 'tushare'), fallback_source=os.getenv('FALLBACK_DATA_SOURCE', 'postgresql'), force_source=os.getenv('FORCE_DATA_SOURCE') ) def get_tushare_config(self) -> TushareConfig: \"\"\"\u83b7\u53d6Tushare\u914d\u7f6e\"\"\" token = os.getenv('TUSHARE_TOKEN') if not token: raise ValueError(\"TUSHARE_TOKEN is required\") return TushareConfig( token=token, api_url=os.getenv('TUSHARE_API_URL', 'http://api.tushare.pro'), timeout=int(os.getenv('TUSHARE_TIMEOUT', '30')), max_retries=int(os.getenv('TUSHARE_MAX_RETRIES', '3')), retry_delay=int(os.getenv('TUSHARE_RETRY_DELAY', '1')), daily_limit=int(os.getenv('TUSHARE_DAILY_LIMIT', '10000')), minute_limit=int(os.getenv('TUSHARE_MINUTE_LIMIT', '500')), enable_quota_check=os.getenv('TUSHARE_ENABLE_QUOTA_CHECK', 'true').lower() == 'true' ) def get_postgresql_config(self) -> PostgreSQLConfig: \"\"\"\u83b7\u53d6PostgreSQL\u914d\u7f6e\"\"\" return PostgreSQLConfig( host=os.getenv('POSTGRESQL_HOST', 'localhost'), port=int(os.getenv('POSTGRESQL_PORT', '5432')), database=os.getenv('POSTGRESQL_DATABASE', 'stock_valuation'), username=os.getenv('POSTGRESQL_USERNAME', 'postgres'), password=os.getenv('POSTGRESQL_PASSWORD', ''), pool_size=int(os.getenv('POSTGRESQL_POOL_SIZE', '10')), max_overflow=int(os.getenv('POSTGRESQL_MAX_OVERFLOW', '20')), pool_timeout=int(os.getenv('POSTGRESQL_POOL_TIMEOUT', '30')) ) def get_cache_config(self) -> CacheConfig: \"\"\"\u83b7\u53d6\u7f13\u5b58\u914d\u7f6e\"\"\" return CacheConfig( enable_memory=os.getenv('ENABLE_MEMORY_CACHE', 'true').lower() == 'true', enable_redis=os.getenv('ENABLE_REDIS_CACHE', 'true').lower() == 'true', enable_file=os.getenv('ENABLE_FILE_CACHE', 'true').lower() == 'true', file_cache_dir=os.getenv('FILE_CACHE_DIR', './cache'), redis_host=os.getenv('REDIS_HOST', 'localhost'), redis_port=int(os.getenv('REDIS_PORT', '6379')), redis_db=int(os.getenv('REDIS_DB', '0')), redis_password=os.getenv('REDIS_PASSWORD', '') ) def get_full_config(self) -> Dict[str, Any]: \"\"\"\u83b7\u53d6\u5b8c\u6574\u914d\u7f6e\"\"\" return { 'data_source': self.get_data_source_config(), 'tushare': self.get_tushare_config(), 'postgresql': self.get_postgresql_config(), 'cache': self.get_cache_config(), 'monitoring': { 'enabled': os.getenv('ENABLE_MONITORING', 'true').lower() == 'true', 'interval': int(os.getenv('MONITORING_INTERVAL', '30')) }, 'logging': { 'level': os.getenv('LOG_LEVEL', 'INFO'), 'format': os.getenv('LOG_FORMAT', '%(asctime)s - %(name)s - %(levelname)s - %(message)s'), 'file_path': os.getenv('LOG_FILE_PATH', './logs/stock_valuation.log') } }","title":"7.2 \u914d\u7f6e\u52a0\u8f7d\u5668"},{"location":"02_architecture/hybrid_architecture_design/#8","text":"","title":"8. \u90e8\u7f72\u65b9\u6848"},{"location":"02_architecture/hybrid_architecture_design/#81-docker","text":"# Dockerfile FROM python:3.9-slim # \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55 WORKDIR /app # \u5b89\u88c5\u7cfb\u7edf\u4f9d\u8d56 RUN apt-get update && apt-get install -y \\ gcc \\ g++ \\ && rm -rf /var/lib/apt/lists/* # \u590d\u5236\u4f9d\u8d56\u6587\u4ef6 COPY requirements.txt . # \u5b89\u88c5Python\u4f9d\u8d56 RUN pip install --no-cache-dir -r requirements.txt # \u590d\u5236\u5e94\u7528\u4ee3\u7801 COPY . . # \u521b\u5efa\u7f13\u5b58\u76ee\u5f55 RUN mkdir -p /app/cache /app/logs # \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf ENV PYTHONPATH=/app ENV PYTHONUNBUFFERED=1 # \u66b4\u9732\u7aef\u53e3 EXPOSE 8000 # \u5065\u5eb7\u68c0\u67e5 HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\ CMD curl -f http://localhost:8000/health || exit 1 # \u542f\u52a8\u547d\u4ee4 CMD [\"python\", \"-m\", \"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] # docker-compose.yml version: '3.8' services: stock-valuation: build: . ports: - \"8000:8000\" environment: - PRIMARY_DATA_SOURCE=tushare - FALLBACK_DATA_SOURCE=postgresql - TUSHARE_TOKEN=${TUSHARE_TOKEN} - POSTGRESQL_HOST=postgres - REDIS_HOST=redis depends_on: - postgres - redis volumes: - ./cache:/app/cache - ./logs:/app/logs restart: unless-stopped networks: - stock-network postgres: image: postgres:13 environment: - POSTGRES_DB=stock_valuation - POSTGRES_USER=postgres - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} volumes: - postgres_data:/var/lib/postgresql/data - ./init.sql:/docker-entrypoint-initdb.d/init.sql ports: - \"5432:5432\" restart: unless-stopped networks: - stock-network redis: image: redis:6-alpine ports: - \"6379:6379\" volumes: - redis_data:/data restart: unless-stopped networks: - stock-network prometheus: image: prom/prometheus:latest ports: - \"9090:9090\" volumes: - ./prometheus.yml:/etc/prometheus/prometheus.yml - prometheus_data:/prometheus command: - '--config.file=/etc/prometheus/prometheus.yml' - '--storage.tsdb.path=/prometheus' - '--web.console.libraries=/etc/prometheus/console_libraries' - '--web.console.templates=/etc/prometheus/consoles' restart: unless-stopped networks: - stock-network grafana: image: grafana/grafana:latest ports: - \"3000:3000\" environment: - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD} volumes: - grafana_data:/var/lib/grafana - ./grafana/dashboards:/etc/grafana/provisioning/dashboards - ./grafana/datasources:/etc/grafana/provisioning/datasources restart: unless-stopped networks: - stock-network volumes: postgres_data: redis_data: prometheus_data: grafana_data: networks: stock-network: driver: bridge","title":"8.1 Docker\u5bb9\u5668\u5316\u90e8\u7f72"},{"location":"02_architecture/hybrid_architecture_design/#82-kubernetes","text":"# k8s-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: stock-valuation labels: app: stock-valuation spec: replicas: 3 selector: matchLabels: app: stock-valuation template: metadata: labels: app: stock-valuation spec: containers: - name: stock-valuation image: stock-valuation:latest ports: - containerPort: 8000 env: - name: PRIMARY_DATA_SOURCE value: \"tushare\" - name: FALLBACK_DATA_SOURCE value: \"postgresql\" - name: TUSHARE_TOKEN valueFrom: secretKeyRef: name: tushare-secret key: token - name: POSTGRESQL_HOST value: \"postgres-service\" - name: REDIS_HOST value: \"redis-service\" resources: requests: memory: \"512Mi\" cpu: \"250m\" limits: memory: \"1Gi\" cpu: \"500m\" livenessProbe: httpGet: path: /health port: 8000 initialDelaySeconds: 30 periodSeconds: 10 readinessProbe: httpGet: path: /ready port: 8000 initialDelaySeconds: 5 periodSeconds: 5 volumeMounts: - name: cache-volume mountPath: /app/cache - name: logs-volume mountPath: /app/logs volumes: - name: cache-volume emptyDir: {} - name: logs-volume emptyDir: {} --- apiVersion: v1 kind: Service metadata: name: stock-valuation-service spec: selector: app: stock-valuation ports: - protocol: TCP port: 80 targetPort: 8000 type: LoadBalancer","title":"8.2 Kubernetes\u90e8\u7f72"},{"location":"02_architecture/hybrid_architecture_design/#9","text":"","title":"9. \u5b9e\u65bd\u8ba1\u5212"},{"location":"02_architecture/hybrid_architecture_design/#91","text":"","title":"9.1 \u5b9e\u65bd\u9636\u6bb5\u5212\u5206"},{"location":"02_architecture/hybrid_architecture_design/#1-2","text":"\u76ee\u6807 : \u5efa\u7acb\u6df7\u5408\u6570\u636e\u6e90\u7684\u57fa\u7840\u6846\u67b6 \u4efb\u52a1\u6e05\u5355 : - [ ] \u521b\u5efaDataSourceManager\u6838\u5fc3\u7c7b - [ ] \u5b9e\u73b0TushareDataFetcher - [ ] \u5b9e\u73b0PostgreSQLDataFetcher - [ ] \u5efa\u7acb\u57fa\u7840\u7684\u914d\u7f6e\u7ba1\u7406\u7cfb\u7edf - [ ] \u5b9e\u73b0\u7b80\u5355\u7684\u6570\u636e\u6e90\u5207\u6362\u903b\u8f91 \u9a8c\u6536\u6807\u51c6 : - \u80fd\u591f\u901a\u8fc7\u914d\u7f6e\u5207\u6362\u6570\u636e\u6e90 - \u57fa\u672c\u7684\u6570\u636e\u83b7\u53d6\u529f\u80fd\u6b63\u5e38 - \u5355\u5143\u6d4b\u8bd5\u8986\u76d6\u7387\u8fbe\u523080%","title":"\u7b2c\u4e00\u9636\u6bb5\uff1a\u57fa\u7840\u67b6\u6784\u642d\u5efa (1-2\u5468)"},{"location":"02_architecture/hybrid_architecture_design/#1-2_1","text":"\u76ee\u6807 : \u5b9e\u73b0\u591a\u5c42\u7ea7\u7f13\u5b58\u673a\u5236 \u4efb\u52a1\u6e05\u5355 : - [ ] \u5b9e\u73b0CacheManager\u7c7b - [ ] \u96c6\u6210Redis\u7f13\u5b58 - [ ] \u5b9e\u73b0\u672c\u5730\u6587\u4ef6\u7f13\u5b58 - [ ] \u5efa\u7acb\u7f13\u5b58\u5931\u6548\u7b56\u7565 - [ ] \u4f18\u5316\u7f13\u5b58\u952e\u751f\u6210\u7b97\u6cd5 \u9a8c\u6536\u6807\u51c6 : - \u7f13\u5b58\u547d\u4e2d\u7387\u8fbe\u523070%\u4ee5\u4e0a - \u7f13\u5b58\u6570\u636e\u4e00\u81f4\u6027\u4fdd\u8bc1 - \u7f13\u5b58\u6027\u80fd\u6d4b\u8bd5\u901a\u8fc7","title":"\u7b2c\u4e8c\u9636\u6bb5\uff1a\u7f13\u5b58\u7cfb\u7edf\u5b9e\u73b0 (1-2\u5468)"},{"location":"02_architecture/hybrid_architecture_design/#1_1","text":"\u76ee\u6807 : \u5b9e\u73b0\u81ea\u52a8\u5065\u5eb7\u68c0\u67e5\u548c\u964d\u7ea7\u673a\u5236 \u4efb\u52a1\u6e05\u5355 : - [ ] \u5b9e\u73b0HealthChecker\u7c7b - [ ] \u5efa\u7acb\u6570\u636e\u6e90\u72b6\u6001\u76d1\u63a7 - [ ] \u5b9e\u73b0\u81ea\u52a8\u964d\u7ea7\u903b\u8f91 - [ ] \u5efa\u7acb\u6062\u590d\u673a\u5236 - [ ] \u5b9e\u73b0\u9519\u8bef\u5904\u7406\u7b56\u7565 \u9a8c\u6536\u6807\u51c6 : - \u6570\u636e\u6e90\u6545\u969c\u81ea\u52a8\u68c0\u6d4b - \u964d\u7ea7\u5207\u6362\u65f6\u95f4<5\u79d2 - \u6062\u590d\u673a\u5236\u6b63\u5e38\u5de5\u4f5c","title":"\u7b2c\u4e09\u9636\u6bb5\uff1a\u5065\u5eb7\u68c0\u67e5\u548c\u964d\u7ea7 (1\u5468)"},{"location":"02_architecture/hybrid_architecture_design/#1_2","text":"\u76ee\u6807 : \u5efa\u7acb\u5b8c\u6574\u7684\u76d1\u63a7\u544a\u8b66\u4f53\u7cfb \u4efb\u52a1\u6e05\u5355 : - [ ] \u5b9e\u73b0MetricsCollector - [ ] \u96c6\u6210Prometheus\u76d1\u63a7 - [ ] \u5efa\u7acb\u544a\u8b66\u89c4\u5219 - [ ] \u521b\u5efa\u76d1\u63a7\u4eea\u8868\u677f - [ ] \u5b9e\u73b0\u544a\u8b66\u901a\u77e5 \u9a8c\u6536\u6807\u51c6 : - \u5173\u952e\u6307\u6807\u76d1\u63a7\u8986\u76d6 - \u544a\u8b66\u53ca\u65f6\u51c6\u786e - \u4eea\u8868\u677f\u6570\u636e\u5b8c\u6574","title":"\u7b2c\u56db\u9636\u6bb5\uff1a\u76d1\u63a7\u544a\u8b66\u7cfb\u7edf (1\u5468)"},{"location":"02_architecture/hybrid_architecture_design/#1-2_2","text":"\u76ee\u6807 : \u7cfb\u7edf\u6027\u80fd\u4f18\u5316\u548c\u5168\u9762\u6d4b\u8bd5 \u4efb\u52a1\u6e05\u5355 : - [ ] \u6027\u80fd\u538b\u529b\u6d4b\u8bd5 - [ ] \u5e76\u53d1\u5b89\u5168\u6d4b\u8bd5 - [ ] \u6545\u969c\u6062\u590d\u6d4b\u8bd5 - [ ] \u6570\u636e\u4e00\u81f4\u6027\u6d4b\u8bd5 - [ ] \u7528\u6237\u9a8c\u6536\u6d4b\u8bd5 \u9a8c\u6536\u6807\u51c6 : - \u7cfb\u7edf\u54cd\u5e94\u65f6\u95f4<2\u79d2 - \u5e76\u53d1\u7528\u6237\u6570>100 - \u6570\u636e\u51c6\u786e\u602799.9% - \u7cfb\u7edf\u53ef\u7528\u602799.5%","title":"\u7b2c\u4e94\u9636\u6bb5\uff1a\u6027\u80fd\u4f18\u5316\u548c\u6d4b\u8bd5 (1-2\u5468)"},{"location":"02_architecture/hybrid_architecture_design/#92","text":"","title":"9.2 \u98ce\u9669\u63a7\u5236\u63aa\u65bd"},{"location":"02_architecture/hybrid_architecture_design/#_6","text":"\u98ce\u9669\u9879 \u98ce\u9669\u7b49\u7ea7 \u5f71\u54cd \u5e94\u5bf9\u63aa\u65bd Tushare API\u53d8\u66f4 \u4e2d \u6570\u636e\u83b7\u53d6\u5931\u8d25 \u7248\u672c\u9501\u5b9a\u3001\u9002\u914d\u5c42\u8bbe\u8ba1 \u6570\u636e\u6e90\u540c\u6b65\u5ef6\u8fdf \u4e2d \u6570\u636e\u4e0d\u4e00\u81f4 \u65f6\u95f4\u6233\u6821\u9a8c\u3001\u589e\u91cf\u540c\u6b65 \u7f13\u5b58\u6570\u636e\u8fc7\u671f \u4f4e \u6027\u80fd\u4e0b\u964d \u667a\u80fd\u9884\u52a0\u8f7d\u3001\u8fc7\u671f\u7b56\u7565 \u5e76\u53d1\u8bbf\u95ee\u51b2\u7a81 \u4e2d \u6570\u636e\u9519\u8bef \u9501\u673a\u5236\u3001\u961f\u5217\u7ba1\u7406","title":"\u6280\u672f\u98ce\u9669"},{"location":"02_architecture/hybrid_architecture_design/#_7","text":"\u98ce\u9669\u9879 \u98ce\u9669\u7b49\u7ea7 \u5f71\u54cd \u5e94\u5bf9\u63aa\u65bd \u6570\u636e\u6e90\u6210\u672c\u4e0a\u5347 \u4e2d \u8fd0\u8425\u6210\u672c\u589e\u52a0 \u6210\u672c\u76d1\u63a7\u3001\u7528\u91cf\u4f18\u5316 \u670d\u52a1\u4e2d\u65ad \u9ad8 \u4e1a\u52a1\u505c\u6b62 \u591a\u91cd\u5907\u4efd\u3001\u5feb\u901f\u6062\u590d \u6570\u636e\u8d28\u91cf\u95ee\u9898 \u4e2d \u8ba1\u7b97\u9519\u8bef \u6570\u636e\u6821\u9a8c\u3001\u8d28\u91cf\u76d1\u63a7","title":"\u4e1a\u52a1\u98ce\u9669"},{"location":"02_architecture/hybrid_architecture_design/#93","text":"","title":"9.3 \u6210\u529f\u6307\u6807"},{"location":"02_architecture/hybrid_architecture_design/#_8","text":"\u7cfb\u7edf\u53ef\u7528\u6027 : \u226599.5% \u54cd\u5e94\u65f6\u95f4 : \u22642\u79d2 (95%\u8bf7\u6c42) \u7f13\u5b58\u547d\u4e2d\u7387 : \u226570% \u9519\u8bef\u7387 : \u22640.1% \u6570\u636e\u51c6\u786e\u6027 : \u226599.9%","title":"\u6280\u672f\u6307\u6807"},{"location":"02_architecture/hybrid_architecture_design/#_9","text":"API\u8c03\u7528\u6210\u672c : \u964d\u4f4e60% \u6570\u636e\u66f4\u65b0\u9891\u7387 : \u63d0\u534750% \u7528\u6237\u6ee1\u610f\u5ea6 : \u226590% \u7cfb\u7edf\u7ef4\u62a4\u6210\u672c : \u964d\u4f4e40%","title":"\u4e1a\u52a1\u6307\u6807"},{"location":"02_architecture/hybrid_architecture_design/#10","text":"","title":"10. \u603b\u7ed3"},{"location":"02_architecture/hybrid_architecture_design/#101","text":"\u9ad8\u53ef\u9760\u6027 : \u53cc\u6570\u636e\u6e90\u4fdd\u969c\uff0c\u5355\u70b9\u6545\u969c\u98ce\u9669\u964d\u4f4e90% \u9ad8\u6027\u80fd : \u591a\u5c42\u7f13\u5b58\u673a\u5236\uff0c\u6570\u636e\u8bbf\u95ee\u901f\u5ea6\u63d0\u534770% \u6210\u672c\u4f18\u5316 : \u667a\u80fdAPI\u8c03\u7528\u7ba1\u7406\uff0c\u6210\u672c\u964d\u4f4e60% \u6613\u7ef4\u62a4 : \u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u7ef4\u62a4\u6210\u672c\u964d\u4f4e40% \u53ef\u6269\u5c55 : \u652f\u6301\u65b0\u6570\u636e\u6e90\u63a5\u5165\uff0c\u6269\u5c55\u6027\u5f3a","title":"10.1 \u67b6\u6784\u4f18\u52bf\u603b\u7ed3"},{"location":"02_architecture/hybrid_architecture_design/#102","text":"\u667a\u80fd\u6570\u636e\u6e90\u8def\u7531 : \u57fa\u4e8e\u5065\u5eb7\u72b6\u6001\u548c\u6027\u80fd\u7684\u52a8\u6001\u9009\u62e9 \u591a\u5c42\u7ea7\u7f13\u5b58 : \u5185\u5b58+Redis+\u6587\u4ef6\u7684\u4e09\u7ea7\u7f13\u5b58\u4f53\u7cfb \u81ea\u52a8\u964d\u7ea7\u6062\u590d : \u65e0\u4eba\u5de5\u5e72\u9884\u7684\u6545\u969c\u5904\u7406\u673a\u5236 \u5b9e\u65f6\u76d1\u63a7\u544a\u8b66 : \u5168\u65b9\u4f4d\u7684\u7cfb\u7edf\u72b6\u6001\u76d1\u63a7","title":"10.2 \u5173\u952e\u6280\u672f\u521b\u65b0"},{"location":"02_architecture/hybrid_architecture_design/#103","text":"AI\u9a71\u52a8\u4f18\u5316 : \u57fa\u4e8e\u673a\u5668\u5b66\u4e60\u7684\u7f13\u5b58\u7b56\u7565\u4f18\u5316 \u591a\u4e91\u90e8\u7f72 : \u652f\u6301\u591a\u4e91\u73af\u5883\u7684\u6570\u636e\u6e90\u5206\u5e03 \u5b9e\u65f6\u6d41\u5904\u7406 : \u96c6\u6210\u6d41\u5f0f\u6570\u636e\u5904\u7406\u80fd\u529b \u8fb9\u7f18\u8ba1\u7b97 : \u652f\u6301\u8fb9\u7f18\u8282\u70b9\u7684\u6570\u636e\u7f13\u5b58 \u6587\u6863\u7248\u672c : v1.0 \u6700\u540e\u66f4\u65b0 : 2025\u5e741\u6708 \u4e0b\u6b21\u5ba1\u6838 : 2025\u5e743\u6708","title":"10.3 \u540e\u7eed\u53d1\u5c55\u65b9\u5411"}]}